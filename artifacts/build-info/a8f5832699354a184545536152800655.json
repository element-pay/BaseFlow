{"id":"a8f5832699354a184545536152800655","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/Gateway.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\r\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\nimport {GatewaySettingManager} from './GatewaySettingManager.sol';\r\nimport {IGateway, IERC20} from './interfaces/IGateway.sol';\r\n\r\n/**\r\n * @title Gateway\r\n * @notice This contract serves as a gateway for creating orders and managing settlements.\r\n */\r\ncontract Gateway is IGateway, GatewaySettingManager, PausableUpgradeable {\r\n\tusing ECDSA for bytes32;\r\n\tstruct fee {\r\n\t\tuint256 protocolFee;\r\n\t\tuint256 liquidityProviderAmount;\r\n\t}\r\n\r\n\tmapping(bytes32 => OrderOut) private orderOut;\r\n\tmapping(bytes32 => OrderIn) private orderIn;\r\n\tmapping(address => uint256) private _nonce;\r\n\tmapping(address => mapping(address => uint256)) private balance;\r\n\tmapping(bytes32 => bool) private processedOrders;\r\n\tuint256[50] private __gap;\r\n\r\n\t/// @custom:oz-upgrades-unsafe-allow constructor\r\n\tconstructor() {\r\n\t\t_disableInitializers();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Initialize function.\r\n\t */\r\n\tfunction initialize() external initializer {\r\n\t\tMAX_BPS = 100_000;\r\n\t\t__Ownable2Step_init();\r\n\t\t__Pausable_init();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier that allows only the aggregator to call a function.\r\n\t */\r\n\tmodifier onlyAggregator() {\r\n\t\trequire(msg.sender == _aggregatorAddress, 'OnlyAggregator');\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier that checks if the token is supported.\r\n\t * @param _token The address of the token to be checked.\r\n\t */\r\n\tmodifier isTokenApproved(address _token) {\r\n\t\trequire(_isTokenSupported[_token] == 1, 'TokenNotSupported');\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Modifier that checks if the deposit amount is valid.\r\n\t * @param _amount The amount to be checked.\r\n\t */\r\n\tmodifier isValidAmount(uint256 _amount) {\r\n\t\trequire(_amount > 0, 'AmountIsZero');\r\n\t\t_;\r\n\t}\r\n\r\n\t/* ##################################################################\r\n                                OWNER FUNCTIONS\r\n    ################################################################## */\r\n\t/**\r\n\t * @dev Pause the contract.\r\n\t */\r\n\tfunction pause() external onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Unpause the contract.\r\n\t */\r\n\tfunction unpause() external onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n\r\n\t/* ##################################################################\r\n                                USER CALLS\r\n    ################################################################## */\r\n\t/** @dev See {createOrder-IGateway}. */\r\n\tfunction createOrder(\r\n\t\taddress _token,\r\n\t\tuint256 _amount,\r\n\t\tuint96 _rate,\r\n\t\taddress _senderFeeRecipient,\r\n\t\tuint256 _senderFee,\r\n\t\taddress _refundAddress,\r\n\t\tstring calldata messageHash\r\n\t) external whenNotPaused returns (bytes32 orderId) {\r\n\t\t// checks that are required\r\n\t\t_handler(_token, _amount, _refundAddress, _senderFeeRecipient, _senderFee);\r\n\r\n\t\t// validate messageHash\r\n\t\trequire(bytes(messageHash).length > 0, 'InvalidMessageHash');\r\n\r\n\t\t// transfer token from msg.sender to contract\r\n\t\tIERC20(_token).transferFrom(msg.sender, address(this), _amount + _senderFee);\r\n\r\n\t\t// increase users nonce to avoid replay attacks\r\n\t\t_nonce[msg.sender]++;\r\n\r\n\t\t// generate transaction id for the transaction\r\n\t\torderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\r\n\r\n\t\t// update transaction\r\n\t\tuint256 _protocolFee = (_amount * protocolFeePercent) / MAX_BPS;\r\n\t\torderOut[orderId] = OrderOut({\r\n\t\t\tsender: msg.sender,\r\n\t\t\ttoken: _token,\r\n\t\t\tsenderFeeRecipient: _senderFeeRecipient,\r\n\t\t\tsenderFee: _senderFee,\r\n\t\t\tprotocolFee: _protocolFee,\r\n\t\t\tisFulfilled: false,\r\n\t\t\tisRefunded: false,\r\n\t\t\trefundAddress: _refundAddress,\r\n\t\t\tcurrentBPS: uint64(MAX_BPS),\r\n\t\t\tamount: _amount\r\n\t\t});\r\n\r\n\t\t// emit order created event\r\n\t\temit OrderCreated(\r\n\t\t\torderOut[orderId].sender,\r\n\t\t\t_token,\r\n\t\t\torderOut[orderId].amount,\r\n\t\t\t_protocolFee,\r\n\t\t\torderId,\r\n\t\t\t_rate,\r\n\t\t\tmessageHash\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to handle order creation.\r\n\t * @param _token The address of the token being traded.\r\n\t * @param _amount The amount of tokens being traded.\r\n\t * @param _refundAddress The address to refund the tokens in case of cancellation.\r\n\t * @param _senderFeeRecipient The address of the recipient for the sender fee.\r\n\t * @param _senderFee The amount of the sender fee.\r\n\t */\r\n\tfunction _handler(\r\n\t\taddress _token,\r\n\t\tuint256 _amount,\r\n\t\taddress _refundAddress,\r\n\t\taddress _senderFeeRecipient,\r\n\t\tuint256 _senderFee\r\n\t) internal isTokenApproved(_token) isValidAmount(_amount) view {\r\n\t\trequire(_refundAddress != address(0), 'ThrowZeroAddress');\r\n\r\n\t\tif (_senderFee > 0) {\r\n\t\t\trequire(_senderFeeRecipient != address(0), 'InvalidSenderFeeRecipient');\r\n\t\t}\r\n\t}\r\n\r\n\t/* ##################################################################\r\n                                AGGREGATOR FUNCTIONS\r\n    ################################################################## */\r\n\t/** @dev See {settleOrderOut-IGateway}. */\r\n\tfunction settleOrderOut(\r\n\t\tbytes32 _splitOrderId,\r\n\t\tbytes32 _orderId,\r\n\t\taddress _provider,\r\n\t\tuint64 _settlePercent\r\n\t) external onlyAggregator returns (bool) {\r\n\t\t// ensure the transaction has not been fulfilled\r\n\t\trequire(!orderOut[_orderId].isFulfilled, 'OrderFulfilled');\r\n\t\trequire(!orderOut[_orderId].isRefunded, 'OrderRefunded');\r\n\r\n\t\t// load the token into memory\r\n\t\taddress token = orderOut[_orderId].token;\r\n\r\n\t\t// subtract sum of amount based on the input _settlePercent\r\n\t\torderOut[_orderId].currentBPS -= _settlePercent;\r\n\r\n\t\tif (orderOut[_orderId].currentBPS == 0) {\r\n\t\t\t// update the transaction to be fulfilled\r\n\t\t\torderOut[_orderId].isFulfilled = true;\r\n\r\n\t\t\tif (orderOut[_orderId].senderFee > 0) {\r\n\t\t\t\t// transfer sender fee\r\n\t\t\t\tIERC20(orderOut[_orderId].token).transfer(\r\n\t\t\t\t\torderOut[_orderId].senderFeeRecipient,\r\n\t\t\t\t\torderOut[_orderId].senderFee\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// emit event\r\n\t\t\t\temit SenderFeeTransferred(\r\n\t\t\t\t\torderOut[_orderId].senderFeeRecipient,\r\n\t\t\t\t\torderOut[_orderId].senderFee\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// transfer to liquidity provider\r\n\t\tuint256 liquidityProviderAmount = (orderOut[_orderId].amount * _settlePercent) / MAX_BPS;\r\n\t\torderOut[_orderId].amount -= liquidityProviderAmount;\r\n\r\n\t\tuint256 protocolFee = (liquidityProviderAmount * protocolFeePercent) / MAX_BPS;\r\n\t\tliquidityProviderAmount -= protocolFee;\r\n\r\n\t\t// transfer protocol fee\r\n\t\tIERC20(token).transfer(treasuryAddress, protocolFee);\r\n\r\n\t\tIERC20(token).transfer(_provider, liquidityProviderAmount);\r\n\r\n\t\t// emit settled event\r\n\t\temit OrderSettledOut(_splitOrderId, _orderId, _provider, _settlePercent);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** @dev See {refundOrder-IGateway}. */\r\n\tfunction refundOrder(uint256 _fee, bytes32 _orderId) external onlyAggregator returns (bool) {\r\n\t\t// ensure the transaction has not been fulfilled\r\n\t\trequire(!orderOut[_orderId].isFulfilled, 'OrderFulfilled');\r\n\t\trequire(!orderOut[_orderId].isRefunded, 'OrderRefunded');\r\n\t\trequire(orderOut[_orderId].protocolFee >= _fee, 'FeeExceedsProtocolFee');\r\n\r\n\t\tif (_fee > 0) {\r\n\t\t\t// transfer refund fee to the treasury\r\n\t\t\tIERC20(orderOut[_orderId].token).transfer(treasuryAddress, _fee);\r\n\t\t}\r\n\r\n\t\t// reset state values\r\n\t\torderOut[_orderId].isRefunded = true;\r\n\t\torderOut[_orderId].currentBPS = 0;\r\n\r\n\t\t// deduct fee from order amount\r\n\t\tuint256 refundAmount = orderOut[_orderId].amount - _fee;\r\n\r\n\t\t// transfer refund amount and sender fee to the refund address\r\n\t\tIERC20(orderOut[_orderId].token).transfer(\r\n\t\t\torderOut[_orderId].refundAddress,\r\n\t\t\trefundAmount + orderOut[_orderId].senderFee\r\n\t\t);\r\n\r\n\t\t// emit refunded event\r\n\t\temit OrderRefunded(_fee, _orderId);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** @dev See {deposit-IGateway}. \r\n\t * enables providers to deposit tokens into the contract\r\n\t * @param _token The address of the token to be deposited.\r\n\t * @param _amount The amount of tokens to be deposited.\r\n\t * Requirements:\r\n\t * - The token must be supported.\r\n\t * - The amount must be greater than 0.\r\n\t * - The contract must have sufficient allowance to transfer the tokens.\r\n\t * - The contract must have sufficient balance to store the tokens.\r\n\t * Emits a {Deposit} event.\r\n\t * Returns a boolean value indicating whether the deposit was successful.\r\n\t * \r\n\t*/\r\n\tfunction deposit(address _token, uint256 _amount) external isTokenApproved(_token) isValidAmount(_amount) returns (bool) {\r\n\t\taddress sender = _msgSender();\r\n\t\tIERC20(_token).transferFrom(sender, address(this), _amount);\r\n\t\tbalance[_token][sender] += _amount;\r\n\t\temit Deposit(sender, _token, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** @dev See {settledOrderIn-IGateway}. \r\n\t * enables providers to settle orders in\r\n\t * @param _orderId The ID of the order to be settled.\r\n\t * @param _signature The signature of the order.\r\n\t * @param _provider The address of the provider.\r\n\t * @param _sender The address of the sender i.e. the user that created the order.\r\n\t * @param _token The address of the token to be settled.\r\n\t * @param _amount The amount of tokens to be settled.\r\n\t*/\r\n    function settleOrderIn(\r\n        bytes32 _orderId,\r\n        bytes memory _signature,\r\n        address _provider,\r\n        address _sender,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyAggregator isValidAmount(_amount) {\r\n        require(!processedOrders[_orderId], \"Order already processed\");\r\n\t\trequire(_provider != address(0), \"Invalid provider address\");\r\n\t\trequire(_sender != address(0), \"Invalid sender address\");\r\n\r\n        // Verify signature to ensure the order is valid and the provider has signed it i.e provider is the one settling the order\r\n        bytes32 messageHash = keccak256(abi.encodePacked(_orderId, _provider, _sender, _token, _amount));\r\n\t\t// convert the message hash to eth signed message hash this is required for signature verification\r\n        bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();\r\n\t\t// recover the address from the signature and compare it with the provider address to ensure the signature is valid\r\n        address recoveredAddress = ethSignedMessageHash.recover(_signature);\r\n        require(recoveredAddress == _provider, \"Invalid signature\");\r\n\t\tuint256 _protocolFee = (_amount * protocolFeePercent) / MAX_BPS;\r\n\t\t// Note: There is no need for checks for token supported as the balance will be 0 if the token is not supported\r\n        require(balance[_token][_provider] >= _amount + _protocolFee, \"Insufficient balance\");\r\n\r\n        // Mark order as processed\r\n        processedOrders[_orderId] = true;\r\n\r\n        // Update balances\r\n        balance[_token][_provider] -= (_amount + _protocolFee);\r\n\r\n\t\torderIn[_orderId] = OrderIn({\r\n\t\t\tamount: _amount,\r\n\t\t\tprovider: _provider,\r\n\t\t\tsender: _sender,\r\n\t\t\ttoken: _token,\r\n\t\t\torderId: _orderId\r\n\t\t});\r\n\r\n\r\n\t\t// transfer to sender\r\n\t\tIERC20(_token).transfer(_sender, _amount);\r\n\t\tif (_protocolFee > 0) {\r\n\t\t\tIERC20(_token).transfer(treasuryAddress, _protocolFee);\r\n\t\t}\r\n\r\n        emit OrderSettledIn(_provider, _sender, _amount, _token, _orderId);\r\n    }\r\n\r\n\t/* ##################################################################\r\n                                VIEW CALLS\r\n    ################################################################## */\r\n\t/** @dev See {getOrderInfoOut-IGateway}. */\r\n\tfunction getOrderInfoOut(bytes32 _orderId) external view returns (OrderOut memory) {\r\n\t\treturn orderOut[_orderId];\r\n\t}\r\n\r\n\t/** @dev See {getOrderInfoIn-IGateway}. */\r\n\tfunction getOrderInfoIn(bytes32 _orderId) external view returns (OrderIn memory) {\r\n\t\treturn orderIn[_orderId];\r\n\t}\r\n\r\n\t/** @dev See {isTokenSupported-IGateway}. */\r\n\tfunction isTokenSupported(address _token) external view returns (bool) {\r\n\t\tif (_isTokenSupported[_token] == 1) return true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/** @dev See {getFeeDetails-IGateway}. */\r\n\tfunction getFeeDetails() external view returns (uint64, uint256) {\r\n\t\treturn (protocolFeePercent, MAX_BPS);\r\n\t}\r\n\r\n\t/** @dev See {getBalance-IGateway}. */\r\n\tfunction getBalance(address _token, address _provider) external view returns (uint256) {\r\n\t\treturn balance[_token][_provider];\r\n\t}\r\n\r\n\t/** See {isOrderProcessed-IGateway} */\r\n\tfunction isOrderProcessed(bytes32 _orderId) external view returns (bool) {\r\n\t\treturn processedOrders[_orderId];\r\n\t}\r\n}\r\n"},"contracts/GatewaySettingManager.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\n/**\n * @title GatewaySettingManager\n * @dev This contract manages the settings and configurations for the Gateway protocol.\n */\npragma solidity ^0.8.18;\n\nimport '@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol';\n\ncontract GatewaySettingManager is Ownable2StepUpgradeable {\n\tuint256 internal MAX_BPS;\n\tuint64 internal protocolFeePercent;\n\taddress internal treasuryAddress;\n\taddress internal _aggregatorAddress;\n\tmapping(address => uint256) internal _isTokenSupported;\n\n\t// this should decrease if more slots are needed on this contract to avoid collisions with base contract\n\tuint256[50] private __gap;\n\n\n\tevent SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status);\n\tevent ProtocolFeeUpdated(uint64 protocolFee);\n\tevent ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress);\n\tevent SetFeeRecipient(address indexed treasuryAddress);\n\n\t/* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n\n\t/**\n\t * @dev Sets the boolean value for a specific setting.\n\t * @param what The setting to be updated.\n\t * @param value The address or value associated with the setting.\n\t * @param status The boolean value to be set.\n\t * Requirements:\n\t * - The value must not be a zero address.\n\t */\n\tfunction settingManagerBool(bytes32 what, address value, uint256 status) external onlyOwner {\n\t\trequire(value != address(0), 'Gateway: zero address');\n\t\trequire(status == 1 || status == 2, 'Gateway: invalid status');\n\t\tif (what == 'token') {\n\t\t\t_isTokenSupported[value] = status;\n\t\t\temit SettingManagerBool(what, value, status);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Updates the protocol fee percentage.\n\t * @param _protocolFeePercent The new protocol fee percentage to be set.\n\t */\n\tfunction updateProtocolFee(uint64 _protocolFeePercent) external onlyOwner {\n\t\tprotocolFeePercent = _protocolFeePercent;\n\t\temit ProtocolFeeUpdated(_protocolFeePercent);\n\t}\n\n\t/**\n\t * @dev Updates a protocol address.\n\t * @param what The address type to be updated (treasury or aggregator).\n\t * @param value The new address to be set.\n\t * Requirements:\n\t * - The value must not be a zero address.\n\t */\n\tfunction updateProtocolAddress(bytes32 what, address value) external onlyOwner {\n\t\trequire(value != address(0), 'Gateway: zero address');\n\t\tbool updated;\n\t\tif (what == 'treasury') {\n\t\t\trequire(treasuryAddress != value, 'Gateway: treasury address already set');\n\t\t\ttreasuryAddress = value;\n\t\t\tupdated = true;\n\t\t} else if (what == 'aggregator') {\n\t\t\trequire(_aggregatorAddress != value, 'Gateway: aggregator address already set');\n\t\t\t_aggregatorAddress = value;\n\t\t\tupdated = true;\n\t\t}\n\t\tif (updated) {\n\t\t\temit ProtocolAddressUpdated(what, value);\n\t\t}\n\t}\n}\n"},"contracts/interfaces/IGateway.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\n\r\n/**\r\n * @title IGateway\r\n * @notice Interface for the Gateway contract.\r\n */\r\ninterface IGateway {\r\n\t/* ##################################################################\r\n                                EVENTS\r\n    ################################################################## */\r\n\t/**\r\n\t * @notice Emitted when an order is created.\r\n\t * @param sender The address of the sender.\r\n\t * @param token The address of the deposited token.\r\n\t * @param amount The amount of the deposit.\r\n\t * @param orderId The ID of the order.\r\n\t * @param rate The rate at which the deposit is made.\r\n\t * @param messageHash The hash of the message.\r\n\t */\r\n\tevent OrderCreated(\r\n\t\taddress indexed sender,\r\n\t\taddress indexed token,\r\n\t\tuint256 indexed amount,\r\n\t\tuint256 protocolFee,\r\n\t\tbytes32 orderId,\r\n\t\tuint256 rate,\r\n\t\tstring messageHash\r\n\t);\r\n\r\n\t/**\r\n\t * @notice Emitted when an order is settled out.\r\n\t * @param splitOrderId The ID of the split order.\r\n\t * @param orderId The ID of the order.\r\n\t * @param liquidityProvider The address of the liquidity provider.\r\n\t * @param settlePercent The percentage at which the transaction is settled.\r\n\t */\r\n\tevent OrderSettledOut(\r\n\t\tbytes32 splitOrderId,\r\n\t\tbytes32 indexed orderId,\r\n\t\taddress indexed liquidityProvider,\r\n\t\tuint96 settlePercent\r\n\t);\r\n\r\n\t/**\r\n\t * @notice Emitted when an aggregator refunds a transaction.\r\n\t * @param fee The fee deducted from the refund amount.\r\n\t * @param orderId The ID of the order.\r\n\t */\r\n\tevent OrderRefunded(uint256 fee, bytes32 indexed orderId);\r\n\r\n\t/**\r\n\t * @notice Emitted when the sender's fee is transferred.\r\n\t * @param sender The address of the sender.\r\n\t * @param amount The amount of the fee transferred.\r\n\t */\r\n\tevent SenderFeeTransferred(address indexed sender, uint256 indexed amount);\r\n\r\n\t/**\r\n\t * @notice Emitted when a deposit is made by a provider.\r\n\t * @param sender The address of the sender.\r\n\t * @param token The address of the deposited token.\r\n\t * @param amount The amount of the deposit.\r\n\t */\r\n\tevent Deposit(address indexed sender, address indexed token, uint256 indexed amount);\r\n\r\n\t/**\r\n\t * @dev Emitted when an order is settled in.\r\n\t * @param provider The address of the provider.\r\n\t * @param senderAddress The address of the sender.\r\n\t * @param amount The address of the deposited token.\r\n\t * @param token The amount of the deposit.\r\n\t * @param orderId The ID of the order.\r\n\t */\r\n\tevent OrderSettledIn(address indexed provider, address indexed senderAddress, uint256 indexed amount, address token, bytes32 orderId);\r\n\t/* ##################################################################\r\n                                STRUCTS\r\n    ################################################################## */\r\n\t/**\r\n\t * @notice Struct representing an order out.\r\n\t * @param sender The address of the sender.\r\n\t * @param token The address of the token.\r\n\t * @param senderFeeRecipient The address of the sender fee recipient.\r\n\t * @param senderFee The fee to be paid to the sender fee recipient.\r\n\t * @param protocolFee The protocol fee to be paid.\r\n\t * @param isFulfilled Whether the order is fulfilled.\r\n\t * @param isRefunded Whether the order is refunded.\r\n\t * @param refundAddress The address to which the refund is made.\r\n\t * @param currentBPS The current basis points.\r\n\t * @param amount The amount of the order.\r\n\t */\r\n\tstruct OrderOut {\r\n\t\taddress sender;\r\n\t\taddress token;\r\n\t\taddress senderFeeRecipient;\r\n\t\tuint256 senderFee;\r\n\t\tuint256 protocolFee;\r\n\t\tbool isFulfilled;\r\n\t\tbool isRefunded;\r\n\t\taddress refundAddress;\r\n\t\tuint96 currentBPS;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Struct representing an order settled in.\r\n\t * @param amount  The amount of the order.\r\n\t * @param provider  The address of the provider.\r\n\t * @param sender  The address of the sender. \r\n\t * @param token The address of the token. \r\n\t * @param orderid The ID of the order.\r\n\t */\r\n\tstruct OrderIn {\r\n\t\tuint256 amount;\r\n\t\taddress provider;\r\n\t\taddress sender;\r\n\t\taddress token;\r\n\t\tbytes32 orderId;\r\n\t}\r\n\r\n\t/* ##################################################################\r\n                                EXTERNAL CALLS\r\n    ################################################################## */\r\n\t/**\r\n\t * @notice Locks the sender's amount of token into Gateway.\r\n\t * @dev Requirements:\r\n\t * - `msg.sender` must approve Gateway contract on `_token` of at least `amount` before function call.\r\n\t * - `_token` must be an acceptable token. See {isTokenSupported}.\r\n\t * - `amount` must be greater than minimum.\r\n\t * - `_refundAddress` refund address must not be zero address.\r\n\t * @param _token The address of the token.\r\n\t * @param _amount The amount in the decimal of `_token` to be locked.\r\n\t * @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\r\n\t * @param _senderFeeRecipient The address that will receive `_senderFee` in `_token`.\r\n\t * @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient`.\r\n\t * @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\r\n\t * @param messageHash The hash of the message.\r\n\t * @return _orderId The ID of the order.\r\n\t */\r\n\tfunction createOrder(\r\n\t\taddress _token,\r\n\t\tuint256 _amount,\r\n\t\tuint96 _rate,\r\n\t\taddress _senderFeeRecipient,\r\n\t\tuint256 _senderFee,\r\n\t\taddress _refundAddress,\r\n\t\tstring calldata messageHash\r\n\t) external returns (bytes32 _orderId);\r\n\r\n\t/**\r\n\t * @notice Settles an order out transaction and distributes fees accordingly.\r\n\t * @param _splitOrderId The ID of the split order.\r\n\t * @param _orderId The ID of the transaction.\r\n\t * @param _provider The address of the liquidity provider.\r\n\t * @param _settlePercent The rate at which the transaction is settled.\r\n\t * @return bool The settlement is successful.\r\n\t */\r\n\tfunction settleOrderOut(\r\n\t\tbytes32 _splitOrderId,\r\n\t\tbytes32 _orderId,\r\n\t\taddress _provider,\r\n\t\tuint64 _settlePercent\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @notice Refunds to the specified refund address.\r\n\t * @dev Requirements:\r\n\t * - Only aggregators can call this function.\r\n\t * @param _fee The amount to be deducted from the amount to be refunded.\r\n\t * @param _orderId The ID of the transaction.\r\n\t * @return bool the refund is successful.\r\n\t */\r\n\tfunction refundOrder(uint256 _fee, bytes32 _orderId) external returns (bool);\r\n\r\n\t/**\r\n\t * @notice Allow a provider to deposit an asset into Gateway.\r\n\t * @dev Requirements:\r\n\t * - The amount must be greater than minimum.\r\n\t * - The asset must be supported.\r\n\t * - The provider must approve Gateway contract on `_token` of at least `_amount` before function call\r\n\t * @param _token The address of the asset.\r\n\t * @param _amount The amount to be deposited.\r\n\t * @return bool The deposit is successful.\r\n\t */\r\n\tfunction deposit(address _token, uint256 _amount) external returns (bool);\r\n\r\n\t\r\n\t/**\r\n\t * @notice Allow aggregator to settle an order coming in.\r\n\t * @param _orderId The ID of the transaction.\r\n\t * @param _signature The signature of the provider.\r\n\t * @param _provider The address of the provider.\r\n\t * @param _senderAddress The address of the sender.\r\n\t * @param _token The address of the asset.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction settleOrderIn(\r\n        bytes32 _orderId,\r\n        bytes memory _signature,\r\n        address _provider,\r\n        address _senderAddress,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n\t/**\r\n\t * @notice Checks if a token is supported by Gateway.\r\n\t * @param _token The address of the token to check.\r\n\t * @return bool the token is supported.\r\n\t */\r\n\tfunction isTokenSupported(address _token) external view returns (bool);\r\n\r\n\t/**\r\n\t * @notice Gets the details of an off ramp order.\r\n\t * @param _orderId The ID of the order.\r\n\t * @return Order The order details.\r\n\t */\r\n\tfunction getOrderInfoOut(bytes32 _orderId) external view returns (OrderOut memory);\r\n\r\n\t/**\r\n\t * @notice Gets the details of an on ramp order.\r\n\t * @param _orderId The ID of the order.\r\n\t * @return Order The order details.\r\n\t */\r\n\tfunction getOrderInfoIn(bytes32 _orderId) external view returns (OrderIn memory);\r\n\r\n\t/**\r\n\t * @notice Gets the fee details of Gateway.\r\n\t * @return protocolReward The protocol reward amount.\r\n\t * @return max_bps The maximum basis points.\r\n\t */\r\n\tfunction getFeeDetails() external view returns (uint64 protocolReward, uint256 max_bps);\r\n\r\n\t/**\r\n\t * @notice Gets the balance of a provider.\r\n\t * @param _provider The address of the provider.\r\n\t * @param _asset The address of the asset.\r\n\t * @return uint256 The provider's balance.\r\n\t */\r\n\tfunction getBalance(address _asset, address _provider) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @notice Gets order processed status.\r\n\t * @param _orderId The ID of the order.\r\n\t * @return bool The order processed status.\r\n\t */\r\n\tfunction isOrderProcessed(bytes32 _orderId) external view returns (bool);\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[917],"Initializable":[408],"Ownable2StepUpgradeable":[106],"OwnableUpgradeable":[239]},"id":107,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"./OwnableUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":107,"sourceUnit":240,"src":"132:34:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":107,"sourceUnit":409,"src":"167:63:0","symbolAliases":[{"foreign":{"id":3,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"175:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6,"name":"Initializable","nameLocations":["719:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"719:13:0"},"id":7,"nodeType":"InheritanceSpecifier","src":"719:13:0"},{"baseName":{"id":8,"name":"OwnableUpgradeable","nameLocations":["734:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":239,"src":"734:18:0"},"id":9,"nodeType":"InheritanceSpecifier","src":"734:18:0"}],"canonicalName":"Ownable2StepUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"232:441:0","text":" @dev Contract module which provides access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership} and {acceptOwnership}.\n This module is used through inheritance. It will make available all functions\n from parent (Ownable)."},"fullyImplemented":true,"id":106,"linearizedBaseContracts":[106,239,917,408],"name":"Ownable2StepUpgradeable","nameLocation":"692:23:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":11,"mutability":"mutable","name":"_pendingOwner","nameLocation":"775:13:0","nodeType":"VariableDeclaration","scope":106,"src":"759:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"759:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700","id":17,"name":"OwnershipTransferStarted","nameLocation":"801:24:0","nodeType":"EventDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"842:13:0","nodeType":"VariableDeclaration","scope":17,"src":"826:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":15,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"873:8:0","nodeType":"VariableDeclaration","scope":17,"src":"857:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":14,"name":"address","nodeType":"ElementaryTypeName","src":"857:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"825:57:0"},"src":"795:88:0"},{"body":{"id":25,"nodeType":"Block","src":"946:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"956:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"956:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"956:26:0"}]},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["929:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"929:16:0"},"nodeType":"ModifierInvocation","src":"929:16:0"}],"name":"__Ownable2Step_init","nameLocation":"898:19:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"917:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"946:0:0"},"scope":106,"src":"889:100:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":31,"nodeType":"Block","src":"1062:7:0","statements":[]},"id":32,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1045:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1045:16:0"},"nodeType":"ModifierInvocation","src":"1045:16:0"}],"name":"__Ownable2Step_init_unchained","nameLocation":"1004:29:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1033:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1062:0:0"},"scope":106,"src":"995:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":40,"nodeType":"Block","src":"1206:37:0","statements":[{"expression":{"id":38,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1223:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":37,"id":39,"nodeType":"Return","src":"1216:20:0"}]},"documentation":{"id":33,"nodeType":"StructuredDocumentation","src":"1074:65:0","text":" @dev Returns the address of the pending owner."},"functionSelector":"e30c3978","id":41,"implemented":true,"kind":"function","modifiers":[],"name":"pendingOwner","nameLocation":"1153:12:0","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[],"src":"1165:2:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":41,"src":"1197:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":35,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1196:9:0"},"scope":106,"src":"1144:99:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[213],"body":{"id":60,"nodeType":"Block","src":"1515:99:0","statements":[{"expression":{"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":50,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1525:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":51,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1541:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1525:24:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":53,"nodeType":"ExpressionStatement","src":"1525:24:0"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":55,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1589:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1589:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":57,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1598:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":54,"name":"OwnershipTransferStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"1564:24:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":59,"nodeType":"EmitStatement","src":"1559:48:0"}]},"documentation":{"id":42,"nodeType":"StructuredDocumentation","src":"1249:182:0","text":" @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":61,"implemented":true,"kind":"function","modifiers":[{"id":48,"kind":"modifierInvocation","modifierName":{"id":47,"name":"onlyOwner","nameLocations":["1505:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"1505:9:0"},"nodeType":"ModifierInvocation","src":"1505:9:0"}],"name":"transferOwnership","nameLocation":"1445:17:0","nodeType":"FunctionDefinition","overrides":{"id":46,"nodeType":"OverrideSpecifier","overrides":[],"src":"1496:8:0"},"parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44,"mutability":"mutable","name":"newOwner","nameLocation":"1471:8:0","nodeType":"VariableDeclaration","scope":61,"src":"1463:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"1463:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1462:18:0"},"returnParameters":{"id":49,"nodeType":"ParameterList","parameters":[],"src":"1515:0:0"},"scope":106,"src":"1436:178:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[233],"body":{"id":77,"nodeType":"Block","src":"1870:81:0","statements":[{"expression":{"id":69,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1880:20:0","subExpression":{"id":68,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1887:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":70,"nodeType":"ExpressionStatement","src":"1880:20:0"},{"expression":{"arguments":[{"id":74,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"1935:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":71,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1910:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Ownable2StepUpgradeable_$106_$","typeString":"type(contract super Ownable2StepUpgradeable)"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1916:18:0","memberName":"_transferOwnership","nodeType":"MemberAccess","referencedDeclaration":233,"src":"1910:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":76,"nodeType":"ExpressionStatement","src":"1910:34:0"}]},"documentation":{"id":62,"nodeType":"StructuredDocumentation","src":"1620:173:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n Internal function without access restriction."},"id":78,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1807:18:0","nodeType":"FunctionDefinition","overrides":{"id":66,"nodeType":"OverrideSpecifier","overrides":[],"src":"1861:8:0"},"parameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"newOwner","nameLocation":"1834:8:0","nodeType":"VariableDeclaration","scope":78,"src":"1826:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1825:18:0"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"1870:0:0"},"scope":106,"src":"1798:153:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":99,"nodeType":"Block","src":"2073:170:0","statements":[{"assignments":[83],"declarations":[{"constant":false,"id":83,"mutability":"mutable","name":"sender","nameLocation":"2091:6:0","nodeType":"VariableDeclaration","scope":99,"src":"2083:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"2083:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":86,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":84,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"2100:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2100:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2083:29:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2130:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2130:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":90,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2148:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2130:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206e6577206f776e6572","id":92,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2156:43:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""},"value":"Ownable2Step: caller is not the new owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""}],"id":87,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2122:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2122:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":94,"nodeType":"ExpressionStatement","src":"2122:78:0"},{"expression":{"arguments":[{"id":96,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"2229:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":95,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[78],"referencedDeclaration":78,"src":"2210:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2210:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"ExpressionStatement","src":"2210:26:0"}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"1957:69:0","text":" @dev The new owner accepts the ownership transfer."},"functionSelector":"79ba5097","id":100,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"2040:15:0","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"2055:2:0"},"returnParameters":{"id":81,"nodeType":"ParameterList","parameters":[],"src":"2073:0:0"},"scope":106,"src":"2031:212:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"constant":false,"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"2249:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":105,"mutability":"mutable","name":"__gap","nameLocation":"2528:5:0","nodeType":"VariableDeclaration","scope":106,"src":"2508:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2508:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":104,"length":{"hexValue":"3439","id":103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2516:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2508:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":107,"src":"674:1862:0","usedErrors":[]}],"src":"107:2430:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[917],"Initializable":[408],"OwnableUpgradeable":[239]},"id":240,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":108,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":240,"sourceUnit":918,"src":"127:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":111,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":240,"sourceUnit":409,"src":"169:63:1","symbolAliases":[{"foreign":{"id":110,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"177:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":113,"name":"Initializable","nameLocations":["769:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"769:13:1"},"id":114,"nodeType":"InheritanceSpecifier","src":"769:13:1"},{"baseName":{"id":115,"name":"ContextUpgradeable","nameLocations":["784:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":917,"src":"784:18:1"},"id":116,"nodeType":"InheritanceSpecifier","src":"784:18:1"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"234:494:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":239,"linearizedBaseContracts":[239,917,408],"name":"OwnableUpgradeable","nameLocation":"747:18:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":118,"mutability":"mutable","name":"_owner","nameLocation":"825:6:1","nodeType":"VariableDeclaration","scope":239,"src":"809:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":124,"name":"OwnershipTransferred","nameLocation":"844:20:1","nodeType":"EventDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"881:13:1","nodeType":"VariableDeclaration","scope":124,"src":"865:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"865:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":122,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"912:8:1","nodeType":"VariableDeclaration","scope":124,"src":"896:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"896:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"864:57:1"},"src":"838:84:1"},{"body":{"id":133,"nodeType":"Block","src":"1076:43:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":130,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"1086:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1086:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":132,"nodeType":"ExpressionStatement","src":"1086:26:1"}]},"documentation":{"id":125,"nodeType":"StructuredDocumentation","src":"928:91:1","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":134,"implemented":true,"kind":"function","modifiers":[{"id":128,"kind":"modifierInvocation","modifierName":{"id":127,"name":"onlyInitializing","nameLocations":["1059:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1059:16:1"},"nodeType":"ModifierInvocation","src":"1059:16:1"}],"name":"__Ownable_init","nameLocation":"1033:14:1","nodeType":"FunctionDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[],"src":"1047:2:1"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[],"src":"1076:0:1"},"scope":239,"src":"1024:95:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":144,"nodeType":"Block","src":"1187:49:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":140,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"1216:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":139,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"1197:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1197:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"1197:32:1"}]},"id":145,"implemented":true,"kind":"function","modifiers":[{"id":137,"kind":"modifierInvocation","modifierName":{"id":136,"name":"onlyInitializing","nameLocations":["1170:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1170:16:1"},"nodeType":"ModifierInvocation","src":"1170:16:1"}],"name":"__Ownable_init_unchained","nameLocation":"1134:24:1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[],"src":"1158:2:1"},"returnParameters":{"id":138,"nodeType":"ParameterList","parameters":[],"src":"1187:0:1"},"scope":239,"src":"1125:111:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":152,"nodeType":"Block","src":"1345:41:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":148,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"1355:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":150,"nodeType":"ExpressionStatement","src":"1355:13:1"},{"id":151,"nodeType":"PlaceholderStatement","src":"1378:1:1"}]},"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"1242:77:1","text":" @dev Throws if called by any account other than the owner."},"id":153,"name":"onlyOwner","nameLocation":"1333:9:1","nodeType":"ModifierDefinition","parameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"1342:2:1"},"src":"1324:62:1","virtual":false,"visibility":"internal"},{"body":{"id":161,"nodeType":"Block","src":"1517:30:1","statements":[{"expression":{"id":159,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1534:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":158,"id":160,"nodeType":"Return","src":"1527:13:1"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"1392:65:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":162,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1471:5:1","nodeType":"FunctionDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[],"src":"1476:2:1"},"returnParameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":162,"src":"1508:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1507:9:1"},"scope":239,"src":"1462:85:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":175,"nodeType":"Block","src":"1665:85:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":167,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1683:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1683:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":169,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"1694:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1694:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1683:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1708:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":166,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1675:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1675:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":174,"nodeType":"ExpressionStatement","src":"1675:68:1"}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"1553:62:1","text":" @dev Throws if the sender is not the owner."},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1629:11:1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"1640:2:1"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"1665:0:1"},"scope":239,"src":"1620:130:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":189,"nodeType":"Block","src":"2139:47:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2176:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2168:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":183,"name":"address","nodeType":"ElementaryTypeName","src":"2168:7:1","typeDescriptions":{}}},"id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2168:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":182,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2149:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2149:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":188,"nodeType":"ExpressionStatement","src":"2149:30:1"}]},"documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"1756:324:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":190,"implemented":true,"kind":"function","modifiers":[{"id":180,"kind":"modifierInvocation","modifierName":{"id":179,"name":"onlyOwner","nameLocations":["2129:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"2129:9:1"},"nodeType":"ModifierInvocation","src":"2129:9:1"}],"name":"renounceOwnership","nameLocation":"2094:17:1","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[],"src":"2111:2:1"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[],"src":"2139:0:1"},"scope":239,"src":"2085:101:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":212,"nodeType":"Block","src":"2405:128:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":199,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2423:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2443:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2435:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":200,"name":"address","nodeType":"ElementaryTypeName","src":"2435:7:1","typeDescriptions":{}}},"id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2435:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2423:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2447:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":198,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2415:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"2415:73:1"},{"expression":{"arguments":[{"id":209,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2517:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":208,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2498:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2498:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"ExpressionStatement","src":"2498:28:1"}]},"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"2192:138:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":213,"implemented":true,"kind":"function","modifiers":[{"id":196,"kind":"modifierInvocation","modifierName":{"id":195,"name":"onlyOwner","nameLocations":["2395:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"2395:9:1"},"nodeType":"ModifierInvocation","src":"2395:9:1"}],"name":"transferOwnership","nameLocation":"2344:17:1","nodeType":"FunctionDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"newOwner","nameLocation":"2370:8:1","nodeType":"VariableDeclaration","scope":213,"src":"2362:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2361:18:1"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[],"src":"2405:0:1"},"scope":239,"src":"2335:198:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":232,"nodeType":"Block","src":"2750:124:1","statements":[{"assignments":[220],"declarations":[{"constant":false,"id":220,"mutability":"mutable","name":"oldOwner","nameLocation":"2768:8:1","nodeType":"VariableDeclaration","scope":232,"src":"2760:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":219,"name":"address","nodeType":"ElementaryTypeName","src":"2760:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":222,"initialValue":{"id":221,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2779:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2760:25:1"},{"expression":{"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":223,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2795:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":224,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2804:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2795:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":226,"nodeType":"ExpressionStatement","src":"2795:17:1"},{"eventCall":{"arguments":[{"id":228,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"2848:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":229,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2858:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":227,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"2827:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":231,"nodeType":"EmitStatement","src":"2822:45:1"}]},"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"2539:143:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":233,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2696:18:1","nodeType":"FunctionDefinition","parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"newOwner","nameLocation":"2723:8:1","nodeType":"VariableDeclaration","scope":233,"src":"2715:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2714:18:1"},"returnParameters":{"id":218,"nodeType":"ParameterList","parameters":[],"src":"2750:0:1"},"scope":239,"src":"2687:187:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":234,"nodeType":"StructuredDocumentation","src":"2880:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":238,"mutability":"mutable","name":"__gap","nameLocation":"3159:5:1","nodeType":"VariableDeclaration","scope":239,"src":"3139:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":235,"name":"uint256","nodeType":"ElementaryTypeName","src":"3139:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":237,"length":{"hexValue":"3439","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:2:1","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3139:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":240,"src":"729:2438:1","usedErrors":[]}],"src":"102:3066:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[866],"Initializable":[408]},"id":409,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":241,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":242,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":409,"sourceUnit":867,"src":"138:44:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"184:2209:2","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":408,"linearizedBaseContracts":[408],"name":"Initializable","nameLocation":"2412:13:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":244,"nodeType":"StructuredDocumentation","src":"2432:109:2","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":246,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:2","nodeType":"VariableDeclaration","scope":408,"src":"2546:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":245,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":247,"nodeType":"StructuredDocumentation","src":"2579:91:2","text":" @dev Indicates that the contract is in the process of being initialized."},"id":249,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:2","nodeType":"VariableDeclaration","scope":408,"src":"2675:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":248,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"2708:90:2","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":254,"name":"Initialized","nameLocation":"2809:11:2","nodeType":"EventDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:2","nodeType":"VariableDeclaration","scope":254,"src":"2821:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":251,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:2"},"src":"2803:33:2"},{"body":{"id":309,"nodeType":"Block","src":"3269:483:2","statements":[{"assignments":[258],"declarations":[{"constant":false,"id":258,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:2","nodeType":"VariableDeclaration","scope":309,"src":"3279:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":257,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":261,"initialValue":{"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:2","subExpression":{"id":259,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"3302:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":263,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3347:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":264,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"3365:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":268,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:2","subExpression":{"arguments":[{"arguments":[{"id":273,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$408","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$408","typeString":"contract Initializable"}],"id":272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:2","typeDescriptions":{}}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":269,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"3388:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$866_$","typeString":"type(library AddressUpgradeable)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":554,"src":"3388:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":277,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"3436:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":281,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":262,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":285,"nodeType":"ExpressionStatement","src":"3325:201:2"},{"expression":{"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":286,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"3536:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":289,"nodeType":"ExpressionStatement","src":"3536:16:2"},{"condition":{"id":290,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3566:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":296,"nodeType":"IfStatement","src":"3562:65:2","trueBody":{"id":295,"nodeType":"Block","src":"3582:45:2","statements":[{"expression":{"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":291,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"3596:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":294,"nodeType":"ExpressionStatement","src":"3596:20:2"}]}},{"id":297,"nodeType":"PlaceholderStatement","src":"3636:1:2"},{"condition":{"id":298,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3651:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":308,"nodeType":"IfStatement","src":"3647:99:2","trueBody":{"id":307,"nodeType":"Block","src":"3667:79:2","statements":[{"expression":{"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":299,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"3681:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":302,"nodeType":"ExpressionStatement","src":"3681:21:2"},{"eventCall":{"arguments":[{"hexValue":"31","id":304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":303,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3721:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":306,"nodeType":"EmitStatement","src":"3716:19:2"}]}}]},"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"2842:399:2","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":310,"name":"initializer","nameLocation":"3255:11:2","nodeType":"ModifierDefinition","parameters":{"id":256,"nodeType":"ParameterList","parameters":[],"src":"3266:2:2"},"src":"3246:506:2","virtual":false,"visibility":"internal"},{"body":{"id":342,"nodeType":"Block","src":"4863:255:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:2","subExpression":{"id":316,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"4882:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"4899:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":319,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"4914:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":315,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":324,"nodeType":"ExpressionStatement","src":"4873:99:2"},{"expression":{"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":325,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"4982:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":326,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"4997:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":328,"nodeType":"ExpressionStatement","src":"4982:22:2"},{"expression":{"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":329,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"5014:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":332,"nodeType":"ExpressionStatement","src":"5014:20:2"},{"id":333,"nodeType":"PlaceholderStatement","src":"5044:1:2"},{"expression":{"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":334,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"5055:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":337,"nodeType":"ExpressionStatement","src":"5055:21:2"},{"eventCall":{"arguments":[{"id":339,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"5103:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":338,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"5091:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"EmitStatement","src":"5086:25:2"}]},"documentation":{"id":311,"nodeType":"StructuredDocumentation","src":"3758:1062:2","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":343,"name":"reinitializer","nameLocation":"4834:13:2","nodeType":"ModifierDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":313,"mutability":"mutable","name":"version","nameLocation":"4854:7:2","nodeType":"VariableDeclaration","scope":343,"src":"4848:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":312,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:2"},"src":"4825:293:2","virtual":false,"visibility":"internal"},{"body":{"id":352,"nodeType":"Block","src":"5356:97:2","statements":[{"expression":{"arguments":[{"id":347,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"5374:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":346,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":350,"nodeType":"ExpressionStatement","src":"5366:69:2"},{"id":351,"nodeType":"PlaceholderStatement","src":"5445:1:2"}]},"documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"5124:199:2","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":353,"name":"onlyInitializing","nameLocation":"5337:16:2","nodeType":"ModifierDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"5353:2:2"},"src":"5328:125:2","virtual":false,"visibility":"internal"},{"body":{"id":388,"nodeType":"Block","src":"5988:231:2","statements":[{"expression":{"arguments":[{"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:2","subExpression":{"id":358,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"6007:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":357,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":362,"nodeType":"ExpressionStatement","src":"5998:66:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":363,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"6078:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":365,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":364,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:2","memberName":"max","nodeType":"MemberAccess","src":"6094:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":387,"nodeType":"IfStatement","src":"6074:139:2","trueBody":{"id":386,"nodeType":"Block","src":"6111:102:2","statements":[{"expression":{"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":370,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"6125:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":372,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":371,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:2","memberName":"max","nodeType":"MemberAccess","src":"6140:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":377,"nodeType":"ExpressionStatement","src":"6125:30:2"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":380,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":379,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:2","memberName":"max","nodeType":"MemberAccess","src":"6186:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":378,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"6174:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":385,"nodeType":"EmitStatement","src":"6169:33:2"}]}}]},"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"5459:475:2","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":389,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:2","nodeType":"FunctionDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[],"src":"5968:2:2"},"returnParameters":{"id":356,"nodeType":"ParameterList","parameters":[],"src":"5988:0:2"},"scope":408,"src":"5939:280:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":397,"nodeType":"Block","src":"6393:36:2","statements":[{"expression":{"id":395,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"6410:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":394,"id":396,"nodeType":"Return","src":"6403:19:2"}]},"documentation":{"id":390,"nodeType":"StructuredDocumentation","src":"6225:99:2","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":398,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:2","nodeType":"FunctionDefinition","parameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"6360:2:2"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":398,"src":"6386:5:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":392,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:2"},"scope":408,"src":"6329:100:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":406,"nodeType":"Block","src":"6601:37:2","statements":[{"expression":{"id":404,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"6618:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":403,"id":405,"nodeType":"Return","src":"6611:20:2"}]},"documentation":{"id":399,"nodeType":"StructuredDocumentation","src":"6435:105:2","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":407,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:2","nodeType":"FunctionDefinition","parameters":{"id":400,"nodeType":"ParameterList","parameters":[],"src":"6569:2:2"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":407,"src":"6595:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":401,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:2"},"scope":408,"src":"6545:93:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":409,"src":"2394:4246:2","usedErrors":[]}],"src":"113:6528:2"},"id":2},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[917],"Initializable":[408],"PausableUpgradeable":[536]},"id":537,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":410,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":537,"sourceUnit":918,"src":"130:41:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":413,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":537,"sourceUnit":409,"src":"172:63:3","symbolAliases":[{"foreign":{"id":412,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"180:13:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":415,"name":"Initializable","nameLocations":["718:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"718:13:3"},"id":416,"nodeType":"InheritanceSpecifier","src":"718:13:3"},{"baseName":{"id":417,"name":"ContextUpgradeable","nameLocations":["733:18:3"],"nodeType":"IdentifierPath","referencedDeclaration":917,"src":"733:18:3"},"id":418,"nodeType":"InheritanceSpecifier","src":"733:18:3"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":414,"nodeType":"StructuredDocumentation","src":"237:439:3","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":536,"linearizedBaseContracts":[536,917,408],"name":"PausableUpgradeable","nameLocation":"695:19:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"758:73:3","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":423,"name":"Paused","nameLocation":"842:6:3","nodeType":"EventDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"857:7:3","nodeType":"VariableDeclaration","scope":423,"src":"849:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"849:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"848:17:3"},"src":"836:30:3"},{"anonymous":false,"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"872:70:3","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":428,"name":"Unpaused","nameLocation":"953:8:3","nodeType":"EventDefinition","parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"970:7:3","nodeType":"VariableDeclaration","scope":428,"src":"962:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":425,"name":"address","nodeType":"ElementaryTypeName","src":"962:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"961:17:3"},"src":"947:32:3"},{"constant":false,"id":430,"mutability":"mutable","name":"_paused","nameLocation":"998:7:3","nodeType":"VariableDeclaration","scope":536,"src":"985:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":429,"name":"bool","nodeType":"ElementaryTypeName","src":"985:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":439,"nodeType":"Block","src":"1137:44:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":436,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"1147:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1147:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":438,"nodeType":"ExpressionStatement","src":"1147:27:3"}]},"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"1012:67:3","text":" @dev Initializes the contract in unpaused state."},"id":440,"implemented":true,"kind":"function","modifiers":[{"id":434,"kind":"modifierInvocation","modifierName":{"id":433,"name":"onlyInitializing","nameLocations":["1120:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1120:16:3"},"nodeType":"ModifierInvocation","src":"1120:16:3"}],"name":"__Pausable_init","nameLocation":"1093:15:3","nodeType":"FunctionDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[],"src":"1108:2:3"},"returnParameters":{"id":435,"nodeType":"ParameterList","parameters":[],"src":"1137:0:3"},"scope":536,"src":"1084:97:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":449,"nodeType":"Block","src":"1250:32:3","statements":[{"expression":{"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":445,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"1260:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1270:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1260:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":448,"nodeType":"ExpressionStatement","src":"1260:15:3"}]},"id":450,"implemented":true,"kind":"function","modifiers":[{"id":443,"kind":"modifierInvocation","modifierName":{"id":442,"name":"onlyInitializing","nameLocations":["1233:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1233:16:3"},"nodeType":"ModifierInvocation","src":"1233:16:3"}],"name":"__Pausable_init_unchained","nameLocation":"1196:25:3","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[],"src":"1221:2:3"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[],"src":"1250:0:3"},"scope":536,"src":"1187:95:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":457,"nodeType":"Block","src":"1493:47:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":453,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1503:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1503:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":455,"nodeType":"ExpressionStatement","src":"1503:19:3"},{"id":456,"nodeType":"PlaceholderStatement","src":"1532:1:3"}]},"documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"1288:175:3","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":458,"name":"whenNotPaused","nameLocation":"1477:13:3","nodeType":"ModifierDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[],"src":"1490:2:3"},"src":"1468:72:3","virtual":false,"visibility":"internal"},{"body":{"id":465,"nodeType":"Block","src":"1740:44:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":461,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"1750:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":463,"nodeType":"ExpressionStatement","src":"1750:16:3"},{"id":464,"nodeType":"PlaceholderStatement","src":"1776:1:3"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"1546:167:3","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":466,"name":"whenPaused","nameLocation":"1727:10:3","nodeType":"ModifierDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[],"src":"1737:2:3"},"src":"1718:66:3","virtual":false,"visibility":"internal"},{"body":{"id":474,"nodeType":"Block","src":"1932:31:3","statements":[{"expression":{"id":472,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"1949:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":471,"id":473,"nodeType":"Return","src":"1942:14:3"}]},"documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"1790:84:3","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":475,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1888:6:3","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"1894:2:3"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":475,"src":"1926:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":469,"name":"bool","nodeType":"ElementaryTypeName","src":"1926:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1925:6:3"},"scope":536,"src":"1879:84:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":486,"nodeType":"Block","src":"2082:55:3","statements":[{"expression":{"arguments":[{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2100:9:3","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":480,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"2101:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2101:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2111:18:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":479,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2092:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"2092:38:3"}]},"documentation":{"id":476,"nodeType":"StructuredDocumentation","src":"1969:57:3","text":" @dev Throws if the contract is paused."},"id":487,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2040:17:3","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[],"src":"2057:2:3"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"2082:0:3"},"scope":536,"src":"2031:106:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":497,"nodeType":"Block","src":"2257:58:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":492,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"2275:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2275:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2285:22:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":491,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2267:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2267:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":496,"nodeType":"ExpressionStatement","src":"2267:41:3"}]},"documentation":{"id":488,"nodeType":"StructuredDocumentation","src":"2143:61:3","text":" @dev Throws if the contract is not paused."},"id":498,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2218:14:3","nodeType":"FunctionDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[],"src":"2232:2:3"},"returnParameters":{"id":490,"nodeType":"ParameterList","parameters":[],"src":"2257:0:3"},"scope":536,"src":"2209:106:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":513,"nodeType":"Block","src":"2499:66:3","statements":[{"expression":{"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":504,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"2509:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2519:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2509:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":507,"nodeType":"ExpressionStatement","src":"2509:14:3"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":509,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"2545:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":508,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"2538:6:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2538:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":512,"nodeType":"EmitStatement","src":"2533:25:3"}]},"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"2321:124:3","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":514,"implemented":true,"kind":"function","modifiers":[{"id":502,"kind":"modifierInvocation","modifierName":{"id":501,"name":"whenNotPaused","nameLocations":["2485:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":458,"src":"2485:13:3"},"nodeType":"ModifierInvocation","src":"2485:13:3"}],"name":"_pause","nameLocation":"2459:6:3","nodeType":"FunctionDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[],"src":"2465:2:3"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"2499:0:3"},"scope":536,"src":"2450:115:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":529,"nodeType":"Block","src":"2745:69:3","statements":[{"expression":{"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":520,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"2755:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2765:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2755:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":523,"nodeType":"ExpressionStatement","src":"2755:15:3"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":525,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"2794:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":524,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"2785:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2785:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":528,"nodeType":"EmitStatement","src":"2780:27:3"}]},"documentation":{"id":515,"nodeType":"StructuredDocumentation","src":"2571:121:3","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":530,"implemented":true,"kind":"function","modifiers":[{"id":518,"kind":"modifierInvocation","modifierName":{"id":517,"name":"whenPaused","nameLocations":["2734:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":466,"src":"2734:10:3"},"nodeType":"ModifierInvocation","src":"2734:10:3"}],"name":"_unpause","nameLocation":"2706:8:3","nodeType":"FunctionDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[],"src":"2714:2:3"},"returnParameters":{"id":519,"nodeType":"ParameterList","parameters":[],"src":"2745:0:3"},"scope":536,"src":"2697:117:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":531,"nodeType":"StructuredDocumentation","src":"2820:254:3","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":535,"mutability":"mutable","name":"__gap","nameLocation":"3099:5:3","nodeType":"VariableDeclaration","scope":536,"src":"3079:25:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"3079:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":534,"length":{"hexValue":"3439","id":533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3087:2:3","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3079:11:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":537,"src":"677:2430:3","usedErrors":[]}],"src":"105:3003:3"},"id":3},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[866]},"id":867,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":538,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"126:67:4","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":866,"linearizedBaseContracts":[866],"name":"AddressUpgradeable","nameLocation":"202:18:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":553,"nodeType":"Block","src":"1489:254:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":547,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"1713:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:4","memberName":"code","nodeType":"MemberAccess","src":"1713:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:4","memberName":"length","nodeType":"MemberAccess","src":"1713:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":546,"id":552,"nodeType":"Return","src":"1706:30:4"}]},"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"227:1191:4","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":554,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:4","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"account","nameLocation":"1451:7:4","nodeType":"VariableDeclaration","scope":554,"src":"1443:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:4"},"returnParameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":554,"src":"1483:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":544,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:4"},"scope":866,"src":"1423:320:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":587,"nodeType":"Block","src":"2729:241:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":565,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$866","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$866","typeString":"library AddressUpgradeable"}],"id":564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:4","typeDescriptions":{}}},"id":566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:4","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":568,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"2772:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":562,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":572,"nodeType":"ExpressionStatement","src":"2739:73:4"},{"assignments":[574,null],"declarations":[{"constant":false,"id":574,"mutability":"mutable","name":"success","nameLocation":"2829:7:4","nodeType":"VariableDeclaration","scope":587,"src":"2824:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":573,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":581,"initialValue":{"arguments":[{"hexValue":"","id":579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":575,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"2842:9:4","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:4","memberName":"call","nodeType":"MemberAccess","src":"2842:14:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":577,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"2864:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:4"},{"expression":{"arguments":[{"id":583,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"2893:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":582,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":586,"nodeType":"ExpressionStatement","src":"2885:78:4"}]},"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"1749:904:4","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:4","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:4","nodeType":"VariableDeclaration","scope":588,"src":"2677:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:4","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"amount","nameLocation":"2712:6:4","nodeType":"VariableDeclaration","scope":588,"src":"2704:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:4"},"returnParameters":{"id":561,"nodeType":"ParameterList","parameters":[],"src":"2729:0:4"},"scope":866,"src":"2658:312:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":605,"nodeType":"Block","src":"3801:96:4","statements":[{"expression":{"arguments":[{"id":599,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"3840:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":600,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"3848:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":598,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[646,690],"referencedDeclaration":690,"src":"3818:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":597,"id":604,"nodeType":"Return","src":"3811:79:4"}]},"documentation":{"id":589,"nodeType":"StructuredDocumentation","src":"2976:731:4","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":606,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:4","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"target","nameLocation":"3742:6:4","nodeType":"VariableDeclaration","scope":606,"src":"3734:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"data","nameLocation":"3763:4:4","nodeType":"VariableDeclaration","scope":606,"src":"3750:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":592,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:4"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":606,"src":"3787:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":595,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:4"},"scope":866,"src":"3712:185:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":625,"nodeType":"Block","src":"4266:76:4","statements":[{"expression":{"arguments":[{"id":619,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"4305:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":620,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"4313:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":622,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"4322:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":618,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[646,690],"referencedDeclaration":690,"src":"4283:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":617,"id":624,"nodeType":"Return","src":"4276:59:4"}]},"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"3903:211:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":626,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:4","nodeType":"FunctionDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"target","nameLocation":"4158:6:4","nodeType":"VariableDeclaration","scope":626,"src":"4150:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"data","nameLocation":"4187:4:4","nodeType":"VariableDeclaration","scope":626,"src":"4174:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":610,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:4","nodeType":"VariableDeclaration","scope":626,"src":"4201:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":612,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:4"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":626,"src":"4252:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":615,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:4"},"scope":866,"src":"4119:223:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"4817:111:4","statements":[{"expression":{"arguments":[{"id":639,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"4856:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":640,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"4864:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":641,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4870:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":638,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[646,690],"referencedDeclaration":690,"src":"4834:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":637,"id":644,"nodeType":"Return","src":"4827:94:4"}]},"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"4348:351:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":646,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:4","nodeType":"FunctionDefinition","parameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"target","nameLocation":"4743:6:4","nodeType":"VariableDeclaration","scope":646,"src":"4735:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"data","nameLocation":"4764:4:4","nodeType":"VariableDeclaration","scope":646,"src":"4751:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":630,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":633,"mutability":"mutable","name":"value","nameLocation":"4778:5:4","nodeType":"VariableDeclaration","scope":646,"src":"4770:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:4"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"4803:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":635,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:4"},"scope":866,"src":"4704:224:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":689,"nodeType":"Block","src":"5355:267:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":663,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$866","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$866","typeString":"library AddressUpgradeable"}],"id":662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:4","typeDescriptions":{}}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:4","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"5398:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":660,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":670,"nodeType":"ExpressionStatement","src":"5365:81:4"},{"assignments":[672,674],"declarations":[{"constant":false,"id":672,"mutability":"mutable","name":"success","nameLocation":"5462:7:4","nodeType":"VariableDeclaration","scope":689,"src":"5457:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":671,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":674,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:4","nodeType":"VariableDeclaration","scope":689,"src":"5471:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":673,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":681,"initialValue":{"arguments":[{"id":679,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"5524:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":675,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"5498:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:4","memberName":"call","nodeType":"MemberAccess","src":"5498:11:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"5517:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:4"},{"expression":{"arguments":[{"id":683,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"5573:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":684,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"5581:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":685,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"5590:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":686,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"5602:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":682,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"5546:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":659,"id":688,"nodeType":"Return","src":"5539:76:4"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"4934:237:4","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":690,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:4","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"target","nameLocation":"5224:6:4","nodeType":"VariableDeclaration","scope":690,"src":"5216:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":648,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"data","nameLocation":"5253:4:4","nodeType":"VariableDeclaration","scope":690,"src":"5240:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":650,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"value","nameLocation":"5275:5:4","nodeType":"VariableDeclaration","scope":690,"src":"5267:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:4","nodeType":"VariableDeclaration","scope":690,"src":"5290:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":654,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:4"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":690,"src":"5341:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":657,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:4"},"scope":866,"src":"5176:446:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":706,"nodeType":"Block","src":"5899:97:4","statements":[{"expression":{"arguments":[{"id":701,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"5935:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":702,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"5943:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":700,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[707,736],"referencedDeclaration":736,"src":"5916:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":699,"id":705,"nodeType":"Return","src":"5909:80:4"}]},"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"5628:166:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":707,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:4","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"target","nameLocation":"5835:6:4","nodeType":"VariableDeclaration","scope":707,"src":"5827:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"data","nameLocation":"5856:4:4","nodeType":"VariableDeclaration","scope":707,"src":"5843:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":694,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:4"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":707,"src":"5885:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":697,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:4"},"scope":866,"src":"5799:197:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":735,"nodeType":"Block","src":"6338:168:4","statements":[{"assignments":[720,722],"declarations":[{"constant":false,"id":720,"mutability":"mutable","name":"success","nameLocation":"6354:7:4","nodeType":"VariableDeclaration","scope":735,"src":"6349:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":719,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:4","nodeType":"VariableDeclaration","scope":735,"src":"6363:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":721,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":727,"initialValue":{"arguments":[{"id":725,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"6408:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":723,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"6390:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:4","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:4","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:4"},{"expression":{"arguments":[{"id":729,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"6457:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":730,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"6465:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":731,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"6474:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":732,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"6486:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":728,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"6430:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":718,"id":734,"nodeType":"Return","src":"6423:76:4"}]},"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"6002:173:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":736,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:4","nodeType":"FunctionDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"target","nameLocation":"6225:6:4","nodeType":"VariableDeclaration","scope":736,"src":"6217:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":709,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":712,"mutability":"mutable","name":"data","nameLocation":"6254:4:4","nodeType":"VariableDeclaration","scope":736,"src":"6241:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":711,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:4","nodeType":"VariableDeclaration","scope":736,"src":"6268:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":713,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:4"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":736,"src":"6324:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":716,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:4"},"scope":866,"src":"6180:326:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":752,"nodeType":"Block","src":"6782:101:4","statements":[{"expression":{"arguments":[{"id":747,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"6820:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":748,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"6828:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":746,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[753,782],"referencedDeclaration":782,"src":"6799:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":745,"id":751,"nodeType":"Return","src":"6792:84:4"}]},"documentation":{"id":737,"nodeType":"StructuredDocumentation","src":"6512:168:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":753,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:4","nodeType":"FunctionDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"target","nameLocation":"6723:6:4","nodeType":"VariableDeclaration","scope":753,"src":"6715:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"data","nameLocation":"6744:4:4","nodeType":"VariableDeclaration","scope":753,"src":"6731:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":740,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:4"},"returnParameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":753,"src":"6768:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":743,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:4"},"scope":866,"src":"6685:198:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":781,"nodeType":"Block","src":"7224:170:4","statements":[{"assignments":[766,768],"declarations":[{"constant":false,"id":766,"mutability":"mutable","name":"success","nameLocation":"7240:7:4","nodeType":"VariableDeclaration","scope":781,"src":"7235:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":765,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:4","nodeType":"VariableDeclaration","scope":781,"src":"7249:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":767,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":773,"initialValue":{"arguments":[{"id":771,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"7296:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":769,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"7276:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:4","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:4","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:4"},{"expression":{"arguments":[{"id":775,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"7345:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":776,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"7353:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":777,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"7362:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":778,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"7374:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":774,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"7318:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":764,"id":780,"nodeType":"Return","src":"7311:76:4"}]},"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"6889:175:4","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":782,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:4","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":756,"mutability":"mutable","name":"target","nameLocation":"7116:6:4","nodeType":"VariableDeclaration","scope":782,"src":"7108:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":758,"mutability":"mutable","name":"data","nameLocation":"7145:4:4","nodeType":"VariableDeclaration","scope":782,"src":"7132:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":757,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:4","nodeType":"VariableDeclaration","scope":782,"src":"7159:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":759,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:4"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":782,"src":"7210:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":762,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:4"},"scope":866,"src":"7069:325:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":820,"nodeType":"Block","src":"7876:434:4","statements":[{"condition":{"id":796,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"7890:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":818,"nodeType":"Block","src":"8246:58:4","statements":[{"expression":{"arguments":[{"id":814,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"8268:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":815,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"8280:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":813,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8260:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":817,"nodeType":"ExpressionStatement","src":"8260:33:4"}]},"id":819,"nodeType":"IfStatement","src":"7886:418:4","trueBody":{"id":812,"nodeType":"Block","src":"7899:341:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":797,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"7917:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:4","memberName":"length","nodeType":"MemberAccess","src":"7917:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":809,"nodeType":"IfStatement","src":"7913:286:4","trueBody":{"id":808,"nodeType":"Block","src":"7941:258:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":803,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"8143:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":802,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"8132:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":801,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":807,"nodeType":"ExpressionStatement","src":"8124:60:4"}]}},{"expression":{"id":810,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"8219:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":795,"id":811,"nodeType":"Return","src":"8212:17:4"}]}}]},"documentation":{"id":783,"nodeType":"StructuredDocumentation","src":"7400:277:4","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":821,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:4","nodeType":"FunctionDefinition","parameters":{"id":792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"target","nameLocation":"7735:6:4","nodeType":"VariableDeclaration","scope":821,"src":"7727:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"success","nameLocation":"7756:7:4","nodeType":"VariableDeclaration","scope":821,"src":"7751:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":786,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":789,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:4","nodeType":"VariableDeclaration","scope":821,"src":"7773:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":788,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":791,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:4","nodeType":"VariableDeclaration","scope":821,"src":"7806:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":790,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:4"},"returnParameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":821,"src":"7862:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":793,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:4"},"scope":866,"src":"7682:628:4","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":844,"nodeType":"Block","src":"8691:135:4","statements":[{"condition":{"id":833,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"8705:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":842,"nodeType":"Block","src":"8762:58:4","statements":[{"expression":{"arguments":[{"id":838,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"8784:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":839,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"8796:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":837,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8776:7:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":841,"nodeType":"ExpressionStatement","src":"8776:33:4"}]},"id":843,"nodeType":"IfStatement","src":"8701:119:4","trueBody":{"id":836,"nodeType":"Block","src":"8714:42:4","statements":[{"expression":{"id":834,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"8735:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":832,"id":835,"nodeType":"Return","src":"8728:17:4"}]}}]},"documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"8316:210:4","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":845,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:4","nodeType":"FunctionDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"success","nameLocation":"8571:7:4","nodeType":"VariableDeclaration","scope":845,"src":"8566:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":823,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":826,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:4","nodeType":"VariableDeclaration","scope":845,"src":"8588:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":825,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:4","nodeType":"VariableDeclaration","scope":845,"src":"8621:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":827,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:4"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":845,"src":"8677:12:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":830,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:4"},"scope":866,"src":"8531:295:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":864,"nodeType":"Block","src":"8915:457:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":852,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"8991:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:4","memberName":"length","nodeType":"MemberAccess","src":"8991:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":862,"nodeType":"Block","src":"9321:45:4","statements":[{"expression":{"arguments":[{"id":859,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"9342:12:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":858,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:4","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"9335:20:4"}]},"id":863,"nodeType":"IfStatement","src":"8987:379:4","trueBody":{"id":857,"nodeType":"Block","src":"9014:301:4","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:4","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:4","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:4"},"nodeType":"YulFunctionCall","src":"9213:17:4"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:4","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:4"},"nodeType":"YulFunctionCall","src":"9254:19:4"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:4"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:4"},"nodeType":"YulFunctionCall","src":"9247:44:4"},"nodeType":"YulExpressionStatement","src":"9247:44:4"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":847,"isOffset":false,"isSlot":false,"src":"9219:10:4","valueSize":1},{"declaration":847,"isOffset":false,"isSlot":false,"src":"9262:10:4","valueSize":1}],"id":856,"nodeType":"InlineAssembly","src":"9163:142:4"}]}}]},"id":865,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:4","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:4","nodeType":"VariableDeclaration","scope":865,"src":"8849:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":846,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":849,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:4","nodeType":"VariableDeclaration","scope":865,"src":"8874:26:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":848,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:4"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[],"src":"8915:0:4"},"scope":866,"src":"8832:540:4","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":867,"src":"194:9180:4","usedErrors":[]}],"src":"101:9274:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[917],"Initializable":[408]},"id":918,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":868,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":870,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":918,"sourceUnit":409,"src":"125:63:5","symbolAliases":[{"foreign":{"id":869,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"133:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":872,"name":"Initializable","nameLocations":["727:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":408,"src":"727:13:5"},"id":873,"nodeType":"InheritanceSpecifier","src":"727:13:5"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"190:496:5","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":917,"linearizedBaseContracts":[917,408],"name":"ContextUpgradeable","nameLocation":"705:18:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":878,"nodeType":"Block","src":"799:7:5","statements":[]},"id":879,"implemented":true,"kind":"function","modifiers":[{"id":876,"kind":"modifierInvocation","modifierName":{"id":875,"name":"onlyInitializing","nameLocations":["782:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"782:16:5"},"nodeType":"ModifierInvocation","src":"782:16:5"}],"name":"__Context_init","nameLocation":"756:14:5","nodeType":"FunctionDefinition","parameters":{"id":874,"nodeType":"ParameterList","parameters":[],"src":"770:2:5"},"returnParameters":{"id":877,"nodeType":"ParameterList","parameters":[],"src":"799:0:5"},"scope":917,"src":"747:59:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":884,"nodeType":"Block","src":"874:7:5","statements":[]},"id":885,"implemented":true,"kind":"function","modifiers":[{"id":882,"kind":"modifierInvocation","modifierName":{"id":881,"name":"onlyInitializing","nameLocations":["857:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"857:16:5"},"nodeType":"ModifierInvocation","src":"857:16:5"}],"name":"__Context_init_unchained","nameLocation":"821:24:5","nodeType":"FunctionDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[],"src":"845:2:5"},"returnParameters":{"id":883,"nodeType":"ParameterList","parameters":[],"src":"874:0:5"},"scope":917,"src":"812:69:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":893,"nodeType":"Block","src":"948:34:5","statements":[{"expression":{"expression":{"id":890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"965:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"969:6:5","memberName":"sender","nodeType":"MemberAccess","src":"965:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":889,"id":892,"nodeType":"Return","src":"958:17:5"}]},"id":894,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"895:10:5","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"905:2:5"},"returnParameters":{"id":889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":894,"src":"939:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"939:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"938:9:5"},"scope":917,"src":"886:96:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":902,"nodeType":"Block","src":"1055:32:5","statements":[{"expression":{"expression":{"id":899,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1072:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1076:4:5","memberName":"data","nodeType":"MemberAccess","src":"1072:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":898,"id":901,"nodeType":"Return","src":"1065:15:5"}]},"id":903,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"997:8:5","nodeType":"FunctionDefinition","parameters":{"id":895,"nodeType":"ParameterList","parameters":[],"src":"1005:2:5"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":903,"src":"1039:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":896,"name":"bytes","nodeType":"ElementaryTypeName","src":"1039:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1038:16:5"},"scope":917,"src":"988:99:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":910,"nodeType":"Block","src":"1165:25:5","statements":[{"expression":{"hexValue":"30","id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":907,"id":909,"nodeType":"Return","src":"1175:8:5"}]},"id":911,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1102:20:5","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[],"src":"1122:2:5"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":911,"src":"1156:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1155:9:5"},"scope":917,"src":"1093:97:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":912,"nodeType":"StructuredDocumentation","src":"1196:254:5","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":916,"mutability":"mutable","name":"__gap","nameLocation":"1475:5:5","nodeType":"VariableDeclaration","scope":917,"src":"1455:25:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"1455:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":915,"length":{"hexValue":"3530","id":914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1463:2:5","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1455:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":918,"src":"687:796:5","usedErrors":[]}],"src":"101:1383:5"},"id":5},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[995]},"id":996,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":919,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"131:70:6","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":995,"linearizedBaseContracts":[995],"name":"IERC20","nameLocation":"212:6:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"225:158:6","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":929,"name":"Transfer","nameLocation":"394:8:6","nodeType":"EventDefinition","parameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:6","nodeType":"VariableDeclaration","scope":929,"src":"403:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":925,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:6","nodeType":"VariableDeclaration","scope":929,"src":"425:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":924,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":927,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:6","nodeType":"VariableDeclaration","scope":929,"src":"445:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":926,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:6"},"src":"388:72:6"},{"anonymous":false,"documentation":{"id":930,"nodeType":"StructuredDocumentation","src":"466:148:6","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":938,"name":"Approval","nameLocation":"625:8:6","nodeType":"EventDefinition","parameters":{"id":937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:6","nodeType":"VariableDeclaration","scope":938,"src":"634:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":934,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:6","nodeType":"VariableDeclaration","scope":938,"src":"657:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":933,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":936,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:6","nodeType":"VariableDeclaration","scope":938,"src":"682:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:6"},"src":"619:78:6"},{"documentation":{"id":939,"nodeType":"StructuredDocumentation","src":"703:66:6","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":944,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:6","nodeType":"FunctionDefinition","parameters":{"id":940,"nodeType":"ParameterList","parameters":[],"src":"794:2:6"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":944,"src":"820:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":941,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:6"},"scope":995,"src":"774:55:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"835:72:6","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":952,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:6","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"account","nameLocation":"939:7:6","nodeType":"VariableDeclaration","scope":952,"src":"931:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:6"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":952,"src":"971:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":949,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:6"},"scope":995,"src":"912:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":953,"nodeType":"StructuredDocumentation","src":"986:202:6","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":962,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:6","nodeType":"FunctionDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":955,"mutability":"mutable","name":"to","nameLocation":"1219:2:6","nodeType":"VariableDeclaration","scope":962,"src":"1211:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":954,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":957,"mutability":"mutable","name":"amount","nameLocation":"1231:6:6","nodeType":"VariableDeclaration","scope":962,"src":"1223:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":956,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:6"},"returnParameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":962,"src":"1257:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":959,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:6"},"scope":995,"src":"1193:70:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"1269:264:6","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":972,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:6","nodeType":"FunctionDefinition","parameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"owner","nameLocation":"1565:5:6","nodeType":"VariableDeclaration","scope":972,"src":"1557:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":964,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":967,"mutability":"mutable","name":"spender","nameLocation":"1580:7:6","nodeType":"VariableDeclaration","scope":972,"src":"1572:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:6"},"returnParameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":972,"src":"1612:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:6"},"scope":995,"src":"1538:83:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":973,"nodeType":"StructuredDocumentation","src":"1627:642:6","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":982,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:6","nodeType":"FunctionDefinition","parameters":{"id":978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"spender","nameLocation":"2299:7:6","nodeType":"VariableDeclaration","scope":982,"src":"2291:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":977,"mutability":"mutable","name":"amount","nameLocation":"2316:6:6","nodeType":"VariableDeclaration","scope":982,"src":"2308:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:6"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":982,"src":"2342:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":979,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:6"},"scope":995,"src":"2274:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":983,"nodeType":"StructuredDocumentation","src":"2354:287:6","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":994,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:6","nodeType":"FunctionDefinition","parameters":{"id":990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"mutability":"mutable","name":"from","nameLocation":"2676:4:6","nodeType":"VariableDeclaration","scope":994,"src":"2668:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":984,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":987,"mutability":"mutable","name":"to","nameLocation":"2690:2:6","nodeType":"VariableDeclaration","scope":994,"src":"2682:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":986,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":989,"mutability":"mutable","name":"amount","nameLocation":"2702:6:6","nodeType":"VariableDeclaration","scope":994,"src":"2694:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:6"},"returnParameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":994,"src":"2728:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":991,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:6"},"scope":995,"src":"2646:88:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":996,"src":"202:2534:6","usedErrors":[]}],"src":"106:2631:6"},"id":6},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2456],"SignedMath":[2561],"Strings":[1224]},"id":1225,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":997,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":998,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1225,"sourceUnit":2457,"src":"126:25:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":999,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1225,"sourceUnit":2562,"src":"152:31:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1000,"nodeType":"StructuredDocumentation","src":"185:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1224,"linearizedBaseContracts":[1224],"name":"Strings","nameLocation":"228:7:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1003,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:7","nodeType":"VariableDeclaration","scope":1224,"src":"242:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1001,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1006,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:7","nodeType":"VariableDeclaration","scope":1224,"src":"302:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1004,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1053,"nodeType":"Block","src":"518:625:7","statements":[{"id":1052,"nodeType":"UncheckedBlock","src":"528:609:7","statements":[{"assignments":[1015],"declarations":[{"constant":false,"id":1015,"mutability":"mutable","name":"length","nameLocation":"560:6:7","nodeType":"VariableDeclaration","scope":1052,"src":"552:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1022,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"580:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1016,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"569:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2456_$","typeString":"type(library Math)"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:7","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2293,"src":"569:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:7"},{"assignments":[1024],"declarations":[{"constant":false,"id":1024,"mutability":"mutable","name":"buffer","nameLocation":"618:6:7","nodeType":"VariableDeclaration","scope":1052,"src":"604:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1023,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1029,"initialValue":{"arguments":[{"id":1027,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"638:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1025,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:7"},{"assignments":[1031],"declarations":[{"constant":false,"id":1031,"mutability":"mutable","name":"ptr","nameLocation":"667:3:7","nodeType":"VariableDeclaration","scope":1052,"src":"659:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1030,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1032,"nodeType":"VariableDeclarationStatement","src":"659:11:7"},{"AST":{"nodeType":"YulBlock","src":"740:67:7","statements":[{"nodeType":"YulAssignment","src":"758:35:7","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:7","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:7"},"nodeType":"YulFunctionCall","src":"777:15:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:7"},"nodeType":"YulFunctionCall","src":"765:28:7"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1024,"isOffset":false,"isSlot":false,"src":"769:6:7","valueSize":1},{"declaration":1015,"isOffset":false,"isSlot":false,"src":"785:6:7","valueSize":1},{"declaration":1031,"isOffset":false,"isSlot":false,"src":"758:3:7","valueSize":1}],"id":1033,"nodeType":"InlineAssembly","src":"731:76:7"},{"body":{"id":1048,"nodeType":"Block","src":"833:267:7","statements":[{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:7","subExpression":{"id":1035,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"851:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1037,"nodeType":"ExpressionStatement","src":"851:5:7"},{"AST":{"nodeType":"YulBlock","src":"934:84:7","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:7"},"nodeType":"YulFunctionCall","src":"974:14:7"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:7"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:7"},"nodeType":"YulFunctionCall","src":"969:30:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:7"},"nodeType":"YulFunctionCall","src":"956:44:7"},"nodeType":"YulExpressionStatement","src":"956:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1003,"isOffset":false,"isSlot":false,"src":"990:8:7","valueSize":1},{"declaration":1031,"isOffset":false,"isSlot":false,"src":"964:3:7","valueSize":1},{"declaration":1009,"isOffset":false,"isSlot":false,"src":"978:5:7","valueSize":1}],"id":1038,"nodeType":"InlineAssembly","src":"925:93:7"},{"expression":{"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1039,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"1035:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1042,"nodeType":"ExpressionStatement","src":"1035:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"1068:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1047,"nodeType":"IfStatement","src":"1064:21:7","trueBody":{"id":1046,"nodeType":"Break","src":"1080:5:7"}}]},"condition":{"hexValue":"74727565","id":1034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1049,"nodeType":"WhileStatement","src":"820:280:7"},{"expression":{"id":1050,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"1120:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1013,"id":1051,"nodeType":"Return","src":"1113:13:7"}]}]},"documentation":{"id":1007,"nodeType":"StructuredDocumentation","src":"352:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1054,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:7","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"value","nameLocation":"473:5:7","nodeType":"VariableDeclaration","scope":1054,"src":"465:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:7"},"returnParameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1054,"src":"503:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1011,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:7"},"scope":1224,"src":"447:696:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1081,"nodeType":"Block","src":"1313:103:7","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"1354:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:7","trueExpression":{"hexValue":"2d","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"1400:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1073,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"1385:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2561_$","typeString":"type(library SignedMath)"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:7","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2560,"src":"1385:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1072,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1054,1082],"referencedDeclaration":1054,"src":"1376:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1064,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1062,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:7","typeDescriptions":{}}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1061,"id":1080,"nodeType":"Return","src":"1323:86:7"}]},"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"1149:89:7","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1082,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:7","nodeType":"FunctionDefinition","parameters":{"id":1058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"mutability":"mutable","name":"value","nameLocation":"1268:5:7","nodeType":"VariableDeclaration","scope":1082,"src":"1261:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1056,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:7"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1082,"src":"1298:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1059,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:7"},"scope":1224,"src":"1243:173:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1101,"nodeType":"Block","src":"1595:100:7","statements":[{"id":1100,"nodeType":"UncheckedBlock","src":"1605:84:7","statements":[{"expression":{"arguments":[{"id":1091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"1648:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"1667:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1092,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"1655:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2456_$","typeString":"type(library Math)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:7","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2416,"src":"1655:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1090,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1102,1178,1198],"referencedDeclaration":1178,"src":"1636:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1089,"id":1099,"nodeType":"Return","src":"1629:49:7"}]}]},"documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"1422:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1102,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:7","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"value","nameLocation":"1550:5:7","nodeType":"VariableDeclaration","scope":1102,"src":"1542:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:7"},"returnParameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1102,"src":"1580:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1087,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:7"},"scope":1224,"src":"1521:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1177,"nodeType":"Block","src":"1908:347:7","statements":[{"assignments":[1113],"declarations":[{"constant":false,"id":1113,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:7","nodeType":"VariableDeclaration","scope":1177,"src":"1918:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1112,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1122,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1117,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"1954:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1114,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:7"},{"expression":{"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1123,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"1975:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1125,"indexExpression":{"hexValue":"30","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1128,"nodeType":"ExpressionStatement","src":"1975:15:7"},{"expression":{"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1129,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2000:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1131,"indexExpression":{"hexValue":"31","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1134,"nodeType":"ExpressionStatement","src":"2000:15:7"},{"body":{"id":1163,"nodeType":"Block","src":"2070:83:7","statements":[{"expression":{"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1149,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2084:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1151,"indexExpression":{"id":1150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"2091:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1152,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"2096:8:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1156,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1153,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"2105:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1158,"nodeType":"ExpressionStatement","src":"2084:33:7"},{"expression":{"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"2131:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1162,"nodeType":"ExpressionStatement","src":"2131:11:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1143,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"2058:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1164,"initializationExpression":{"assignments":[1136],"declarations":[{"constant":false,"id":1136,"mutability":"mutable","name":"i","nameLocation":"2038:1:7","nodeType":"VariableDeclaration","scope":1164,"src":"2030:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1142,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1138,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1107,"src":"2046:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:7"},"loopExpression":{"expression":{"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:7","subExpression":{"id":1146,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"2067:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1148,"nodeType":"ExpressionStatement","src":"2065:3:7"},"nodeType":"ForStatement","src":"2025:128:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"2170:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1171,"nodeType":"ExpressionStatement","src":"2162:55:7"},{"expression":{"arguments":[{"id":1174,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2241:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1172,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:7","typeDescriptions":{}}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1111,"id":1176,"nodeType":"Return","src":"2227:21:7"}]},"documentation":{"id":1103,"nodeType":"StructuredDocumentation","src":"1701:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1178,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:7","nodeType":"FunctionDefinition","parameters":{"id":1108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"value","nameLocation":"1847:5:7","nodeType":"VariableDeclaration","scope":1178,"src":"1839:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1107,"mutability":"mutable","name":"length","nameLocation":"1862:6:7","nodeType":"VariableDeclaration","scope":1178,"src":"1854:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1106,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:7"},"returnParameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1178,"src":"1893:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1109,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:7"},"scope":1224,"src":"1818:437:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1197,"nodeType":"Block","src":"2480:76:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1191,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"2525:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1189,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:7","typeDescriptions":{}}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:7","typeDescriptions":{}}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1194,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"2533:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1186,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1102,1178,1198],"referencedDeclaration":1178,"src":"2497:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1185,"id":1196,"nodeType":"Return","src":"2490:59:7"}]},"documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"2261:141:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1198,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:7","nodeType":"FunctionDefinition","parameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"addr","nameLocation":"2436:4:7","nodeType":"VariableDeclaration","scope":1198,"src":"2428:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1180,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:7"},"returnParameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1198,"src":"2465:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1183,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:7"},"scope":1224,"src":"2407:149:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1222,"nodeType":"Block","src":"2711:66:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1211,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"2744:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1209,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:7","typeDescriptions":{}}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1208,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1217,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"2767:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1215,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:7","typeDescriptions":{}}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1214,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1207,"id":1221,"nodeType":"Return","src":"2721:49:7"}]},"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"2562:66:7","text":" @dev Returns true if the two strings are equal."},"id":1223,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:7","nodeType":"FunctionDefinition","parameters":{"id":1204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"a","nameLocation":"2662:1:7","nodeType":"VariableDeclaration","scope":1223,"src":"2648:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1200,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1203,"mutability":"mutable","name":"b","nameLocation":"2679:1:7","nodeType":"VariableDeclaration","scope":1223,"src":"2665:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1202,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:7"},"returnParameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1223,"src":"2705:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1205,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:7"},"scope":1224,"src":"2633:144:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1225,"src":"220:2559:7","usedErrors":[]}],"src":"101:2679:7"},"id":7},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[1590],"Math":[2456],"SignedMath":[2561],"Strings":[1224]},"id":1591,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1226,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1227,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1591,"sourceUnit":1225,"src":"137:24:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"163:205:8","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1590,"linearizedBaseContracts":[1590],"name":"ECDSA","nameLocation":"377:5:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1234,"members":[{"id":1229,"name":"NoError","nameLocation":"417:7:8","nodeType":"EnumValue","src":"417:7:8"},{"id":1230,"name":"InvalidSignature","nameLocation":"434:16:8","nodeType":"EnumValue","src":"434:16:8"},{"id":1231,"name":"InvalidSignatureLength","nameLocation":"460:22:8","nodeType":"EnumValue","src":"460:22:8"},{"id":1232,"name":"InvalidSignatureS","nameLocation":"492:17:8","nodeType":"EnumValue","src":"492:17:8"},{"id":1233,"name":"InvalidSignatureV","nameLocation":"519:17:8","nodeType":"EnumValue","src":"519:17:8"}],"name":"RecoverError","nameLocation":"394:12:8","nodeType":"EnumDefinition","src":"389:175:8"},{"body":{"id":1277,"nodeType":"Block","src":"624:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1240,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"638:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1241,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"647:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:8","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"647:20:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1246,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"734:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1247,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"743:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:8","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"743:29:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1255,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"843:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1256,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"852:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:8","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1231,"src":"852:35:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1264,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"965:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1265,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"974:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:8","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1232,"src":"974:30:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1273,"nodeType":"IfStatement","src":"961:114:8","trueBody":{"id":1272,"nodeType":"Block","src":"1006:69:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1268,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1271,"nodeType":"ExpressionStatement","src":"1020:44:8"}]}},"id":1274,"nodeType":"IfStatement","src":"839:236:8","trueBody":{"id":1263,"nodeType":"Block","src":"889:66:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1259,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1262,"nodeType":"ExpressionStatement","src":"903:41:8"}]}},"id":1275,"nodeType":"IfStatement","src":"730:345:8","trueBody":{"id":1254,"nodeType":"Block","src":"774:59:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1250,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1253,"nodeType":"ExpressionStatement","src":"788:34:8"}]}},"id":1276,"nodeType":"IfStatement","src":"634:441:8","trueBody":{"id":1245,"nodeType":"Block","src":"669:55:8","statements":[{"functionReturnParameters":1239,"id":1244,"nodeType":"Return","src":"683:7:8"}]}}]},"id":1278,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:8","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"error","nameLocation":"604:5:8","nodeType":"VariableDeclaration","scope":1278,"src":"591:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1236,"nodeType":"UserDefinedTypeName","pathNode":{"id":1235,"name":"RecoverError","nameLocations":["591:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"591:12:8"},"referencedDeclaration":1234,"src":"591:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:8"},"returnParameters":{"id":1239,"nodeType":"ParameterList","parameters":[],"src":"624:0:8"},"scope":1590,"src":"570:511:8","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1323,"nodeType":"Block","src":"2249:626:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1291,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"2263:9:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:8","memberName":"length","nodeType":"MemberAccess","src":"2263:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:8","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1321,"nodeType":"Block","src":"2788:81:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:8","typeDescriptions":{}}},"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1317,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"2822:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:8","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1231,"src":"2822:35:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"id":1319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1290,"id":1320,"nodeType":"Return","src":"2802:56:8"}]},"id":1322,"nodeType":"IfStatement","src":"2259:610:8","trueBody":{"id":1312,"nodeType":"Block","src":"2287:495:8","statements":[{"assignments":[1296],"declarations":[{"constant":false,"id":1296,"mutability":"mutable","name":"r","nameLocation":"2309:1:8","nodeType":"VariableDeclaration","scope":1312,"src":"2301:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1297,"nodeType":"VariableDeclarationStatement","src":"2301:9:8"},{"assignments":[1299],"declarations":[{"constant":false,"id":1299,"mutability":"mutable","name":"s","nameLocation":"2332:1:8","nodeType":"VariableDeclaration","scope":1312,"src":"2324:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1300,"nodeType":"VariableDeclarationStatement","src":"2324:9:8"},{"assignments":[1302],"declarations":[{"constant":false,"id":1302,"mutability":"mutable","name":"v","nameLocation":"2353:1:8","nodeType":"VariableDeclaration","scope":1312,"src":"2347:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1301,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1303,"nodeType":"VariableDeclarationStatement","src":"2347:7:8"},{"AST":{"nodeType":"YulBlock","src":"2555:171:8","statements":[{"nodeType":"YulAssignment","src":"2573:32:8","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:8"},"nodeType":"YulFunctionCall","src":"2584:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:8"},"nodeType":"YulFunctionCall","src":"2578:27:8"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:8"}]},{"nodeType":"YulAssignment","src":"2622:32:8","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:8"},"nodeType":"YulFunctionCall","src":"2633:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:8"},"nodeType":"YulFunctionCall","src":"2627:27:8"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:8"}]},{"nodeType":"YulAssignment","src":"2671:41:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:8","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:8","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:8"},"nodeType":"YulFunctionCall","src":"2690:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:8"},"nodeType":"YulFunctionCall","src":"2684:27:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:8"},"nodeType":"YulFunctionCall","src":"2676:36:8"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1296,"isOffset":false,"isSlot":false,"src":"2573:1:8","valueSize":1},{"declaration":1299,"isOffset":false,"isSlot":false,"src":"2622:1:8","valueSize":1},{"declaration":1283,"isOffset":false,"isSlot":false,"src":"2588:9:8","valueSize":1},{"declaration":1283,"isOffset":false,"isSlot":false,"src":"2637:9:8","valueSize":1},{"declaration":1283,"isOffset":false,"isSlot":false,"src":"2694:9:8","valueSize":1},{"declaration":1302,"isOffset":false,"isSlot":false,"src":"2671:1:8","valueSize":1}],"id":1304,"nodeType":"InlineAssembly","src":"2546:180:8"},{"expression":{"arguments":[{"id":1306,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1281,"src":"2757:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1307,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"2763:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1308,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"2766:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1309,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"2769:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1305,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1324,1398,1492],"referencedDeclaration":1492,"src":"2746:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1290,"id":1311,"nodeType":"Return","src":"2739:32:8"}]}}]},"documentation":{"id":1279,"nodeType":"StructuredDocumentation","src":"1087:1053:8","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1324,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:8","nodeType":"FunctionDefinition","parameters":{"id":1284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"hash","nameLocation":"2173:4:8","nodeType":"VariableDeclaration","scope":1324,"src":"2165:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"signature","nameLocation":"2192:9:8","nodeType":"VariableDeclaration","scope":1324,"src":"2179:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1282,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:8"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1324,"src":"2226:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1324,"src":"2235:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1288,"nodeType":"UserDefinedTypeName","pathNode":{"id":1287,"name":"RecoverError","nameLocations":["2235:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"2235:12:8"},"referencedDeclaration":1234,"src":"2235:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:8"},"scope":1590,"src":"2145:730:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1350,"nodeType":"Block","src":"3748:140:8","statements":[{"assignments":[1335,1338],"declarations":[{"constant":false,"id":1335,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:8","nodeType":"VariableDeclaration","scope":1350,"src":"3759:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1338,"mutability":"mutable","name":"error","nameLocation":"3791:5:8","nodeType":"VariableDeclaration","scope":1350,"src":"3778:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1337,"nodeType":"UserDefinedTypeName","pathNode":{"id":1336,"name":"RecoverError","nameLocations":["3778:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"3778:12:8"},"referencedDeclaration":1234,"src":"3778:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1343,"initialValue":{"arguments":[{"id":1340,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"3811:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1341,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"3817:9:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1339,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1324,1398,1492],"referencedDeclaration":1324,"src":"3800:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:8"},{"expression":{"arguments":[{"id":1345,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"3849:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}],"id":1344,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"3837:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1234_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1347,"nodeType":"ExpressionStatement","src":"3837:18:8"},{"expression":{"id":1348,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"3872:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1333,"id":1349,"nodeType":"Return","src":"3865:16:8"}]},"documentation":{"id":1325,"nodeType":"StructuredDocumentation","src":"2881:775:8","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1351,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:8","nodeType":"FunctionDefinition","parameters":{"id":1330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"hash","nameLocation":"3686:4:8","nodeType":"VariableDeclaration","scope":1351,"src":"3678:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1329,"mutability":"mutable","name":"signature","nameLocation":"3705:9:8","nodeType":"VariableDeclaration","scope":1351,"src":"3692:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1328,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:8"},"returnParameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1351,"src":"3739:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:8"},"scope":1590,"src":"3661:227:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1397,"nodeType":"Block","src":"4245:203:8","statements":[{"assignments":[1367],"declarations":[{"constant":false,"id":1367,"mutability":"mutable","name":"s","nameLocation":"4263:1:8","nodeType":"VariableDeclaration","scope":1397,"src":"4255:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1374,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1368,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"4267:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:8","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:8","typeDescriptions":{}}},"id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:8"},{"assignments":[1376],"declarations":[{"constant":false,"id":1376,"mutability":"mutable","name":"v","nameLocation":"4363:1:8","nodeType":"VariableDeclaration","scope":1397,"src":"4357:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1375,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1389,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1381,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"4382:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1379,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:8","typeDescriptions":{}}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1385,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:8","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1377,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:8","typeDescriptions":{}}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:8"},{"expression":{"arguments":[{"id":1391,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"4427:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1392,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"4433:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1393,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"4436:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1394,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"4439:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1390,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1324,1398,1492],"referencedDeclaration":1492,"src":"4416:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1365,"id":1396,"nodeType":"Return","src":"4409:32:8"}]},"documentation":{"id":1352,"nodeType":"StructuredDocumentation","src":"3894:243:8","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1398,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:8","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"hash","nameLocation":"4170:4:8","nodeType":"VariableDeclaration","scope":1398,"src":"4162:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1356,"mutability":"mutable","name":"r","nameLocation":"4184:1:8","nodeType":"VariableDeclaration","scope":1398,"src":"4176:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"vs","nameLocation":"4195:2:8","nodeType":"VariableDeclaration","scope":1398,"src":"4187:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:8"},"returnParameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"4222:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1360,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"4231:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1363,"nodeType":"UserDefinedTypeName","pathNode":{"id":1362,"name":"RecoverError","nameLocations":["4231:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"4231:12:8"},"referencedDeclaration":1234,"src":"4231:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:8"},"scope":1590,"src":"4142:306:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1427,"nodeType":"Block","src":"4699:136:8","statements":[{"assignments":[1411,1414],"declarations":[{"constant":false,"id":1411,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:8","nodeType":"VariableDeclaration","scope":1427,"src":"4710:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1410,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"error","nameLocation":"4742:5:8","nodeType":"VariableDeclaration","scope":1427,"src":"4729:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1413,"nodeType":"UserDefinedTypeName","pathNode":{"id":1412,"name":"RecoverError","nameLocations":["4729:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"4729:12:8"},"referencedDeclaration":1234,"src":"4729:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1420,"initialValue":{"arguments":[{"id":1416,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"4762:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1417,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"4768:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1418,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"4771:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1415,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1324,1398,1492],"referencedDeclaration":1398,"src":"4751:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:8"},{"expression":{"arguments":[{"id":1422,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"4796:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}],"id":1421,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"4784:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1234_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1424,"nodeType":"ExpressionStatement","src":"4784:18:8"},{"expression":{"id":1425,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"4819:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1409,"id":1426,"nodeType":"Return","src":"4812:16:8"}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"4454:154:8","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1428,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:8","nodeType":"FunctionDefinition","parameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"hash","nameLocation":"4638:4:8","nodeType":"VariableDeclaration","scope":1428,"src":"4630:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"r","nameLocation":"4652:1:8","nodeType":"VariableDeclaration","scope":1428,"src":"4644:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"vs","nameLocation":"4663:2:8","nodeType":"VariableDeclaration","scope":1428,"src":"4655:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:8"},"returnParameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1428,"src":"4690:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1407,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:8"},"scope":1590,"src":"4613:222:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1491,"nodeType":"Block","src":"5120:1345:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1447,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"6016:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:8","typeDescriptions":{}}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:8","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1460,"nodeType":"IfStatement","src":"6004:161:8","trueBody":{"id":1459,"nodeType":"Block","src":"6089:76:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1451,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:8","typeDescriptions":{}}},"id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1455,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"6123:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:8","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1232,"src":"6123:30:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"id":1457,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1444,"id":1458,"nodeType":"Return","src":"6103:51:8"}]}},{"assignments":[1462],"declarations":[{"constant":false,"id":1462,"mutability":"mutable","name":"signer","nameLocation":"6267:6:8","nodeType":"VariableDeclaration","scope":1491,"src":"6259:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1469,"initialValue":{"arguments":[{"id":1464,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"6286:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1465,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"6292:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1466,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"6295:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1467,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"6298:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1463,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:8","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1470,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"6314:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1471,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:8","typeDescriptions":{}}},"id":1474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1485,"nodeType":"IfStatement","src":"6310:101:8","trueBody":{"id":1484,"nodeType":"Block","src":"6336:75:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1476,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:8","typeDescriptions":{}}},"id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1480,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"6370:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:8","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"6370:29:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"id":1482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1444,"id":1483,"nodeType":"Return","src":"6350:50:8"}]}},{"expression":{"components":[{"id":1486,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"6429:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1487,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"6437:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1234_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:8","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1229,"src":"6437:20:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"id":1489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1444,"id":1490,"nodeType":"Return","src":"6421:37:8"}]},"documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"4841:163:8","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1492,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:8","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"hash","nameLocation":"5037:4:8","nodeType":"VariableDeclaration","scope":1492,"src":"5029:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1430,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"v","nameLocation":"5049:1:8","nodeType":"VariableDeclaration","scope":1492,"src":"5043:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1432,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"r","nameLocation":"5060:1:8","nodeType":"VariableDeclaration","scope":1492,"src":"5052:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"s","nameLocation":"5071:1:8","nodeType":"VariableDeclaration","scope":1492,"src":"5063:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1436,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:8"},"returnParameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1492,"src":"5097:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1439,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1492,"src":"5106:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1442,"nodeType":"UserDefinedTypeName","pathNode":{"id":1441,"name":"RecoverError","nameLocations":["5106:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"5106:12:8"},"referencedDeclaration":1234,"src":"5106:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:8"},"scope":1590,"src":"5009:1456:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1524,"nodeType":"Block","src":"6692:138:8","statements":[{"assignments":[1507,1510],"declarations":[{"constant":false,"id":1507,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:8","nodeType":"VariableDeclaration","scope":1524,"src":"6703:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"error","nameLocation":"6735:5:8","nodeType":"VariableDeclaration","scope":1524,"src":"6722:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1509,"nodeType":"UserDefinedTypeName","pathNode":{"id":1508,"name":"RecoverError","nameLocations":["6722:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1234,"src":"6722:12:8"},"referencedDeclaration":1234,"src":"6722:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1517,"initialValue":{"arguments":[{"id":1512,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"6755:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1513,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"6761:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1514,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"6764:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1515,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"6767:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1511,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1324,1398,1492],"referencedDeclaration":1492,"src":"6744:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1234_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:8"},{"expression":{"arguments":[{"id":1519,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"6791:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1234","typeString":"enum ECDSA.RecoverError"}],"id":1518,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"6779:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1234_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"ExpressionStatement","src":"6779:18:8"},{"expression":{"id":1522,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1507,"src":"6814:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1505,"id":1523,"nodeType":"Return","src":"6807:16:8"}]},"documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"6471:122:8","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1525,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:8","nodeType":"FunctionDefinition","parameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"hash","nameLocation":"6623:4:8","nodeType":"VariableDeclaration","scope":1525,"src":"6615:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"v","nameLocation":"6635:1:8","nodeType":"VariableDeclaration","scope":1525,"src":"6629:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1496,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1499,"mutability":"mutable","name":"r","nameLocation":"6646:1:8","nodeType":"VariableDeclaration","scope":1525,"src":"6638:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1498,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1501,"mutability":"mutable","name":"s","nameLocation":"6657:1:8","nodeType":"VariableDeclaration","scope":1525,"src":"6649:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1500,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:8"},"returnParameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1525,"src":"6683:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1503,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:8"},"scope":1590,"src":"6598:232:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1534,"nodeType":"Block","src":"7206:310:8","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:8","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:8","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:8"},"nodeType":"YulFunctionCall","src":"7376:48:8"},"nodeType":"YulExpressionStatement","src":"7376:48:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:8","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:8"},"nodeType":"YulFunctionCall","src":"7437:18:8"},"nodeType":"YulExpressionStatement","src":"7437:18:8"},{"nodeType":"YulAssignment","src":"7468:32:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:8","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:8","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:8"},"nodeType":"YulFunctionCall","src":"7479:21:8"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1528,"isOffset":false,"isSlot":false,"src":"7450:4:8","valueSize":1},{"declaration":1531,"isOffset":false,"isSlot":false,"src":"7468:7:8","valueSize":1}],"id":1533,"nodeType":"InlineAssembly","src":"7353:157:8"}]},"documentation":{"id":1526,"nodeType":"StructuredDocumentation","src":"6836:279:8","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1535,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:8","nodeType":"FunctionDefinition","parameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"hash","nameLocation":"7160:4:8","nodeType":"VariableDeclaration","scope":1535,"src":"7152:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:8"},"returnParameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"message","nameLocation":"7197:7:8","nodeType":"VariableDeclaration","scope":1535,"src":"7189:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:8"},"scope":1590,"src":"7120:396:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1556,"nodeType":"Block","src":"7881:116:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1549,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"7976:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:8","memberName":"length","nodeType":"MemberAccess","src":"7976:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1547,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"7959:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1224_$","typeString":"type(library Strings)"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1054,"src":"7959:16:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1552,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"7987:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1544,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1543,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1542,"id":1555,"nodeType":"Return","src":"7891:99:8"}]},"documentation":{"id":1536,"nodeType":"StructuredDocumentation","src":"7522:274:8","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1557,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:8","nodeType":"FunctionDefinition","parameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1538,"mutability":"mutable","name":"s","nameLocation":"7846:1:8","nodeType":"VariableDeclaration","scope":1557,"src":"7833:14:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1537,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:8"},"returnParameters":{"id":1542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1557,"src":"7872:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1540,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:8"},"scope":1590,"src":"7801:196:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1568,"nodeType":"Block","src":"8443:290:8","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:8","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:8"},"nodeType":"YulFunctionCall","src":"8530:11:8"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:8","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:8"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:8","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:8"},"nodeType":"YulFunctionCall","src":"8554:23:8"},"nodeType":"YulExpressionStatement","src":"8554:23:8"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:8","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:8"},"nodeType":"YulFunctionCall","src":"8597:14:8"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:8"},"nodeType":"YulFunctionCall","src":"8590:39:8"},"nodeType":"YulExpressionStatement","src":"8590:39:8"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:8","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:8"},"nodeType":"YulFunctionCall","src":"8649:14:8"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:8"},"nodeType":"YulFunctionCall","src":"8642:34:8"},"nodeType":"YulExpressionStatement","src":"8642:34:8"},{"nodeType":"YulAssignment","src":"8689:28:8","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:8","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:8"},"nodeType":"YulFunctionCall","src":"8697:20:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1565,"isOffset":false,"isSlot":false,"src":"8689:4:8","valueSize":1},{"declaration":1560,"isOffset":false,"isSlot":false,"src":"8613:15:8","valueSize":1},{"declaration":1562,"isOffset":false,"isSlot":false,"src":"8665:10:8","valueSize":1}],"id":1567,"nodeType":"InlineAssembly","src":"8496:231:8"}]},"documentation":{"id":1558,"nodeType":"StructuredDocumentation","src":"8003:328:8","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1569,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:8","nodeType":"FunctionDefinition","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:8","nodeType":"VariableDeclaration","scope":1569,"src":"8361:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:8","nodeType":"VariableDeclaration","scope":1569,"src":"8386:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:8"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"data","nameLocation":"8437:4:8","nodeType":"VariableDeclaration","scope":1569,"src":"8429:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:8"},"scope":1590,"src":"8336:397:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1588,"nodeType":"Block","src":"9048:80:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1583,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"9104:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1584,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"9115:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1580,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1579,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1578,"id":1587,"nodeType":"Return","src":"9058:63:8"}]},"documentation":{"id":1570,"nodeType":"StructuredDocumentation","src":"8739:193:8","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1589,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:8","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1572,"mutability":"mutable","name":"validator","nameLocation":"8986:9:8","nodeType":"VariableDeclaration","scope":1589,"src":"8978:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1571,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1574,"mutability":"mutable","name":"data","nameLocation":"9010:4:8","nodeType":"VariableDeclaration","scope":1589,"src":"8997:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1573,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:8"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1589,"src":"9039:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:8"},"scope":1590,"src":"8937:191:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1591,"src":"369:8761:8","usedErrors":[]}],"src":"112:9019:8"},"id":8},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2456]},"id":2457,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1592,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"128:73:9","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2456,"linearizedBaseContracts":[2456],"name":"Math","nameLocation":"210:4:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1597,"members":[{"id":1594,"name":"Down","nameLocation":"245:4:9","nodeType":"EnumValue","src":"245:4:9"},{"id":1595,"name":"Up","nameLocation":"287:2:9","nodeType":"EnumValue","src":"287:2:9"},{"id":1596,"name":"Zero","nameLocation":"318:4:9","nodeType":"EnumValue","src":"318:4:9"}],"name":"Rounding","nameLocation":"226:8:9","nodeType":"EnumDefinition","src":"221:122:9"},{"body":{"id":1614,"nodeType":"Block","src":"480:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1607,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"497:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1608,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"501:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1611,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"509:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:9","trueExpression":{"id":1610,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"505:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1606,"id":1613,"nodeType":"Return","src":"490:20:9"}]},"documentation":{"id":1598,"nodeType":"StructuredDocumentation","src":"349:59:9","text":" @dev Returns the largest of two numbers."},"id":1615,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:9","nodeType":"FunctionDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1600,"mutability":"mutable","name":"a","nameLocation":"434:1:9","nodeType":"VariableDeclaration","scope":1615,"src":"426:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1599,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"b","nameLocation":"445:1:9","nodeType":"VariableDeclaration","scope":1615,"src":"437:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1601,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:9"},"returnParameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1615,"src":"471:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:9"},"scope":2456,"src":"413:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1632,"nodeType":"Block","src":"655:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"672:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1626,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"676:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1629,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"684:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:9","trueExpression":{"id":1628,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"680:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1624,"id":1631,"nodeType":"Return","src":"665:20:9"}]},"documentation":{"id":1616,"nodeType":"StructuredDocumentation","src":"523:60:9","text":" @dev Returns the smallest of two numbers."},"id":1633,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:9","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"a","nameLocation":"609:1:9","nodeType":"VariableDeclaration","scope":1633,"src":"601:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1617,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"b","nameLocation":"620:1:9","nodeType":"VariableDeclaration","scope":1633,"src":"612:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:9"},"returnParameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1633,"src":"646:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1622,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:9"},"scope":2456,"src":"588:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1655,"nodeType":"Block","src":"876:82:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1643,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"931:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1644,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"935:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1646,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1647,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"941:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1648,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"945:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1642,"id":1654,"nodeType":"Return","src":"923:28:9"}]},"documentation":{"id":1634,"nodeType":"StructuredDocumentation","src":"698:102:9","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1656,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:9","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1636,"mutability":"mutable","name":"a","nameLocation":"830:1:9","nodeType":"VariableDeclaration","scope":1656,"src":"822:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1635,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1638,"mutability":"mutable","name":"b","nameLocation":"841:1:9","nodeType":"VariableDeclaration","scope":1656,"src":"833:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:9"},"returnParameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1656,"src":"867:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:9"},"scope":2456,"src":"805:153:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1680,"nodeType":"Block","src":"1228:123:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1666,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1316:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1670,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"1330:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1673,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1674,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"1339:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:9","trueExpression":{"hexValue":"30","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1665,"id":1679,"nodeType":"Return","src":"1309:35:9"}]},"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"964:188:9","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1681,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:9","nodeType":"FunctionDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"a","nameLocation":"1182:1:9","nodeType":"VariableDeclaration","scope":1681,"src":"1174:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"b","nameLocation":"1193:1:9","nodeType":"VariableDeclaration","scope":1681,"src":"1185:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:9"},"returnParameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1681,"src":"1219:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1663,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:9"},"scope":2456,"src":"1157:194:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1803,"nodeType":"Block","src":"1765:4115:9","statements":[{"id":1802,"nodeType":"UncheckedBlock","src":"1775:4099:9","statements":[{"assignments":[1694],"declarations":[{"constant":false,"id":1694,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:9","nodeType":"VariableDeclaration","scope":1802,"src":"2096:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1693,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1695,"nodeType":"VariableDeclarationStatement","src":"2096:13:9"},{"assignments":[1697],"declarations":[{"constant":false,"id":1697,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:9","nodeType":"VariableDeclaration","scope":1802,"src":"2168:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1698,"nodeType":"VariableDeclarationStatement","src":"2168:13:9"},{"AST":{"nodeType":"YulBlock","src":"2248:157:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:9"},"nodeType":"YulFunctionCall","src":"2289:6:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:9"},"nodeType":"YulFunctionCall","src":"2276:20:9"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:9"},"nodeType":"YulFunctionCall","src":"2322:9:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:9"}]},{"nodeType":"YulAssignment","src":"2348:43:9","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:9"},"nodeType":"YulFunctionCall","src":"2361:14:9"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:9"},"nodeType":"YulFunctionCall","src":"2377:13:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:9"},"nodeType":"YulFunctionCall","src":"2357:34:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1694,"isOffset":false,"isSlot":false,"src":"2313:5:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"2369:5:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"2384:5:9","valueSize":1},{"declaration":1697,"isOffset":false,"isSlot":false,"src":"2348:5:9","valueSize":1},{"declaration":1684,"isOffset":false,"isSlot":false,"src":"2283:1:9","valueSize":1},{"declaration":1684,"isOffset":false,"isSlot":false,"src":"2326:1:9","valueSize":1},{"declaration":1686,"isOffset":false,"isSlot":false,"src":"2286:1:9","valueSize":1},{"declaration":1686,"isOffset":false,"isSlot":false,"src":"2329:1:9","valueSize":1}],"id":1699,"nodeType":"InlineAssembly","src":"2239:166:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1700,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"2486:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1708,"nodeType":"IfStatement","src":"2482:368:9","trueBody":{"id":1707,"nodeType":"Block","src":"2498:352:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1703,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"2816:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1704,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2824:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1692,"id":1706,"nodeType":"Return","src":"2809:26:9"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1710,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2960:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1711,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"2974:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1709,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1715,"nodeType":"ExpressionStatement","src":"2952:53:9"},{"assignments":[1717],"declarations":[{"constant":false,"id":1717,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:9","nodeType":"VariableDeclaration","scope":1802,"src":"3261:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1716,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1718,"nodeType":"VariableDeclarationStatement","src":"3261:17:9"},{"AST":{"nodeType":"YulBlock","src":"3301:291:9","statements":[{"nodeType":"YulAssignment","src":"3370:38:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:9"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:9"},"nodeType":"YulFunctionCall","src":"3383:25:9"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:9"}]},{"nodeType":"YulAssignment","src":"3490:41:9","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:9"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:9"},"nodeType":"YulFunctionCall","src":"3510:20:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:9"},"nodeType":"YulFunctionCall","src":"3499:32:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:9"}]},{"nodeType":"YulAssignment","src":"3548:30:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:9"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:9"},"nodeType":"YulFunctionCall","src":"3557:21:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1688,"isOffset":false,"isSlot":false,"src":"3396:11:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"3524:5:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"3548:5:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"3561:5:9","valueSize":1},{"declaration":1697,"isOffset":false,"isSlot":false,"src":"3490:5:9","valueSize":1},{"declaration":1697,"isOffset":false,"isSlot":false,"src":"3503:5:9","valueSize":1},{"declaration":1717,"isOffset":false,"isSlot":false,"src":"3370:9:9","valueSize":1},{"declaration":1717,"isOffset":false,"isSlot":false,"src":"3513:9:9","valueSize":1},{"declaration":1717,"isOffset":false,"isSlot":false,"src":"3568:9:9","valueSize":1},{"declaration":1684,"isOffset":false,"isSlot":false,"src":"3390:1:9","valueSize":1},{"declaration":1686,"isOffset":false,"isSlot":false,"src":"3393:1:9","valueSize":1}],"id":1719,"nodeType":"InlineAssembly","src":"3292:300:9"},{"assignments":[1721],"declarations":[{"constant":false,"id":1721,"mutability":"mutable","name":"twos","nameLocation":"3907:4:9","nodeType":"VariableDeclaration","scope":1802,"src":"3899:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1720,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1729,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1722,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"3914:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:9","subExpression":{"id":1723,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"3930:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1727,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:9"},{"AST":{"nodeType":"YulBlock","src":"3969:362:9","statements":[{"nodeType":"YulAssignment","src":"4034:37:9","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:9"},"nodeType":"YulFunctionCall","src":"4049:22:9"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:9"}]},{"nodeType":"YulAssignment","src":"4138:25:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:9"},"nodeType":"YulFunctionCall","src":"4147:16:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:9"}]},{"nodeType":"YulAssignment","src":"4278:39:9","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:9","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:9"},"nodeType":"YulFunctionCall","src":"4294:12:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:9"},"nodeType":"YulFunctionCall","src":"4290:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:9"},"nodeType":"YulFunctionCall","src":"4286:31:9"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1688,"isOffset":false,"isSlot":false,"src":"4034:11:9","valueSize":1},{"declaration":1688,"isOffset":false,"isSlot":false,"src":"4053:11:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"4138:5:9","valueSize":1},{"declaration":1694,"isOffset":false,"isSlot":false,"src":"4151:5:9","valueSize":1},{"declaration":1721,"isOffset":false,"isSlot":false,"src":"4066:4:9","valueSize":1},{"declaration":1721,"isOffset":false,"isSlot":false,"src":"4158:4:9","valueSize":1},{"declaration":1721,"isOffset":false,"isSlot":false,"src":"4278:4:9","valueSize":1},{"declaration":1721,"isOffset":false,"isSlot":false,"src":"4301:4:9","valueSize":1},{"declaration":1721,"isOffset":false,"isSlot":false,"src":"4308:4:9","valueSize":1}],"id":1730,"nodeType":"InlineAssembly","src":"3960:371:9"},{"expression":{"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1731,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4397:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1732,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"4406:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1733,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"4414:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1736,"nodeType":"ExpressionStatement","src":"4397:21:9"},{"assignments":[1738],"declarations":[{"constant":false,"id":1738,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:9","nodeType":"VariableDeclaration","scope":1802,"src":"4736:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1745,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1740,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"4759:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:9"},{"expression":{"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1746,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"4992:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1748,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"5007:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1749,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5021:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1753,"nodeType":"ExpressionStatement","src":"4992:36:9"},{"expression":{"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1754,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5061:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1756,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"5076:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1757,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5090:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1761,"nodeType":"ExpressionStatement","src":"5061:36:9"},{"expression":{"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1762,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5131:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1764,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"5146:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1765,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5160:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1769,"nodeType":"ExpressionStatement","src":"5131:36:9"},{"expression":{"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1770,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5201:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1772,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"5216:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1773,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5230:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1777,"nodeType":"ExpressionStatement","src":"5201:36:9"},{"expression":{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1778,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5271:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1780,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"5286:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1781,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5300:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1785,"nodeType":"ExpressionStatement","src":"5271:36:9"},{"expression":{"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1786,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5342:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1788,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"5357:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1789,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5371:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1793,"nodeType":"ExpressionStatement","src":"5342:36:9"},{"expression":{"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"5812:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1795,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"5821:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1796,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"5829:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1799,"nodeType":"ExpressionStatement","src":"5812:24:9"},{"expression":{"id":1800,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"5857:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1692,"id":1801,"nodeType":"Return","src":"5850:13:9"}]}]},"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"1357:305:9","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1804,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:9","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"x","nameLocation":"1691:1:9","nodeType":"VariableDeclaration","scope":1804,"src":"1683:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1683,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"y","nameLocation":"1702:1:9","nodeType":"VariableDeclaration","scope":1804,"src":"1694:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:9","nodeType":"VariableDeclaration","scope":1804,"src":"1705:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:9"},"returnParameters":{"id":1692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"result","nameLocation":"1757:6:9","nodeType":"VariableDeclaration","scope":1804,"src":"1749:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:9"},"scope":2456,"src":"1667:4213:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1847,"nodeType":"Block","src":"6122:189:9","statements":[{"assignments":[1820],"declarations":[{"constant":false,"id":1820,"mutability":"mutable","name":"result","nameLocation":"6140:6:9","nodeType":"VariableDeclaration","scope":1847,"src":"6132:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1819,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1826,"initialValue":{"arguments":[{"id":1822,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"6156:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1823,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"6159:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1824,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"6162:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1821,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1804,1848],"referencedDeclaration":1804,"src":"6149:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1827,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"6188:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1828,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"6200:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1597_$","typeString":"type(enum Math.Rounding)"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"6200:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"src":"6188:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1832,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"6222:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1833,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"6225:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1834,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1811,"src":"6228:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1831,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:9","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1844,"nodeType":"IfStatement","src":"6184:98:9","trueBody":{"id":1843,"nodeType":"Block","src":"6246:36:9","statements":[{"expression":{"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1839,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6260:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1842,"nodeType":"ExpressionStatement","src":"6260:11:9"}]}},{"expression":{"id":1845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"6298:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1818,"id":1846,"nodeType":"Return","src":"6291:13:9"}]},"documentation":{"id":1805,"nodeType":"StructuredDocumentation","src":"5886:121:9","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1848,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:9","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"x","nameLocation":"6036:1:9","nodeType":"VariableDeclaration","scope":1848,"src":"6028:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1806,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1809,"mutability":"mutable","name":"y","nameLocation":"6047:1:9","nodeType":"VariableDeclaration","scope":1848,"src":"6039:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1811,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:9","nodeType":"VariableDeclaration","scope":1848,"src":"6050:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1810,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:9","nodeType":"VariableDeclaration","scope":1848,"src":"6071:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"typeName":{"id":1813,"nodeType":"UserDefinedTypeName","pathNode":{"id":1812,"name":"Rounding","nameLocations":["6071:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1597,"src":"6071:8:9"},"referencedDeclaration":1597,"src":"6071:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:9"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1848,"src":"6113:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1816,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:9"},"scope":2456,"src":"6012:299:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1959,"nodeType":"Block","src":"6587:1585:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1856,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"6601:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1862,"nodeType":"IfStatement","src":"6597:45:9","trueBody":{"id":1861,"nodeType":"Block","src":"6609:33:9","statements":[{"expression":{"hexValue":"30","id":1859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1855,"id":1860,"nodeType":"Return","src":"6623:8:9"}]}},{"assignments":[1864],"declarations":[{"constant":false,"id":1864,"mutability":"mutable","name":"result","nameLocation":"7329:6:9","nodeType":"VariableDeclaration","scope":1959,"src":"7321:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1873,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1867,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7349:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1866,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2128,2164],"referencedDeclaration":2128,"src":"7344:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1871,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:9"},{"id":1958,"nodeType":"UncheckedBlock","src":"7758:408:9","statements":[{"expression":{"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1874,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7782:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1875,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7792:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1876,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7801:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1877,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7805:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1880,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1884,"nodeType":"ExpressionStatement","src":"7782:35:9"},{"expression":{"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1885,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7831:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7841:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1887,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7850:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1888,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7854:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1891,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1895,"nodeType":"ExpressionStatement","src":"7831:35:9"},{"expression":{"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1896,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7880:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7890:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7899:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1899,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7903:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1902,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1906,"nodeType":"ExpressionStatement","src":"7880:35:9"},{"expression":{"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1907,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7929:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7939:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1909,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7948:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1910,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7952:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1913,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1917,"nodeType":"ExpressionStatement","src":"7929:35:9"},{"expression":{"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1918,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7978:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1919,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7988:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1920,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"7997:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1921,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8001:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1924,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1928,"nodeType":"ExpressionStatement","src":"7978:35:9"},{"expression":{"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1929,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8027:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1930,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8037:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"8046:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1932,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8050:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1939,"nodeType":"ExpressionStatement","src":"8027:35:9"},{"expression":{"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1940,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8076:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8086:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1942,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"8095:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1943,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8099:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1950,"nodeType":"ExpressionStatement","src":"8076:35:9"},{"expression":{"arguments":[{"id":1952,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8136:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1953,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"8144:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1954,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"8148:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1951,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"8132:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1855,"id":1957,"nodeType":"Return","src":"8125:30:9"}]}]},"documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"6317:208:9","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1960,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:9","nodeType":"FunctionDefinition","parameters":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"a","nameLocation":"6552:1:9","nodeType":"VariableDeclaration","scope":1960,"src":"6544:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:9"},"returnParameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1854,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1960,"src":"6578:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1853,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:9"},"scope":2456,"src":"6530:1642:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1995,"nodeType":"Block","src":"8348:161:9","statements":[{"id":1994,"nodeType":"UncheckedBlock","src":"8358:145:9","statements":[{"assignments":[1972],"declarations":[{"constant":false,"id":1972,"mutability":"mutable","name":"result","nameLocation":"8390:6:9","nodeType":"VariableDeclaration","scope":1994,"src":"8382:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1976,"initialValue":{"arguments":[{"id":1974,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"8404:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1973,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1960,1996],"referencedDeclaration":1960,"src":"8399:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1977,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"8427:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1978,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"8437:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1979,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"8449:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1597_$","typeString":"type(enum Math.Rounding)"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"8449:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"src":"8437:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"8464:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1983,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"8473:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1985,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"8482:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:9","trueExpression":{"hexValue":"31","id":1988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1970,"id":1993,"nodeType":"Return","src":"8420:72:9"}]}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"8178:89:9","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1996,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:9","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"a","nameLocation":"8294:1:9","nodeType":"VariableDeclaration","scope":1996,"src":"8286:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:9","nodeType":"VariableDeclaration","scope":1996,"src":"8297:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"typeName":{"id":1965,"nodeType":"UserDefinedTypeName","pathNode":{"id":1964,"name":"Rounding","nameLocations":["8297:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1597,"src":"8297:8:9"},"referencedDeclaration":1597,"src":"8297:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:9"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1996,"src":"8339:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:9"},"scope":2456,"src":"8272:237:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2127,"nodeType":"Block","src":"8694:922:9","statements":[{"assignments":[2005],"declarations":[{"constant":false,"id":2005,"mutability":"mutable","name":"result","nameLocation":"8712:6:9","nodeType":"VariableDeclaration","scope":2127,"src":"8704:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2007,"initialValue":{"hexValue":"30","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:9"},{"id":2124,"nodeType":"UncheckedBlock","src":"8732:855:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2008,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8760:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2022,"nodeType":"IfStatement","src":"8756:99:9","trueBody":{"id":2021,"nodeType":"Block","src":"8778:77:9","statements":[{"expression":{"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2013,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8796:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2016,"nodeType":"ExpressionStatement","src":"8796:13:9"},{"expression":{"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2017,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"8827:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2020,"nodeType":"ExpressionStatement","src":"8827:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8872:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2037,"nodeType":"IfStatement","src":"8868:96:9","trueBody":{"id":2036,"nodeType":"Block","src":"8889:75:9","statements":[{"expression":{"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8907:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2031,"nodeType":"ExpressionStatement","src":"8907:12:9"},{"expression":{"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"8937:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2035,"nodeType":"ExpressionStatement","src":"8937:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8981:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2052,"nodeType":"IfStatement","src":"8977:96:9","trueBody":{"id":2051,"nodeType":"Block","src":"8998:75:9","statements":[{"expression":{"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9016:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2046,"nodeType":"ExpressionStatement","src":"9016:12:9"},{"expression":{"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9046:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2050,"nodeType":"ExpressionStatement","src":"9046:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9090:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2067,"nodeType":"IfStatement","src":"9086:96:9","trueBody":{"id":2066,"nodeType":"Block","src":"9107:75:9","statements":[{"expression":{"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9125:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2061,"nodeType":"ExpressionStatement","src":"9125:12:9"},{"expression":{"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2062,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9155:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2065,"nodeType":"ExpressionStatement","src":"9155:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9199:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2082,"nodeType":"IfStatement","src":"9195:93:9","trueBody":{"id":2081,"nodeType":"Block","src":"9215:73:9","statements":[{"expression":{"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9233:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2076,"nodeType":"ExpressionStatement","src":"9233:11:9"},{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2077,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9262:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2080,"nodeType":"ExpressionStatement","src":"9262:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9305:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2097,"nodeType":"IfStatement","src":"9301:93:9","trueBody":{"id":2096,"nodeType":"Block","src":"9321:73:9","statements":[{"expression":{"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2088,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9339:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2091,"nodeType":"ExpressionStatement","src":"9339:11:9"},{"expression":{"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2092,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9368:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2095,"nodeType":"ExpressionStatement","src":"9368:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9411:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2112,"nodeType":"IfStatement","src":"9407:93:9","trueBody":{"id":2111,"nodeType":"Block","src":"9427:73:9","statements":[{"expression":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9445:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2106,"nodeType":"ExpressionStatement","src":"9445:11:9"},{"expression":{"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2107,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9474:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2110,"nodeType":"ExpressionStatement","src":"9474:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"9517:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2123,"nodeType":"IfStatement","src":"9513:64:9","trueBody":{"id":2122,"nodeType":"Block","src":"9533:44:9","statements":[{"expression":{"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2118,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9551:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2121,"nodeType":"ExpressionStatement","src":"9551:11:9"}]}}]},{"expression":{"id":2125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"9603:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2003,"id":2126,"nodeType":"Return","src":"9596:13:9"}]},"documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"8515:113:9","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2128,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:9","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1999,"mutability":"mutable","name":"value","nameLocation":"8655:5:9","nodeType":"VariableDeclaration","scope":2128,"src":"8647:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:9"},"returnParameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2128,"src":"8685:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:9"},"scope":2456,"src":"8633:983:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2163,"nodeType":"Block","src":"9849:165:9","statements":[{"id":2162,"nodeType":"UncheckedBlock","src":"9859:149:9","statements":[{"assignments":[2140],"declarations":[{"constant":false,"id":2140,"mutability":"mutable","name":"result","nameLocation":"9891:6:9","nodeType":"VariableDeclaration","scope":2162,"src":"9883:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2139,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2144,"initialValue":{"arguments":[{"id":2142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"9905:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2141,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2128,2164],"referencedDeclaration":2128,"src":"9900:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2145,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9932:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2146,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"9942:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2147,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"9954:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1597_$","typeString":"type(enum Math.Rounding)"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"9954:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"src":"9942:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2151,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"9974:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2153,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"9983:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:9","trueExpression":{"hexValue":"31","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2159,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2138,"id":2161,"nodeType":"Return","src":"9925:72:9"}]}]},"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"9622:142:9","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2164,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:9","nodeType":"FunctionDefinition","parameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"value","nameLocation":"9791:5:9","nodeType":"VariableDeclaration","scope":2164,"src":"9783:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2134,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:9","nodeType":"VariableDeclaration","scope":2164,"src":"9798:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"typeName":{"id":2133,"nodeType":"UserDefinedTypeName","pathNode":{"id":2132,"name":"Rounding","nameLocations":["9798:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1597,"src":"9798:8:9"},"referencedDeclaration":1597,"src":"9798:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:9"},"returnParameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2164,"src":"9840:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2136,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:9"},"scope":2456,"src":"9769:245:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2292,"nodeType":"Block","src":"10201:854:9","statements":[{"assignments":[2173],"declarations":[{"constant":false,"id":2173,"mutability":"mutable","name":"result","nameLocation":"10219:6:9","nodeType":"VariableDeclaration","scope":2292,"src":"10211:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2172,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2175,"initialValue":{"hexValue":"30","id":2174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:9"},{"id":2289,"nodeType":"UncheckedBlock","src":"10239:787:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10267:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2192,"nodeType":"IfStatement","src":"10263:103:9","trueBody":{"id":2191,"nodeType":"Block","src":"10286:80:9","statements":[{"expression":{"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10304:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2186,"nodeType":"ExpressionStatement","src":"10304:17:9"},{"expression":{"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2187,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10339:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2190,"nodeType":"ExpressionStatement","src":"10339:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2193,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10383:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2209,"nodeType":"IfStatement","src":"10379:103:9","trueBody":{"id":2208,"nodeType":"Block","src":"10402:80:9","statements":[{"expression":{"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10420:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2203,"nodeType":"ExpressionStatement","src":"10420:17:9"},{"expression":{"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2204,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10455:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2207,"nodeType":"ExpressionStatement","src":"10455:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10499:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2226,"nodeType":"IfStatement","src":"10495:103:9","trueBody":{"id":2225,"nodeType":"Block","src":"10518:80:9","statements":[{"expression":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10536:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2220,"nodeType":"ExpressionStatement","src":"10536:17:9"},{"expression":{"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10571:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2224,"nodeType":"ExpressionStatement","src":"10571:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2227,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10615:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2243,"nodeType":"IfStatement","src":"10611:100:9","trueBody":{"id":2242,"nodeType":"Block","src":"10633:78:9","statements":[{"expression":{"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10651:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2237,"nodeType":"ExpressionStatement","src":"10651:16:9"},{"expression":{"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10685:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2241,"nodeType":"ExpressionStatement","src":"10685:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10728:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2260,"nodeType":"IfStatement","src":"10724:100:9","trueBody":{"id":2259,"nodeType":"Block","src":"10746:78:9","statements":[{"expression":{"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10764:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2254,"nodeType":"ExpressionStatement","src":"10764:16:9"},{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10798:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"10798:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10841:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2277,"nodeType":"IfStatement","src":"10837:100:9","trueBody":{"id":2276,"nodeType":"Block","src":"10859:78:9","statements":[{"expression":{"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10877:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2271,"nodeType":"ExpressionStatement","src":"10877:16:9"},{"expression":{"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10911:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2275,"nodeType":"ExpressionStatement","src":"10911:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"10954:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2288,"nodeType":"IfStatement","src":"10950:66:9","trueBody":{"id":2287,"nodeType":"Block","src":"10972:44:9","statements":[{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"10990:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2286,"nodeType":"ExpressionStatement","src":"10990:11:9"}]}}]},{"expression":{"id":2290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"11042:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2171,"id":2291,"nodeType":"Return","src":"11035:13:9"}]},"documentation":{"id":2165,"nodeType":"StructuredDocumentation","src":"10020:114:9","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2293,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:9","nodeType":"FunctionDefinition","parameters":{"id":2168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2167,"mutability":"mutable","name":"value","nameLocation":"10162:5:9","nodeType":"VariableDeclaration","scope":2293,"src":"10154:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2166,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:9"},"returnParameters":{"id":2171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2293,"src":"10192:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2169,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:9"},"scope":2456,"src":"10139:916:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2328,"nodeType":"Block","src":"11290:167:9","statements":[{"id":2327,"nodeType":"UncheckedBlock","src":"11300:151:9","statements":[{"assignments":[2305],"declarations":[{"constant":false,"id":2305,"mutability":"mutable","name":"result","nameLocation":"11332:6:9","nodeType":"VariableDeclaration","scope":2327,"src":"11324:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2309,"initialValue":{"arguments":[{"id":2307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"11347:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2306,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2293,2329],"referencedDeclaration":2293,"src":"11341:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"11374:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2311,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"11384:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2312,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"11396:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1597_$","typeString":"type(enum Math.Rounding)"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"11396:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"src":"11384:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2316,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"11417:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2318,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"11426:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:9","trueExpression":{"hexValue":"31","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2324,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2303,"id":2326,"nodeType":"Return","src":"11367:73:9"}]}]},"documentation":{"id":2294,"nodeType":"StructuredDocumentation","src":"11061:143:9","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2329,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:9","nodeType":"FunctionDefinition","parameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"value","nameLocation":"11232:5:9","nodeType":"VariableDeclaration","scope":2329,"src":"11224:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2299,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:9","nodeType":"VariableDeclaration","scope":2329,"src":"11239:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"typeName":{"id":2298,"nodeType":"UserDefinedTypeName","pathNode":{"id":2297,"name":"Rounding","nameLocations":["11239:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1597,"src":"11239:8:9"},"referencedDeclaration":1597,"src":"11239:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:9"},"returnParameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"11281:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2301,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:9"},"scope":2456,"src":"11209:248:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2415,"nodeType":"Block","src":"11771:600:9","statements":[{"assignments":[2338],"declarations":[{"constant":false,"id":2338,"mutability":"mutable","name":"result","nameLocation":"11789:6:9","nodeType":"VariableDeclaration","scope":2415,"src":"11781:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2340,"initialValue":{"hexValue":"30","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:9"},{"id":2412,"nodeType":"UncheckedBlock","src":"11809:533:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2341,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"11837:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2355,"nodeType":"IfStatement","src":"11833:98:9","trueBody":{"id":2354,"nodeType":"Block","src":"11855:76:9","statements":[{"expression":{"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2346,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"11873:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2349,"nodeType":"ExpressionStatement","src":"11873:13:9"},{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"11904:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"11904:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2356,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"11948:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2370,"nodeType":"IfStatement","src":"11944:95:9","trueBody":{"id":2369,"nodeType":"Block","src":"11965:74:9","statements":[{"expression":{"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2361,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"11983:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2364,"nodeType":"ExpressionStatement","src":"11983:12:9"},{"expression":{"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2365,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"12013:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2368,"nodeType":"ExpressionStatement","src":"12013:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"12056:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2385,"nodeType":"IfStatement","src":"12052:95:9","trueBody":{"id":2384,"nodeType":"Block","src":"12073:74:9","statements":[{"expression":{"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2376,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"12091:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2379,"nodeType":"ExpressionStatement","src":"12091:12:9"},{"expression":{"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"12121:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2383,"nodeType":"ExpressionStatement","src":"12121:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"12164:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2400,"nodeType":"IfStatement","src":"12160:95:9","trueBody":{"id":2399,"nodeType":"Block","src":"12181:74:9","statements":[{"expression":{"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"12199:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2394,"nodeType":"ExpressionStatement","src":"12199:12:9"},{"expression":{"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2395,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"12229:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2398,"nodeType":"ExpressionStatement","src":"12229:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"12272:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2411,"nodeType":"IfStatement","src":"12268:64:9","trueBody":{"id":2410,"nodeType":"Block","src":"12288:44:9","statements":[{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"12306:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2409,"nodeType":"ExpressionStatement","src":"12306:11:9"}]}}]},{"expression":{"id":2413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"12358:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2336,"id":2414,"nodeType":"Return","src":"12351:13:9"}]},"documentation":{"id":2330,"nodeType":"StructuredDocumentation","src":"11463:240:9","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2416,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:9","nodeType":"FunctionDefinition","parameters":{"id":2333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"value","nameLocation":"11732:5:9","nodeType":"VariableDeclaration","scope":2416,"src":"11724:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:9"},"returnParameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2416,"src":"11762:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2334,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:9"},"scope":2456,"src":"11708:663:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2454,"nodeType":"Block","src":"12608:174:9","statements":[{"id":2453,"nodeType":"UncheckedBlock","src":"12618:158:9","statements":[{"assignments":[2428],"declarations":[{"constant":false,"id":2428,"mutability":"mutable","name":"result","nameLocation":"12650:6:9","nodeType":"VariableDeclaration","scope":2453,"src":"12642:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2432,"initialValue":{"arguments":[{"id":2430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"12666:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2429,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2416,2455],"referencedDeclaration":2416,"src":"12659:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2433,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"12693:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"12703:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2435,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"12715:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1597_$","typeString":"type(enum Math.Rounding)"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1595,"src":"12715:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"src":"12703:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"12736:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"12751:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:9","trueExpression":{"hexValue":"31","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2426,"id":2452,"nodeType":"Return","src":"12686:79:9"}]}]},"documentation":{"id":2417,"nodeType":"StructuredDocumentation","src":"12377:144:9","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2455,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:9","nodeType":"FunctionDefinition","parameters":{"id":2423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2419,"mutability":"mutable","name":"value","nameLocation":"12550:5:9","nodeType":"VariableDeclaration","scope":2455,"src":"12542:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2418,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2422,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:9","nodeType":"VariableDeclaration","scope":2455,"src":"12557:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"},"typeName":{"id":2421,"nodeType":"UserDefinedTypeName","pathNode":{"id":2420,"name":"Rounding","nameLocations":["12557:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1597,"src":"12557:8:9"},"referencedDeclaration":1597,"src":"12557:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1597","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:9"},"returnParameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2455,"src":"12599:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:9"},"scope":2456,"src":"12526:256:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2457,"src":"202:12582:9","usedErrors":[]}],"src":"103:12682:9"},"id":9},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[2561]},"id":2562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2458,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"134:80:10","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2561,"linearizedBaseContracts":[2561],"name":"SignedMath","nameLocation":"223:10:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2476,"nodeType":"Block","src":"375:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2469,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"392:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2470,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"396:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2473,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"404:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:10","trueExpression":{"id":2472,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"400:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2468,"id":2475,"nodeType":"Return","src":"385:20:10"}]},"documentation":{"id":2460,"nodeType":"StructuredDocumentation","src":"240:66:10","text":" @dev Returns the largest of two signed numbers."},"id":2477,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:10","nodeType":"FunctionDefinition","parameters":{"id":2465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"a","nameLocation":"331:1:10","nodeType":"VariableDeclaration","scope":2477,"src":"324:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2461,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2464,"mutability":"mutable","name":"b","nameLocation":"341:1:10","nodeType":"VariableDeclaration","scope":2477,"src":"334:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2463,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:10"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2477,"src":"367:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2466,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:10"},"scope":2561,"src":"311:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2494,"nodeType":"Block","src":"554:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2487,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"571:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2488,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"575:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2491,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"583:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:10","trueExpression":{"id":2490,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2480,"src":"579:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2486,"id":2493,"nodeType":"Return","src":"564:20:10"}]},"documentation":{"id":2478,"nodeType":"StructuredDocumentation","src":"418:67:10","text":" @dev Returns the smallest of two signed numbers."},"id":2495,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:10","nodeType":"FunctionDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"a","nameLocation":"510:1:10","nodeType":"VariableDeclaration","scope":2495,"src":"503:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2479,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2482,"mutability":"mutable","name":"b","nameLocation":"520:1:10","nodeType":"VariableDeclaration","scope":2495,"src":"513:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2481,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:10"},"returnParameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2495,"src":"546:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2484,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:10"},"scope":2561,"src":"490:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2538,"nodeType":"Block","src":"796:162:10","statements":[{"assignments":[2506],"declarations":[{"constant":false,"id":2506,"mutability":"mutable","name":"x","nameLocation":"865:1:10","nodeType":"VariableDeclaration","scope":2538,"src":"858:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2505,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2519,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2507,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"870:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2508,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"874:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2511,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"881:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2512,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"885:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:10"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2520,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"910:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2525,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2506,"src":"930:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2523,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:10","typeDescriptions":{}}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2521,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:10","typeDescriptions":{}}},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2530,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"944:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2531,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"948:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2533,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2535,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2504,"id":2537,"nodeType":"Return","src":"903:48:10"}]},"documentation":{"id":2496,"nodeType":"StructuredDocumentation","src":"597:126:10","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2539,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:10","nodeType":"FunctionDefinition","parameters":{"id":2501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2498,"mutability":"mutable","name":"a","nameLocation":"752:1:10","nodeType":"VariableDeclaration","scope":2539,"src":"745:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2497,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2500,"mutability":"mutable","name":"b","nameLocation":"762:1:10","nodeType":"VariableDeclaration","scope":2539,"src":"755:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2499,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:10"},"returnParameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2539,"src":"788:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2502,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:10"},"scope":2561,"src":"728:230:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2559,"nodeType":"Block","src":"1102:158:10","statements":[{"id":2558,"nodeType":"UncheckedBlock","src":"1112:142:10","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2549,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"1227:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:10","subExpression":{"id":2553,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"1241:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:10","trueExpression":{"id":2552,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2542,"src":"1236:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{}}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2546,"id":2557,"nodeType":"Return","src":"1212:31:10"}]}]},"documentation":{"id":2540,"nodeType":"StructuredDocumentation","src":"964:78:10","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2560,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:10","nodeType":"FunctionDefinition","parameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"n","nameLocation":"1067:1:10","nodeType":"VariableDeclaration","scope":2560,"src":"1060:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2541,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:10"},"returnParameters":{"id":2546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2560,"src":"1093:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2544,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:10"},"scope":2561,"src":"1047:213:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2562,"src":"215:1047:10","usedErrors":[]}],"src":"109:1154:10"},"id":10},"contracts/Gateway.sol":{"ast":{"absolutePath":"contracts/Gateway.sol","exportedSymbols":{"ContextUpgradeable":[917],"ECDSA":[1590],"Gateway":[3437],"GatewaySettingManager":[3621],"IERC20":[995],"IGateway":[3845],"Initializable":[408],"Math":[2456],"PausableUpgradeable":[536],"SignedMath":[2561],"Strings":[1224]},"id":3438,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2563,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:11"},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol","id":2564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3438,"sourceUnit":537,"src":"68:78:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":2565,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3438,"sourceUnit":1591,"src":"148:62:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/GatewaySettingManager.sol","file":"./GatewaySettingManager.sol","id":2567,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3438,"sourceUnit":3622,"src":"214:66:11","symbolAliases":[{"foreign":{"id":2566,"name":"GatewaySettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"222:21:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGateway.sol","file":"./interfaces/IGateway.sol","id":2570,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3438,"sourceUnit":3846,"src":"282:59:11","symbolAliases":[{"foreign":{"id":2568,"name":"IGateway","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"290:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2569,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"300:6:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2572,"name":"IGateway","nameLocations":["486:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":3845,"src":"486:8:11"},"id":2573,"nodeType":"InheritanceSpecifier","src":"486:8:11"},{"baseName":{"id":2574,"name":"GatewaySettingManager","nameLocations":["496:21:11"],"nodeType":"IdentifierPath","referencedDeclaration":3621,"src":"496:21:11"},"id":2575,"nodeType":"InheritanceSpecifier","src":"496:21:11"},{"baseName":{"id":2576,"name":"PausableUpgradeable","nameLocations":["519:19:11"],"nodeType":"IdentifierPath","referencedDeclaration":536,"src":"519:19:11"},"id":2577,"nodeType":"InheritanceSpecifier","src":"519:19:11"}],"canonicalName":"Gateway","contractDependencies":[],"contractKind":"contract","documentation":{"id":2571,"nodeType":"StructuredDocumentation","src":"345:119:11","text":" @title Gateway\n @notice This contract serves as a gateway for creating orders and managing settlements."},"fullyImplemented":true,"id":3437,"linearizedBaseContracts":[3437,536,3621,106,239,917,408,3845],"name":"Gateway","nameLocation":"475:7:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2580,"libraryName":{"id":2578,"name":"ECDSA","nameLocations":["549:5:11"],"nodeType":"IdentifierPath","referencedDeclaration":1590,"src":"549:5:11"},"nodeType":"UsingForDirective","src":"543:24:11","typeName":{"id":2579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"559:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Gateway.fee","id":2585,"members":[{"constant":false,"id":2582,"mutability":"mutable","name":"protocolFee","nameLocation":"594:11:11","nodeType":"VariableDeclaration","scope":2585,"src":"586:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2581,"name":"uint256","nodeType":"ElementaryTypeName","src":"586:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2584,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"618:23:11","nodeType":"VariableDeclaration","scope":2585,"src":"610:31:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2583,"name":"uint256","nodeType":"ElementaryTypeName","src":"610:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"577:3:11","nodeType":"StructDefinition","scope":3437,"src":"570:76:11","visibility":"public"},{"constant":false,"id":2590,"mutability":"mutable","name":"orderOut","nameLocation":"688:8:11","nodeType":"VariableDeclaration","scope":3437,"src":"651:45:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut)"},"typeName":{"id":2589,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"659:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"651:28:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2588,"nodeType":"UserDefinedTypeName","pathNode":{"id":2587,"name":"OrderOut","nameLocations":["670:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":3711,"src":"670:8:11"},"referencedDeclaration":3711,"src":"670:8:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage_ptr","typeString":"struct IGateway.OrderOut"}}},"visibility":"private"},{"constant":false,"id":2595,"mutability":"mutable","name":"orderIn","nameLocation":"736:7:11","nodeType":"VariableDeclaration","scope":3437,"src":"700:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderIn_$3722_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderIn)"},"typeName":{"id":2594,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"708:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"700:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderIn_$3722_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderIn)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2593,"nodeType":"UserDefinedTypeName","pathNode":{"id":2592,"name":"OrderIn","nameLocations":["719:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3722,"src":"719:7:11"},"referencedDeclaration":3722,"src":"719:7:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_storage_ptr","typeString":"struct IGateway.OrderIn"}}},"visibility":"private"},{"constant":false,"id":2599,"mutability":"mutable","name":"_nonce","nameLocation":"783:6:11","nodeType":"VariableDeclaration","scope":3437,"src":"747:42:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2598,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2596,"name":"address","nodeType":"ElementaryTypeName","src":"755:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"747:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2597,"name":"uint256","nodeType":"ElementaryTypeName","src":"766:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2605,"mutability":"mutable","name":"balance","nameLocation":"849:7:11","nodeType":"VariableDeclaration","scope":3437,"src":"793:63:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":2604,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2600,"name":"address","nodeType":"ElementaryTypeName","src":"801:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"793:47:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2603,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2601,"name":"address","nodeType":"ElementaryTypeName","src":"820:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"812:27:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":2609,"mutability":"mutable","name":"processedOrders","nameLocation":"893:15:11","nodeType":"VariableDeclaration","scope":3437,"src":"860:48:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2608,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"868:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"860:24:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2607,"name":"bool","nodeType":"ElementaryTypeName","src":"879:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"constant":false,"id":2613,"mutability":"mutable","name":"__gap","nameLocation":"932:5:11","nodeType":"VariableDeclaration","scope":3437,"src":"912:25:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"912:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2612,"length":{"hexValue":"3530","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"920:2:11","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"912:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":2620,"nodeType":"Block","src":"1008:32:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2617,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"1013:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1013:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2619,"nodeType":"ExpressionStatement","src":"1013:22:11"}]},"documentation":{"id":2614,"nodeType":"StructuredDocumentation","src":"943:48:11","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":2621,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2615,"nodeType":"ParameterList","parameters":[],"src":"1005:2:11"},"returnParameters":{"id":2616,"nodeType":"ParameterList","parameters":[],"src":"1008:0:11"},"scope":3437,"src":"994:46:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2637,"nodeType":"Block","src":"1131:75:11","statements":[{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2627,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"1136:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130305f303030","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1146:7:11","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"src":"1136:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"1136:17:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2631,"name":"__Ownable2Step_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1158:19:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1158:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2633,"nodeType":"ExpressionStatement","src":"1158:21:11"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2634,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"1184:15:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1184:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2636,"nodeType":"ExpressionStatement","src":"1184:17:11"}]},"documentation":{"id":2622,"nodeType":"StructuredDocumentation","src":"1045:40:11","text":" @dev Initialize function."},"functionSelector":"8129fc1c","id":2638,"implemented":true,"kind":"function","modifiers":[{"id":2625,"kind":"modifierInvocation","modifierName":{"id":2624,"name":"initializer","nameLocations":["1119:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":310,"src":"1119:11:11"},"nodeType":"ModifierInvocation","src":"1119:11:11"}],"name":"initialize","nameLocation":"1097:10:11","nodeType":"FunctionDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[],"src":"1107:2:11"},"returnParameters":{"id":2626,"nodeType":"ParameterList","parameters":[],"src":"1131:0:11"},"scope":3437,"src":"1088:118:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2650,"nodeType":"Block","src":"1320:75:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2642,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1333:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1337:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1333:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2644,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"1347:18:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1333:32:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7941676772656761746f72","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1367:16:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""},"value":"OnlyAggregator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""}],"id":2641,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1325:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1325:59:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2648,"nodeType":"ExpressionStatement","src":"1325:59:11"},{"id":2649,"nodeType":"PlaceholderStatement","src":"1389:1:11"}]},"documentation":{"id":2639,"nodeType":"StructuredDocumentation","src":"1211:80:11","text":" @dev Modifier that allows only the aggregator to call a function."},"id":2651,"name":"onlyAggregator","nameLocation":"1303:14:11","nodeType":"ModifierDefinition","parameters":{"id":2640,"nodeType":"ParameterList","parameters":[],"src":"1317:2:11"},"src":"1294:101:11","virtual":false,"visibility":"internal"},{"body":{"id":2666,"nodeType":"Block","src":"1570:76:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2657,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"1583:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2659,"indexExpression":{"id":2658,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"1601:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1583:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1612:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1583:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e4e6f74537570706f72746564","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1615:19:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""},"value":"TokenNotSupported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""}],"id":2656,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1575:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1575:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2664,"nodeType":"ExpressionStatement","src":"1575:60:11"},{"id":2665,"nodeType":"PlaceholderStatement","src":"1640:1:11"}]},"documentation":{"id":2652,"nodeType":"StructuredDocumentation","src":"1400:126:11","text":" @dev Modifier that checks if the token is supported.\n @param _token The address of the token to be checked."},"id":2667,"name":"isTokenApproved","nameLocation":"1538:15:11","nodeType":"ModifierDefinition","parameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"_token","nameLocation":"1562:6:11","nodeType":"VariableDeclaration","scope":2667,"src":"1554:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2653,"name":"address","nodeType":"ElementaryTypeName","src":"1554:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1553:16:11"},"src":"1529:117:11","virtual":false,"visibility":"internal"},{"body":{"id":2680,"nodeType":"Block","src":"1812:52:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2673,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"1825:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1835:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1825:11:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7449735a65726f","id":2676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1838:14:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""},"value":"AmountIsZero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""}],"id":2672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1817:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1817:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2678,"nodeType":"ExpressionStatement","src":"1817:36:11"},{"id":2679,"nodeType":"PlaceholderStatement","src":"1858:1:11"}]},"documentation":{"id":2668,"nodeType":"StructuredDocumentation","src":"1651:118:11","text":" @dev Modifier that checks if the deposit amount is valid.\n @param _amount The amount to be checked."},"id":2681,"name":"isValidAmount","nameLocation":"1781:13:11","nodeType":"ModifierDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"_amount","nameLocation":"1803:7:11","nodeType":"VariableDeclaration","scope":2681,"src":"1795:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1795:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1794:17:11"},"src":"1772:92:11","virtual":false,"visibility":"internal"},{"body":{"id":2690,"nodeType":"Block","src":"2143:18:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2687,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"2148:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2148:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2689,"nodeType":"ExpressionStatement","src":"2148:8:11"}]},"documentation":{"id":2682,"nodeType":"StructuredDocumentation","src":"2065:39:11","text":" @dev Pause the contract."},"functionSelector":"8456cb59","id":2691,"implemented":true,"kind":"function","modifiers":[{"id":2685,"kind":"modifierInvocation","modifierName":{"id":2684,"name":"onlyOwner","nameLocations":["2133:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"2133:9:11"},"nodeType":"ModifierInvocation","src":"2133:9:11"}],"name":"pause","nameLocation":"2116:5:11","nodeType":"FunctionDefinition","parameters":{"id":2683,"nodeType":"ParameterList","parameters":[],"src":"2121:2:11"},"returnParameters":{"id":2686,"nodeType":"ParameterList","parameters":[],"src":"2143:0:11"},"scope":3437,"src":"2107:54:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2700,"nodeType":"Block","src":"2248:20:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2697,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2253:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2253:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2699,"nodeType":"ExpressionStatement","src":"2253:10:11"}]},"documentation":{"id":2692,"nodeType":"StructuredDocumentation","src":"2166:41:11","text":" @dev Unpause the contract."},"functionSelector":"3f4ba83a","id":2701,"implemented":true,"kind":"function","modifiers":[{"id":2695,"kind":"modifierInvocation","modifierName":{"id":2694,"name":"onlyOwner","nameLocations":["2238:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"2238:9:11"},"nodeType":"ModifierInvocation","src":"2238:9:11"}],"name":"unpause","nameLocation":"2219:7:11","nodeType":"FunctionDefinition","parameters":{"id":2693,"nodeType":"ParameterList","parameters":[],"src":"2226:2:11"},"returnParameters":{"id":2696,"nodeType":"ParameterList","parameters":[],"src":"2248:0:11"},"scope":3437,"src":"2210:58:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3742],"body":{"id":2823,"nodeType":"Block","src":"2750:1147:11","statements":[{"expression":{"arguments":[{"id":2724,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"2795:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2725,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"2803:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2726,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"2812:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2727,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2710,"src":"2828:19:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2728,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"2849:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2723,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"2786:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256,address,address,uint256) view"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2786:74:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2730,"nodeType":"ExpressionStatement","src":"2786:74:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2734,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"2908:11:11","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":2733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2902:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2732,"name":"bytes","nodeType":"ElementaryTypeName","src":"2902:5:11","typeDescriptions":{}}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2902:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2921:6:11","memberName":"length","nodeType":"MemberAccess","src":"2902:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2930:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2902:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69644d65737361676548617368","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2933:20:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4","typeString":"literal_string \"InvalidMessageHash\""},"value":"InvalidMessageHash"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cb943cef37628d805c376539a30fa265326b6f2ae5d9af4711b17e54dc8f15d4","typeString":"literal_string \"InvalidMessageHash\""}],"id":2731,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2894:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2894:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2741,"nodeType":"ExpressionStatement","src":"2894:60:11"},{"expression":{"arguments":[{"expression":{"id":2746,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3038:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3042:6:11","memberName":"sender","nodeType":"MemberAccess","src":"3038:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2750,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3058:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_Gateway_$3437","typeString":"contract Gateway"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Gateway_$3437","typeString":"contract Gateway"}],"id":2749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3050:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2748,"name":"address","nodeType":"ElementaryTypeName","src":"3050:7:11","typeDescriptions":{}}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3050:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2752,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"3065:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2753,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"3075:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3065:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2743,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"3017:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2742,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"3010:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3010:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3025:12:11","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":994,"src":"3010:27:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3010:76:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2756,"nodeType":"ExpressionStatement","src":"3010:76:11"},{"expression":{"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3144:20:11","subExpression":{"baseExpression":{"id":2757,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"3144:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2760,"indexExpression":{"expression":{"id":2758,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3151:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3155:6:11","memberName":"sender","nodeType":"MemberAccess","src":"3151:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3144:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2762,"nodeType":"ExpressionStatement","src":"3144:20:11"},{"expression":{"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2763,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"3221:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":2767,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3252:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3256:6:11","memberName":"sender","nodeType":"MemberAccess","src":"3252:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2769,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2599,"src":"3264:6:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2772,"indexExpression":{"expression":{"id":2770,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3271:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3275:6:11","memberName":"sender","nodeType":"MemberAccess","src":"3271:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3264:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2765,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3241:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3245:6:11","memberName":"encode","nodeType":"MemberAccess","src":"3241:10:11","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3241:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2764,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3231:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3231:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3221:63:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2776,"nodeType":"ExpressionStatement","src":"3221:63:11"},{"assignments":[2778],"declarations":[{"constant":false,"id":2778,"mutability":"mutable","name":"_protocolFee","nameLocation":"3324:12:11","nodeType":"VariableDeclaration","scope":2823,"src":"3316:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2777,"name":"uint256","nodeType":"ElementaryTypeName","src":"3316:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2785,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2779,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"3340:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2780,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"3350:18:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3340:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2782,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3339:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2783,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"3372:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3339:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3316:63:11"},{"expression":{"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2786,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"3384:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2788,"indexExpression":{"id":2787,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"3393:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3384:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2790,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3427:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3431:6:11","memberName":"sender","nodeType":"MemberAccess","src":"3427:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2792,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"3450:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2793,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2710,"src":"3482:19:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2794,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"3518:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2795,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"3547:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3578:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"66616c7365","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":2798,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"3627:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2801,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"3666:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3659:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2799,"name":"uint64","nodeType":"ElementaryTypeName","src":"3659:6:11","typeDescriptions":{}}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3659:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":2803,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2706,"src":"3688:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2789,"name":"OrderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"3404:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_OrderOut_$3711_storage_ptr_$","typeString":"type(struct IGateway.OrderOut storage pointer)"}},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3419:6:11","3443:5:11","3462:18:11","3507:9:11","3534:11:11","3565:11:11","3589:10:11","3612:13:11","3647:10:11","3680:6:11"],"names":["sender","token","senderFeeRecipient","senderFee","protocolFee","isFulfilled","isRefunded","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"3404:297:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_memory_ptr","typeString":"struct IGateway.OrderOut memory"}},"src":"3384:317:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2806,"nodeType":"ExpressionStatement","src":"3384:317:11"},{"eventCall":{"arguments":[{"expression":{"baseExpression":{"id":2808,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"3762:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2810,"indexExpression":{"id":2809,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"3771:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3762:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3780:6:11","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":3692,"src":"3762:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2812,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"3792:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":2813,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"3804:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2815,"indexExpression":{"id":2814,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"3813:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3804:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2816,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3822:6:11","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"3804:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2817,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"3834:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2818,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"3852:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2819,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"3865:5:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":2820,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"3876:11:11","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":2807,"name":"OrderCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3643,"src":"3744:12:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes32,uint256,string memory)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3744:148:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2822,"nodeType":"EmitStatement","src":"3739:153:11"}]},"documentation":{"id":2702,"nodeType":"StructuredDocumentation","src":"2464:39:11","text":"@dev See {createOrder-IGateway}. "},"functionSelector":"809804f7","id":2824,"implemented":true,"kind":"function","modifiers":[{"id":2719,"kind":"modifierInvocation","modifierName":{"id":2718,"name":"whenNotPaused","nameLocations":["2710:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":458,"src":"2710:13:11"},"nodeType":"ModifierInvocation","src":"2710:13:11"}],"name":"createOrder","nameLocation":"2515:11:11","nodeType":"FunctionDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2704,"mutability":"mutable","name":"_token","nameLocation":"2539:6:11","nodeType":"VariableDeclaration","scope":2824,"src":"2531:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2703,"name":"address","nodeType":"ElementaryTypeName","src":"2531:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2706,"mutability":"mutable","name":"_amount","nameLocation":"2558:7:11","nodeType":"VariableDeclaration","scope":2824,"src":"2550:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2705,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2708,"mutability":"mutable","name":"_rate","nameLocation":"2577:5:11","nodeType":"VariableDeclaration","scope":2824,"src":"2570:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2707,"name":"uint96","nodeType":"ElementaryTypeName","src":"2570:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":2710,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"2595:19:11","nodeType":"VariableDeclaration","scope":2824,"src":"2587:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2709,"name":"address","nodeType":"ElementaryTypeName","src":"2587:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2712,"mutability":"mutable","name":"_senderFee","nameLocation":"2627:10:11","nodeType":"VariableDeclaration","scope":2824,"src":"2619:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2711,"name":"uint256","nodeType":"ElementaryTypeName","src":"2619:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2714,"mutability":"mutable","name":"_refundAddress","nameLocation":"2650:14:11","nodeType":"VariableDeclaration","scope":2824,"src":"2642:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2713,"name":"address","nodeType":"ElementaryTypeName","src":"2642:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2716,"mutability":"mutable","name":"messageHash","nameLocation":"2685:11:11","nodeType":"VariableDeclaration","scope":2824,"src":"2669:27:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2715,"name":"string","nodeType":"ElementaryTypeName","src":"2669:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2526:174:11"},"returnParameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"orderId","nameLocation":"2741:7:11","nodeType":"VariableDeclaration","scope":2824,"src":"2733:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2733:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2732:17:11"},"scope":3437,"src":"2506:1391:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2869,"nodeType":"Block","src":"4504:176:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2845,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"4517:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4543:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4535:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2846,"name":"address","nodeType":"ElementaryTypeName","src":"4535:7:11","typeDescriptions":{}}},"id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4535:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4517:28:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4547:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":2844,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4509:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4509:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2853,"nodeType":"ExpressionStatement","src":"4509:57:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2854,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"4577:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4590:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4577:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2868,"nodeType":"IfStatement","src":"4573:103:11","trueBody":{"id":2867,"nodeType":"Block","src":"4593:83:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2858,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2833,"src":"4607:19:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4638:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4630:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2859,"name":"address","nodeType":"ElementaryTypeName","src":"4630:7:11","typeDescriptions":{}}},"id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4630:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4607:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696453656e646572466565526563697069656e74","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4642:27:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","typeString":"literal_string \"InvalidSenderFeeRecipient\""},"value":"InvalidSenderFeeRecipient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ffb69afb32cdb1c7026bbd5bf2be167eb8b698d96a6fa0abd73b70c43ca464b8","typeString":"literal_string \"InvalidSenderFeeRecipient\""}],"id":2857,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4599:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4599:71:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2866,"nodeType":"ExpressionStatement","src":"4599:71:11"}]}}]},"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"3902:395:11","text":" @dev Internal function to handle order creation.\n @param _token The address of the token being traded.\n @param _amount The amount of tokens being traded.\n @param _refundAddress The address to refund the tokens in case of cancellation.\n @param _senderFeeRecipient The address of the recipient for the sender fee.\n @param _senderFee The amount of the sender fee."},"id":2870,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2838,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"4468:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2839,"kind":"modifierInvocation","modifierName":{"id":2837,"name":"isTokenApproved","nameLocations":["4452:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":2667,"src":"4452:15:11"},"nodeType":"ModifierInvocation","src":"4452:23:11"},{"arguments":[{"id":2841,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"4490:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2842,"kind":"modifierInvocation","modifierName":{"id":2840,"name":"isValidAmount","nameLocations":["4476:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":2681,"src":"4476:13:11"},"nodeType":"ModifierInvocation","src":"4476:22:11"}],"name":"_handler","nameLocation":"4309:8:11","nodeType":"FunctionDefinition","parameters":{"id":2836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"mutability":"mutable","name":"_token","nameLocation":"4330:6:11","nodeType":"VariableDeclaration","scope":2870,"src":"4322:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"4322:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2829,"mutability":"mutable","name":"_amount","nameLocation":"4349:7:11","nodeType":"VariableDeclaration","scope":2870,"src":"4341:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"4341:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2831,"mutability":"mutable","name":"_refundAddress","nameLocation":"4369:14:11","nodeType":"VariableDeclaration","scope":2870,"src":"4361:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"4361:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2833,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4396:19:11","nodeType":"VariableDeclaration","scope":2870,"src":"4388:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2832,"name":"address","nodeType":"ElementaryTypeName","src":"4388:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2835,"mutability":"mutable","name":"_senderFee","nameLocation":"4428:10:11","nodeType":"VariableDeclaration","scope":2870,"src":"4420:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"4420:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4317:125:11"},"returnParameters":{"id":2843,"nodeType":"ParameterList","parameters":[],"src":"4504:0:11"},"scope":3437,"src":"4300:380:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3756],"body":{"id":3026,"nodeType":"Block","src":"5093:1469:11","statements":[{"expression":{"arguments":[{"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5158:31:11","subExpression":{"expression":{"baseExpression":{"id":2887,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5159:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2889,"indexExpression":{"id":2888,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5168:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5159:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2890,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5178:11:11","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3702,"src":"5159:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5191:16:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":2886,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5150:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5150:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2894,"nodeType":"ExpressionStatement","src":"5150:58:11"},{"expression":{"arguments":[{"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5221:30:11","subExpression":{"expression":{"baseExpression":{"id":2896,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5222:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2898,"indexExpression":{"id":2897,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5231:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5222:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5241:10:11","memberName":"isRefunded","nodeType":"MemberAccess","referencedDeclaration":3704,"src":"5222:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f72646572526566756e646564","id":2901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5253:15:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ab1527a936433fc64df27b599aa49d8cbaac3a88b1b3888cf4384b9e8bea9cd","typeString":"literal_string \"OrderRefunded\""},"value":"OrderRefunded"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ab1527a936433fc64df27b599aa49d8cbaac3a88b1b3888cf4384b9e8bea9cd","typeString":"literal_string \"OrderRefunded\""}],"id":2895,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5213:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5213:56:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2903,"nodeType":"ExpressionStatement","src":"5213:56:11"},{"assignments":[2905],"declarations":[{"constant":false,"id":2905,"mutability":"mutable","name":"token","nameLocation":"5317:5:11","nodeType":"VariableDeclaration","scope":3026,"src":"5309:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2904,"name":"address","nodeType":"ElementaryTypeName","src":"5309:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2910,"initialValue":{"expression":{"baseExpression":{"id":2906,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5325:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2908,"indexExpression":{"id":2907,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5334:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5325:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2909,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5344:5:11","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3694,"src":"5325:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5309:40:11"},{"expression":{"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2911,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5419:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2913,"indexExpression":{"id":2912,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5428:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5419:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2914,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5438:10:11","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"5419:29:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2915,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"5452:14:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5419:47:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":2917,"nodeType":"ExpressionStatement","src":"5419:47:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2918,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5477:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2920,"indexExpression":{"id":2919,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5486:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5477:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2921,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5496:10:11","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"5477:29:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5510:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5477:34:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2968,"nodeType":"IfStatement","src":"5473:494:11","trueBody":{"id":2967,"nodeType":"Block","src":"5513:454:11","statements":[{"expression":{"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2924,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5565:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2926,"indexExpression":{"id":2925,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5574:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5565:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5584:11:11","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3702,"src":"5565:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5598:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5565:37:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2930,"nodeType":"ExpressionStatement","src":"5565:37:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2931,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5614:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2933,"indexExpression":{"id":2932,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5623:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5614:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5633:9:11","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3698,"src":"5614:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5645:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5614:32:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2966,"nodeType":"IfStatement","src":"5610:350:11","trueBody":{"id":2965,"nodeType":"Block","src":"5648:312:11","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":2944,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5732:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2946,"indexExpression":{"id":2945,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5741:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5732:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5751:18:11","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":3696,"src":"5732:37:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":2948,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5777:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2950,"indexExpression":{"id":2949,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5786:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5777:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2951,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5796:9:11","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3698,"src":"5777:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":2938,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5690:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2940,"indexExpression":{"id":2939,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5699:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5690:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2941,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5709:5:11","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3694,"src":"5690:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2937,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"5683:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5683:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5716:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"5683:41:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5683:129:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2953,"nodeType":"ExpressionStatement","src":"5683:129:11"},{"eventCall":{"arguments":[{"expression":{"baseExpression":{"id":2955,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5873:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2957,"indexExpression":{"id":2956,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5882:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5873:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5892:18:11","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":3696,"src":"5873:37:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":2959,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"5918:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2961,"indexExpression":{"id":2960,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5927:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5918:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5937:9:11","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3698,"src":"5918:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2954,"name":"SenderFeeTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"5845:20:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5845:108:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2964,"nodeType":"EmitStatement","src":"5840:113:11"}]}}]}},{"assignments":[2970],"declarations":[{"constant":false,"id":2970,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"6018:23:11","nodeType":"VariableDeclaration","scope":3026,"src":"6010:31:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2969,"name":"uint256","nodeType":"ElementaryTypeName","src":"6010:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2980,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2971,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6045:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2973,"indexExpression":{"id":2972,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"6054:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6045:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2974,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6064:6:11","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"6045:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2975,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"6073:14:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6045:42:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2977,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6044:44:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2978,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"6091:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6044:54:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6010:88:11"},{"expression":{"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":2981,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6103:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":2983,"indexExpression":{"id":2982,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"6112:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6103:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":2984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6122:6:11","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"6103:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2985,"name":"liquidityProviderAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"6132:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6103:52:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2987,"nodeType":"ExpressionStatement","src":"6103:52:11"},{"assignments":[2989],"declarations":[{"constant":false,"id":2989,"mutability":"mutable","name":"protocolFee","nameLocation":"6170:11:11","nodeType":"VariableDeclaration","scope":3026,"src":"6162:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"6162:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2996,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2990,"name":"liquidityProviderAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"6185:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2991,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"6211:18:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6185:44:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6184:46:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2994,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"6233:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6184:56:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6162:78:11"},{"expression":{"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2997,"name":"liquidityProviderAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"6245:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2998,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"6272:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6245:38:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3000,"nodeType":"ExpressionStatement","src":"6245:38:11"},{"expression":{"arguments":[{"id":3005,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"6341:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3006,"name":"protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"6358:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3002,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"6325:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3001,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"6318:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6318:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6332:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"6318:22:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6318:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3008,"nodeType":"ExpressionStatement","src":"6318:52:11"},{"expression":{"arguments":[{"id":3013,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"6400:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3014,"name":"liquidityProviderAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"6411:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3010,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"6384:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3009,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"6377:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6377:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6391:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"6377:22:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6377:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3016,"nodeType":"ExpressionStatement","src":"6377:58:11"},{"eventCall":{"arguments":[{"id":3018,"name":"_splitOrderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"6488:13:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3019,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"6503:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3020,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2877,"src":"6513:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3021,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2879,"src":"6524:14:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3017,"name":"OrderSettledOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"6472:15:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,bytes32,address,uint96)"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6472:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3023,"nodeType":"EmitStatement","src":"6467:72:11"},{"expression":{"hexValue":"74727565","id":3024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6553:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2885,"id":3025,"nodeType":"Return","src":"6546:11:11"}]},"documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"4886:42:11","text":"@dev See {settleOrderOut-IGateway}. "},"functionSelector":"9a06601f","id":3027,"implemented":true,"kind":"function","modifiers":[{"id":2882,"kind":"modifierInvocation","modifierName":{"id":2881,"name":"onlyAggregator","nameLocations":["5063:14:11"],"nodeType":"IdentifierPath","referencedDeclaration":2651,"src":"5063:14:11"},"nodeType":"ModifierInvocation","src":"5063:14:11"}],"name":"settleOrderOut","nameLocation":"4940:14:11","nodeType":"FunctionDefinition","parameters":{"id":2880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2873,"mutability":"mutable","name":"_splitOrderId","nameLocation":"4967:13:11","nodeType":"VariableDeclaration","scope":3027,"src":"4959:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4959:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"_orderId","nameLocation":"4993:8:11","nodeType":"VariableDeclaration","scope":3027,"src":"4985:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4985:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2877,"mutability":"mutable","name":"_provider","nameLocation":"5014:9:11","nodeType":"VariableDeclaration","scope":3027,"src":"5006:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2876,"name":"address","nodeType":"ElementaryTypeName","src":"5006:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2879,"mutability":"mutable","name":"_settlePercent","nameLocation":"5035:14:11","nodeType":"VariableDeclaration","scope":3027,"src":"5028:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2878,"name":"uint64","nodeType":"ElementaryTypeName","src":"5028:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4954:99:11"},"returnParameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3027,"src":"5087:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2883,"name":"bool","nodeType":"ElementaryTypeName","src":"5087:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5086:6:11"},"scope":3437,"src":"4931:1631:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3766],"body":{"id":3132,"nodeType":"Block","src":"6701:891:11","statements":[{"expression":{"arguments":[{"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6766:31:11","subExpression":{"expression":{"baseExpression":{"id":3040,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6767:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3042,"indexExpression":{"id":3041,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"6776:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6767:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3043,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6786:11:11","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3702,"src":"6767:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6799:16:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3039,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6758:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6758:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3047,"nodeType":"ExpressionStatement","src":"6758:58:11"},{"expression":{"arguments":[{"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6829:30:11","subExpression":{"expression":{"baseExpression":{"id":3049,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6830:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3051,"indexExpression":{"id":3050,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"6839:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6830:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6849:10:11","memberName":"isRefunded","nodeType":"MemberAccess","referencedDeclaration":3704,"src":"6830:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f72646572526566756e646564","id":3054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6861:15:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ab1527a936433fc64df27b599aa49d8cbaac3a88b1b3888cf4384b9e8bea9cd","typeString":"literal_string \"OrderRefunded\""},"value":"OrderRefunded"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ab1527a936433fc64df27b599aa49d8cbaac3a88b1b3888cf4384b9e8bea9cd","typeString":"literal_string \"OrderRefunded\""}],"id":3048,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6821:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6821:56:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3056,"nodeType":"ExpressionStatement","src":"6821:56:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3058,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"6890:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3060,"indexExpression":{"id":3059,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"6899:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6890:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3061,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6909:11:11","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":3700,"src":"6890:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3062,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"6924:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6890:38:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4665654578636565647350726f746f636f6c466565","id":3064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6930:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c06b87282d804789c7604f19c70a4ed32c29ae2e290ed8b49435ec1484c8a5de","typeString":"literal_string \"FeeExceedsProtocolFee\""},"value":"FeeExceedsProtocolFee"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c06b87282d804789c7604f19c70a4ed32c29ae2e290ed8b49435ec1484c8a5de","typeString":"literal_string \"FeeExceedsProtocolFee\""}],"id":3057,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6882:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6882:72:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3066,"nodeType":"ExpressionStatement","src":"6882:72:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3067,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"6965:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6972:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6965:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3082,"nodeType":"IfStatement","src":"6961:133:11","trueBody":{"id":3081,"nodeType":"Block","src":"6975:119:11","statements":[{"expression":{"arguments":[{"id":3077,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"7066:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3078,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"7083:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3071,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7031:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3073,"indexExpression":{"id":3072,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7040:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7031:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7050:5:11","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3694,"src":"7031:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3070,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"7024:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7024:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7057:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"7024:41:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7024:64:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3080,"nodeType":"ExpressionStatement","src":"7024:64:11"}]}},{"expression":{"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3083,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7125:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3085,"indexExpression":{"id":3084,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7134:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7125:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3086,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7144:10:11","memberName":"isRefunded","nodeType":"MemberAccess","referencedDeclaration":3704,"src":"7125:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7157:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7125:36:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3089,"nodeType":"ExpressionStatement","src":"7125:36:11"},{"expression":{"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3090,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7166:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3092,"indexExpression":{"id":3091,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7175:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7166:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3093,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7185:10:11","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"7166:29:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7198:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7166:33:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3096,"nodeType":"ExpressionStatement","src":"7166:33:11"},{"assignments":[3098],"declarations":[{"constant":false,"id":3098,"mutability":"mutable","name":"refundAmount","nameLocation":"7249:12:11","nodeType":"VariableDeclaration","scope":3132,"src":"7241:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3097,"name":"uint256","nodeType":"ElementaryTypeName","src":"7241:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3105,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3099,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7264:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3101,"indexExpression":{"id":3100,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7273:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7264:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7283:6:11","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3710,"src":"7264:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3103,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"7292:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7264:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7241:55:11"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3113,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7416:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3115,"indexExpression":{"id":3114,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7425:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7416:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7435:13:11","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":3706,"src":"7416:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3117,"name":"refundAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"7454:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"baseExpression":{"id":3118,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7469:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3120,"indexExpression":{"id":3119,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7478:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7469:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7488:9:11","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3698,"src":"7469:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7454:43:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3107,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"7376:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3109,"indexExpression":{"id":3108,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7385:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7376:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"id":3110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7395:5:11","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3694,"src":"7376:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3106,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"7369:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7369:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7402:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"7369:41:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7369:133:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3124,"nodeType":"ExpressionStatement","src":"7369:133:11"},{"eventCall":{"arguments":[{"id":3126,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"7554:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3127,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"7560:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3125,"name":"OrderRefunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3661,"src":"7540:13:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32)"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7540:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3129,"nodeType":"EmitStatement","src":"7535:34:11"},{"expression":{"hexValue":"74727565","id":3130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7583:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3038,"id":3131,"nodeType":"Return","src":"7576:11:11"}]},"documentation":{"id":3028,"nodeType":"StructuredDocumentation","src":"6567:39:11","text":"@dev See {refundOrder-IGateway}. "},"functionSelector":"47b0f1cd","id":3133,"implemented":true,"kind":"function","modifiers":[{"id":3035,"kind":"modifierInvocation","modifierName":{"id":3034,"name":"onlyAggregator","nameLocations":["6671:14:11"],"nodeType":"IdentifierPath","referencedDeclaration":2651,"src":"6671:14:11"},"nodeType":"ModifierInvocation","src":"6671:14:11"}],"name":"refundOrder","nameLocation":"6618:11:11","nodeType":"FunctionDefinition","parameters":{"id":3033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"_fee","nameLocation":"6638:4:11","nodeType":"VariableDeclaration","scope":3133,"src":"6630:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3029,"name":"uint256","nodeType":"ElementaryTypeName","src":"6630:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3032,"mutability":"mutable","name":"_orderId","nameLocation":"6652:8:11","nodeType":"VariableDeclaration","scope":3133,"src":"6644:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3031,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6644:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6629:32:11"},"returnParameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3133,"src":"6695:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3036,"name":"bool","nodeType":"ElementaryTypeName","src":"6695:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6694:6:11"},"scope":3437,"src":"6609:983:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3776],"body":{"id":3182,"nodeType":"Block","src":"8291:200:11","statements":[{"assignments":[3150],"declarations":[{"constant":false,"id":3150,"mutability":"mutable","name":"sender","nameLocation":"8304:6:11","nodeType":"VariableDeclaration","scope":3182,"src":"8296:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3149,"name":"address","nodeType":"ElementaryTypeName","src":"8296:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3153,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3151,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"8313:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8313:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8296:29:11"},{"expression":{"arguments":[{"id":3158,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"8358:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3161,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8374:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_Gateway_$3437","typeString":"contract Gateway"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Gateway_$3437","typeString":"contract Gateway"}],"id":3160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8366:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3159,"name":"address","nodeType":"ElementaryTypeName","src":"8366:7:11","typeDescriptions":{}}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8366:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3163,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"8381:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3155,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"8337:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3154,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"8330:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8330:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8345:12:11","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":994,"src":"8330:27:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8330:59:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3165,"nodeType":"ExpressionStatement","src":"8330:59:11"},{"expression":{"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3166,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"8394:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3169,"indexExpression":{"id":3167,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"8402:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8394:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3170,"indexExpression":{"id":3168,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"8410:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8394:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3171,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"8421:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8394:34:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3173,"nodeType":"ExpressionStatement","src":"8394:34:11"},{"eventCall":{"arguments":[{"id":3175,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"8446:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3176,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"8454:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3177,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"8462:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3174,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"8438:7:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8438:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3179,"nodeType":"EmitStatement","src":"8433:37:11"},{"expression":{"hexValue":"74727565","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8482:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3148,"id":3181,"nodeType":"Return","src":"8475:11:11"}]},"documentation":{"id":3134,"nodeType":"StructuredDocumentation","src":"7597:570:11","text":"@dev See {deposit-IGateway}. \n enables providers to deposit tokens into the contract\n @param _token The address of the token to be deposited.\n @param _amount The amount of tokens to be deposited.\n Requirements:\n - The token must be supported.\n - The amount must be greater than 0.\n - The contract must have sufficient allowance to transfer the tokens.\n - The contract must have sufficient balance to store the tokens.\n Emits a {Deposit} event.\n Returns a boolean value indicating whether the deposit was successful.\n "},"functionSelector":"47e7ef24","id":3183,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3141,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"8245:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3142,"kind":"modifierInvocation","modifierName":{"id":3140,"name":"isTokenApproved","nameLocations":["8229:15:11"],"nodeType":"IdentifierPath","referencedDeclaration":2667,"src":"8229:15:11"},"nodeType":"ModifierInvocation","src":"8229:23:11"},{"arguments":[{"id":3144,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"8267:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3145,"kind":"modifierInvocation","modifierName":{"id":3143,"name":"isValidAmount","nameLocations":["8253:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":2681,"src":"8253:13:11"},"nodeType":"ModifierInvocation","src":"8253:22:11"}],"name":"deposit","nameLocation":"8179:7:11","nodeType":"FunctionDefinition","parameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"_token","nameLocation":"8195:6:11","nodeType":"VariableDeclaration","scope":3183,"src":"8187:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3135,"name":"address","nodeType":"ElementaryTypeName","src":"8187:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"_amount","nameLocation":"8211:7:11","nodeType":"VariableDeclaration","scope":3183,"src":"8203:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3137,"name":"uint256","nodeType":"ElementaryTypeName","src":"8203:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8186:33:11"},"returnParameters":{"id":3148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3183,"src":"8285:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3146,"name":"bool","nodeType":"ElementaryTypeName","src":"8285:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8284:6:11"},"scope":3437,"src":"8170:321:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3792],"body":{"id":3345,"nodeType":"Block","src":"9190:1746:11","statements":[{"expression":{"arguments":[{"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9209:26:11","subExpression":{"baseExpression":{"id":3205,"name":"processedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9210:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3207,"indexExpression":{"id":3206,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"9226:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9210:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657220616c72656164792070726f636573736564","id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9237:25:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_50309b889a14a3f657761c6864adeb70c524d43377bdaca3f22ab423d86447b4","typeString":"literal_string \"Order already processed\""},"value":"Order already processed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50309b889a14a3f657761c6864adeb70c524d43377bdaca3f22ab423d86447b4","typeString":"literal_string \"Order already processed\""}],"id":3204,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9201:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9201:62:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3211,"nodeType":"ExpressionStatement","src":"9201:62:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3213,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"9276:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9297:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9289:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3214,"name":"address","nodeType":"ElementaryTypeName","src":"9289:7:11","typeDescriptions":{}}},"id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9289:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9276:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642070726f76696465722061646472657373","id":3219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9301:26:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_4bcfdad90cbd61c8c5caa292df03d86574ade1e344f67f3d41fe4d00b98774fc","typeString":"literal_string \"Invalid provider address\""},"value":"Invalid provider address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4bcfdad90cbd61c8c5caa292df03d86574ade1e344f67f3d41fe4d00b98774fc","typeString":"literal_string \"Invalid provider address\""}],"id":3212,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9268:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9268:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3221,"nodeType":"ExpressionStatement","src":"9268:60:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3223,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"9341:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9352:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3224,"name":"address","nodeType":"ElementaryTypeName","src":"9352:7:11","typeDescriptions":{}}},"id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9352:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9341:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642073656e6465722061646472657373","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9364:24:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c845f72fb5ceabb4d59b1044b79383c237f22ad0b30dc4f9927ab91356d3d20f","typeString":"literal_string \"Invalid sender address\""},"value":"Invalid sender address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c845f72fb5ceabb4d59b1044b79383c237f22ad0b30dc4f9927ab91356d3d20f","typeString":"literal_string \"Invalid sender address\""}],"id":3222,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9333:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9333:56:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3231,"nodeType":"ExpressionStatement","src":"9333:56:11"},{"assignments":[3233],"declarations":[{"constant":false,"id":3233,"mutability":"mutable","name":"messageHash","nameLocation":"9542:11:11","nodeType":"VariableDeclaration","scope":3345,"src":"9534:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9534:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3244,"initialValue":{"arguments":[{"arguments":[{"id":3237,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"9583:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3238,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"9593:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3239,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"9604:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3240,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"9613:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3241,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"9621:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3235,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9566:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9570:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"9566:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9566:63:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3234,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9556:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9556:74:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9534:96:11"},{"assignments":[3246],"declarations":[{"constant":false,"id":3246,"mutability":"mutable","name":"ethSignedMessageHash","nameLocation":"9751:20:11","nodeType":"VariableDeclaration","scope":3345,"src":"9743:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9743:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3250,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3247,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"9774:11:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9786:22:11","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":1535,"src":"9774:34:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9774:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9743:67:11"},{"assignments":[3252],"declarations":[{"constant":false,"id":3252,"mutability":"mutable","name":"recoveredAddress","nameLocation":"9948:16:11","nodeType":"VariableDeclaration","scope":3345,"src":"9940:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3251,"name":"address","nodeType":"ElementaryTypeName","src":"9940:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3257,"initialValue":{"arguments":[{"id":3255,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"9996:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3253,"name":"ethSignedMessageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"9967:20:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9988:7:11","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1351,"src":"9967:28:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9967:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9940:67:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3259,"name":"recoveredAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"10026:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3260,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"10046:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10026:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207369676e6174757265","id":3262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10057:19:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7","typeString":"literal_string \"Invalid signature\""},"value":"Invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4f2d7dfcb27c0aafa13ae8c400de482c7832204d194018b6e45bd2bf244c74e7","typeString":"literal_string \"Invalid signature\""}],"id":3258,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10018:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10018:59:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3264,"nodeType":"ExpressionStatement","src":"10018:59:11"},{"assignments":[3266],"declarations":[{"constant":false,"id":3266,"mutability":"mutable","name":"_protocolFee","nameLocation":"10090:12:11","nodeType":"VariableDeclaration","scope":3345,"src":"10082:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3265,"name":"uint256","nodeType":"ElementaryTypeName","src":"10082:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3273,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3267,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"10106:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3268,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"10116:18:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"10106:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3270,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10105:30:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3271,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"10138:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10105:40:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10082:63:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":3275,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"10279:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3277,"indexExpression":{"id":3276,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"10287:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10279:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3279,"indexExpression":{"id":3278,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"10295:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10279:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3280,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"10309:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3281,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"10319:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10309:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10279:52:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10333:22:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":3274,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10271:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10271:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3286,"nodeType":"ExpressionStatement","src":"10271:85:11"},{"expression":{"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3287,"name":"processedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"10405:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3289,"indexExpression":{"id":3288,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"10421:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10405:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10433:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10405:32:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3292,"nodeType":"ExpressionStatement","src":"10405:32:11"},{"expression":{"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3293,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"10478:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3296,"indexExpression":{"id":3294,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"10486:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10478:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3297,"indexExpression":{"id":3295,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"10494:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10478:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3298,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"10509:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3299,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"10519:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10509:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10508:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10478:54:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3303,"nodeType":"ExpressionStatement","src":"10478:54:11"},{"expression":{"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3304,"name":"orderIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"10539:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderIn_$3722_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderIn storage ref)"}},"id":3306,"indexExpression":{"id":3305,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"10547:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10539:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_storage","typeString":"struct IGateway.OrderIn storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3308,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"10581:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3309,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"10604:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3310,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"10627:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3311,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"10647:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3312,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"10668:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3307,"name":"OrderIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"10559:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_OrderIn_$3722_storage_ptr_$","typeString":"type(struct IGateway.OrderIn storage pointer)"}},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["10573:6:11","10594:8:11","10619:6:11","10640:5:11","10659:7:11"],"names":["amount","provider","sender","token","orderId"],"nodeType":"FunctionCall","src":"10559:123:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_memory_ptr","typeString":"struct IGateway.OrderIn memory"}},"src":"10539:143:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_storage","typeString":"struct IGateway.OrderIn storage ref"}},"id":3315,"nodeType":"ExpressionStatement","src":"10539:143:11"},{"expression":{"arguments":[{"id":3320,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"10740:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3321,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"10749:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3317,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"10723:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3316,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10716:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10716:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10731:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"10716:23:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10716:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3323,"nodeType":"ExpressionStatement","src":"10716:41:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3324,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"10766:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10781:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10766:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3336,"nodeType":"IfStatement","src":"10762:88:11","trueBody":{"id":3335,"nodeType":"Block","src":"10784:66:11","statements":[{"expression":{"arguments":[{"id":3331,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"10814:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3332,"name":"_protocolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"10831:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3328,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"10797:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3327,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"10790:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$995_$","typeString":"type(contract IERC20)"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10790:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$995","typeString":"contract IERC20"}},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10805:8:11","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":962,"src":"10790:23:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10790:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3334,"nodeType":"ExpressionStatement","src":"10790:54:11"}]}},{"eventCall":{"arguments":[{"id":3338,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"10882:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3339,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"10893:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3340,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"10902:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3341,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"10911:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3342,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"10919:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3337,"name":"OrderSettledIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"10867:14:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,address,bytes32)"}},"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10867:61:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3344,"nodeType":"EmitStatement","src":"10862:66:11"}]},"documentation":{"id":3184,"nodeType":"StructuredDocumentation","src":"8496:445:11","text":"@dev See {settledOrderIn-IGateway}. \n enables providers to settle orders in\n @param _orderId The ID of the order to be settled.\n @param _signature The signature of the order.\n @param _provider The address of the provider.\n @param _sender The address of the sender i.e. the user that created the order.\n @param _token The address of the token to be settled.\n @param _amount The amount of tokens to be settled."},"functionSelector":"b682b667","id":3346,"implemented":true,"kind":"function","modifiers":[{"id":3199,"kind":"modifierInvocation","modifierName":{"id":3198,"name":"onlyAggregator","nameLocations":["9152:14:11"],"nodeType":"IdentifierPath","referencedDeclaration":2651,"src":"9152:14:11"},"nodeType":"ModifierInvocation","src":"9152:14:11"},{"arguments":[{"id":3201,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"9181:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3202,"kind":"modifierInvocation","modifierName":{"id":3200,"name":"isValidAmount","nameLocations":["9167:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":2681,"src":"9167:13:11"},"nodeType":"ModifierInvocation","src":"9167:22:11"}],"name":"settleOrderIn","nameLocation":"8956:13:11","nodeType":"FunctionDefinition","parameters":{"id":3197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3186,"mutability":"mutable","name":"_orderId","nameLocation":"8988:8:11","nodeType":"VariableDeclaration","scope":3346,"src":"8980:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8980:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3188,"mutability":"mutable","name":"_signature","nameLocation":"9020:10:11","nodeType":"VariableDeclaration","scope":3346,"src":"9007:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3187,"name":"bytes","nodeType":"ElementaryTypeName","src":"9007:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3190,"mutability":"mutable","name":"_provider","nameLocation":"9049:9:11","nodeType":"VariableDeclaration","scope":3346,"src":"9041:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3189,"name":"address","nodeType":"ElementaryTypeName","src":"9041:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3192,"mutability":"mutable","name":"_sender","nameLocation":"9077:7:11","nodeType":"VariableDeclaration","scope":3346,"src":"9069:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3191,"name":"address","nodeType":"ElementaryTypeName","src":"9069:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3194,"mutability":"mutable","name":"_token","nameLocation":"9103:6:11","nodeType":"VariableDeclaration","scope":3346,"src":"9095:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3193,"name":"address","nodeType":"ElementaryTypeName","src":"9095:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3196,"mutability":"mutable","name":"_amount","nameLocation":"9128:7:11","nodeType":"VariableDeclaration","scope":3346,"src":"9120:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3195,"name":"uint256","nodeType":"ElementaryTypeName","src":"9120:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8969:173:11"},"returnParameters":{"id":3203,"nodeType":"ParameterList","parameters":[],"src":"9190:0:11"},"scope":3437,"src":"8947:1989:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3809],"body":{"id":3359,"nodeType":"Block","src":"11261:35:11","statements":[{"expression":{"baseExpression":{"id":3355,"name":"orderOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2590,"src":"11273:8:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderOut_$3711_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderOut storage ref)"}},"id":3357,"indexExpression":{"id":3356,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"11282:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11273:18:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage","typeString":"struct IGateway.OrderOut storage ref"}},"functionReturnParameters":3354,"id":3358,"nodeType":"Return","src":"11266:25:11"}]},"documentation":{"id":3347,"nodeType":"StructuredDocumentation","src":"11132:43:11","text":"@dev See {getOrderInfoOut-IGateway}. "},"functionSelector":"9bb39e13","id":3360,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfoOut","nameLocation":"11187:15:11","nodeType":"FunctionDefinition","parameters":{"id":3350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3349,"mutability":"mutable","name":"_orderId","nameLocation":"11211:8:11","nodeType":"VariableDeclaration","scope":3360,"src":"11203:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11203:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11202:18:11"},"returnParameters":{"id":3354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3360,"src":"11244:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_memory_ptr","typeString":"struct IGateway.OrderOut"},"typeName":{"id":3352,"nodeType":"UserDefinedTypeName","pathNode":{"id":3351,"name":"OrderOut","nameLocations":["11244:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":3711,"src":"11244:8:11"},"referencedDeclaration":3711,"src":"11244:8:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage_ptr","typeString":"struct IGateway.OrderOut"}},"visibility":"internal"}],"src":"11243:17:11"},"scope":3437,"src":"11178:118:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3818],"body":{"id":3373,"nodeType":"Block","src":"11427:34:11","statements":[{"expression":{"baseExpression":{"id":3369,"name":"orderIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"11439:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_OrderIn_$3722_storage_$","typeString":"mapping(bytes32 => struct IGateway.OrderIn storage ref)"}},"id":3371,"indexExpression":{"id":3370,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11447:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11439:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_storage","typeString":"struct IGateway.OrderIn storage ref"}},"functionReturnParameters":3368,"id":3372,"nodeType":"Return","src":"11432:24:11"}]},"documentation":{"id":3361,"nodeType":"StructuredDocumentation","src":"11301:42:11","text":"@dev See {getOrderInfoIn-IGateway}. "},"functionSelector":"9c0fea2c","id":3374,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfoIn","nameLocation":"11355:14:11","nodeType":"FunctionDefinition","parameters":{"id":3364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3363,"mutability":"mutable","name":"_orderId","nameLocation":"11378:8:11","nodeType":"VariableDeclaration","scope":3374,"src":"11370:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11370:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11369:18:11"},"returnParameters":{"id":3368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3374,"src":"11411:14:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_memory_ptr","typeString":"struct IGateway.OrderIn"},"typeName":{"id":3366,"nodeType":"UserDefinedTypeName","pathNode":{"id":3365,"name":"OrderIn","nameLocations":["11411:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3722,"src":"11411:7:11"},"referencedDeclaration":3722,"src":"11411:7:11","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_storage_ptr","typeString":"struct IGateway.OrderIn"}},"visibility":"internal"}],"src":"11410:16:11"},"scope":3437,"src":"11346:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3800],"body":{"id":3392,"nodeType":"Block","src":"11584:74:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3382,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"11593:17:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3384,"indexExpression":{"id":3383,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"11611:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11593:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11622:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11593:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3389,"nodeType":"IfStatement","src":"11589:47:11","trueBody":{"expression":{"hexValue":"74727565","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11632:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3381,"id":3388,"nodeType":"Return","src":"11625:11:11"}},{"expression":{"hexValue":"66616c7365","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11648:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3381,"id":3391,"nodeType":"Return","src":"11641:12:11"}]},"documentation":{"id":3375,"nodeType":"StructuredDocumentation","src":"11466:44:11","text":"@dev See {isTokenSupported-IGateway}. "},"functionSelector":"75151b63","id":3393,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"11522:16:11","nodeType":"FunctionDefinition","parameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"_token","nameLocation":"11547:6:11","nodeType":"VariableDeclaration","scope":3393,"src":"11539:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"11539:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11538:16:11"},"returnParameters":{"id":3381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3393,"src":"11578:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3379,"name":"bool","nodeType":"ElementaryTypeName","src":"11578:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11577:6:11"},"scope":3437,"src":"11513:145:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3826],"body":{"id":3405,"nodeType":"Block","src":"11772:46:11","statements":[{"expression":{"components":[{"id":3401,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"11785:18:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3402,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"11805:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3403,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11784:29:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint256_$","typeString":"tuple(uint64,uint256)"}},"functionReturnParameters":3400,"id":3404,"nodeType":"Return","src":"11777:36:11"}]},"documentation":{"id":3394,"nodeType":"StructuredDocumentation","src":"11663:41:11","text":"@dev See {getFeeDetails-IGateway}. "},"functionSelector":"b810c636","id":3406,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"11716:13:11","nodeType":"FunctionDefinition","parameters":{"id":3395,"nodeType":"ParameterList","parameters":[],"src":"11729:2:11"},"returnParameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3406,"src":"11755:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3396,"name":"uint64","nodeType":"ElementaryTypeName","src":"11755:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3406,"src":"11763:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3398,"name":"uint256","nodeType":"ElementaryTypeName","src":"11763:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11754:17:11"},"scope":3437,"src":"11707:111:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3836],"body":{"id":3422,"nodeType":"Block","src":"11951:43:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3416,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"11963:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3418,"indexExpression":{"id":3417,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"11971:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11963:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3420,"indexExpression":{"id":3419,"name":"_provider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"11979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11963:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3415,"id":3421,"nodeType":"Return","src":"11956:33:11"}]},"documentation":{"id":3407,"nodeType":"StructuredDocumentation","src":"11823:38:11","text":"@dev See {getBalance-IGateway}. "},"functionSelector":"d4fac45d","id":3423,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"11873:10:11","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"_token","nameLocation":"11892:6:11","nodeType":"VariableDeclaration","scope":3423,"src":"11884:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3408,"name":"address","nodeType":"ElementaryTypeName","src":"11884:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"_provider","nameLocation":"11908:9:11","nodeType":"VariableDeclaration","scope":3423,"src":"11900:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3410,"name":"address","nodeType":"ElementaryTypeName","src":"11900:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11883:35:11"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3423,"src":"11942:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"11942:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11941:9:11"},"scope":3437,"src":"11864:130:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3844],"body":{"id":3435,"nodeType":"Block","src":"12113:42:11","statements":[{"expression":{"baseExpression":{"id":3431,"name":"processedOrders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"12125:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3433,"indexExpression":{"id":3432,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3426,"src":"12141:8:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12125:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3430,"id":3434,"nodeType":"Return","src":"12118:32:11"}]},"documentation":{"id":3424,"nodeType":"StructuredDocumentation","src":"11999:38:11","text":"See {isOrderProcessed-IGateway} "},"functionSelector":"00b727da","id":3436,"implemented":true,"kind":"function","modifiers":[],"name":"isOrderProcessed","nameLocation":"12049:16:11","nodeType":"FunctionDefinition","parameters":{"id":3427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"_orderId","nameLocation":"12074:8:11","nodeType":"VariableDeclaration","scope":3436,"src":"12066:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3425,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12066:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12065:18:11"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3436,"src":"12107:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3428,"name":"bool","nodeType":"ElementaryTypeName","src":"12107:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12106:6:11"},"scope":3437,"src":"12040:115:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3438,"src":"466:11692:11","usedErrors":[]}],"src":"40:12120:11"},"id":11},"contracts/GatewaySettingManager.sol":{"ast":{"absolutePath":"contracts/GatewaySettingManager.sol","exportedSymbols":{"ContextUpgradeable":[917],"GatewaySettingManager":[3621],"Initializable":[408],"Ownable2StepUpgradeable":[106],"OwnableUpgradeable":[239]},"id":3622,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3439,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"168:24:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","id":3440,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3622,"sourceUnit":107,"src":"194:80:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3441,"name":"Ownable2StepUpgradeable","nameLocations":["310:23:12"],"nodeType":"IdentifierPath","referencedDeclaration":106,"src":"310:23:12"},"id":3442,"nodeType":"InheritanceSpecifier","src":"310:23:12"}],"canonicalName":"GatewaySettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3621,"linearizedBaseContracts":[3621,106,239,917,408],"name":"GatewaySettingManager","nameLocation":"285:21:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3444,"mutability":"mutable","name":"MAX_BPS","nameLocation":"354:7:12","nodeType":"VariableDeclaration","scope":3621,"src":"337:24:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3443,"name":"uint256","nodeType":"ElementaryTypeName","src":"337:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3446,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"380:18:12","nodeType":"VariableDeclaration","scope":3621,"src":"364:34:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3445,"name":"uint64","nodeType":"ElementaryTypeName","src":"364:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3448,"mutability":"mutable","name":"treasuryAddress","nameLocation":"418:15:12","nodeType":"VariableDeclaration","scope":3621,"src":"401:32:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3447,"name":"address","nodeType":"ElementaryTypeName","src":"401:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3450,"mutability":"mutable","name":"_aggregatorAddress","nameLocation":"453:18:12","nodeType":"VariableDeclaration","scope":3621,"src":"436:35:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3449,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3454,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"511:17:12","nodeType":"VariableDeclaration","scope":3621,"src":"474:54:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3453,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3451,"name":"address","nodeType":"ElementaryTypeName","src":"482:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"474:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3452,"name":"uint256","nodeType":"ElementaryTypeName","src":"493:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"__gap","nameLocation":"658:5:12","nodeType":"VariableDeclaration","scope":3621,"src":"638:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"638:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3457,"length":{"hexValue":"3530","id":3456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"646:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"638:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"anonymous":false,"eventSelector":"cfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c","id":3466,"name":"SettingManagerBool","nameLocation":"674:18:12","nodeType":"EventDefinition","parameters":{"id":3465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"indexed":true,"mutability":"mutable","name":"what","nameLocation":"709:4:12","nodeType":"VariableDeclaration","scope":3466,"src":"693:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"693:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3462,"indexed":true,"mutability":"mutable","name":"value","nameLocation":"731:5:12","nodeType":"VariableDeclaration","scope":3466,"src":"715:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3461,"name":"address","nodeType":"ElementaryTypeName","src":"715:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3464,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"746:6:12","nodeType":"VariableDeclaration","scope":3466,"src":"738:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3463,"name":"uint256","nodeType":"ElementaryTypeName","src":"738:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"692:61:12"},"src":"668:86:12"},{"anonymous":false,"eventSelector":"1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b","id":3470,"name":"ProtocolFeeUpdated","nameLocation":"762:18:12","nodeType":"EventDefinition","parameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"788:11:12","nodeType":"VariableDeclaration","scope":3470,"src":"781:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3467,"name":"uint64","nodeType":"ElementaryTypeName","src":"781:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"780:20:12"},"src":"756:45:12"},{"anonymous":false,"eventSelector":"bbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4","id":3476,"name":"ProtocolAddressUpdated","nameLocation":"809:22:12","nodeType":"EventDefinition","parameters":{"id":3475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3472,"indexed":true,"mutability":"mutable","name":"what","nameLocation":"848:4:12","nodeType":"VariableDeclaration","scope":3476,"src":"832:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3471,"name":"bytes32","nodeType":"ElementaryTypeName","src":"832:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3474,"indexed":true,"mutability":"mutable","name":"treasuryAddress","nameLocation":"870:15:12","nodeType":"VariableDeclaration","scope":3476,"src":"854:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3473,"name":"address","nodeType":"ElementaryTypeName","src":"854:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:55:12"},"src":"803:84:12"},{"anonymous":false,"eventSelector":"2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73","id":3480,"name":"SetFeeRecipient","nameLocation":"895:15:12","nodeType":"EventDefinition","parameters":{"id":3479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3478,"indexed":true,"mutability":"mutable","name":"treasuryAddress","nameLocation":"927:15:12","nodeType":"VariableDeclaration","scope":3480,"src":"911:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3477,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"910:33:12"},"src":"889:55:12"},{"body":{"id":3530,"nodeType":"Block","src":"1518:243:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"1530:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1547:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1539:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3494,"name":"address","nodeType":"ElementaryTypeName","src":"1539:7:12","typeDescriptions":{}}},"id":3497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1539:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1530:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"476174657761793a207a65726f2061646472657373","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1551:23:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ed1b610c65ae67667a8e3cd9480c209600a6bf02b22b4af311243c2e6c74caf","typeString":"literal_string \"Gateway: zero address\""},"value":"Gateway: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ed1b610c65ae67667a8e3cd9480c209600a6bf02b22b4af311243c2e6c74caf","typeString":"literal_string \"Gateway: zero address\""}],"id":3492,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1522:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1522:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3501,"nodeType":"ExpressionStatement","src":"1522:53:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3503,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"1587:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1597:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1587:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3506,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"1602:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1612:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1602:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1587:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"476174657761793a20696e76616c696420737461747573","id":3510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1615:25:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8363ef1a03c6ce5789016e221f816fab24945c59c2f0126d3b368bfc57b03338","typeString":"literal_string \"Gateway: invalid status\""},"value":"Gateway: invalid status"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8363ef1a03c6ce5789016e221f816fab24945c59c2f0126d3b368bfc57b03338","typeString":"literal_string \"Gateway: invalid status\""}],"id":3502,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1579:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:62:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3512,"nodeType":"ExpressionStatement","src":"1579:62:12"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3513,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"1649:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":3514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1657:7:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"1649:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3529,"nodeType":"IfStatement","src":"1645:113:12","trueBody":{"id":3528,"nodeType":"Block","src":"1666:92:12","statements":[{"expression":{"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3516,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"1671:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3518,"indexExpression":{"id":3517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"1689:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1671:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3519,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"1698:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1671:33:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3521,"nodeType":"ExpressionStatement","src":"1671:33:12"},{"eventCall":{"arguments":[{"id":3523,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"1733:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3524,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"1739:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3525,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"1746:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3522,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3466,"src":"1714:18:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256)"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1714:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3527,"nodeType":"EmitStatement","src":"1709:44:12"}]}}]},"documentation":{"id":3481,"nodeType":"StructuredDocumentation","src":"1141:283:12","text":" @dev Sets the boolean value for a specific setting.\n @param what The setting to be updated.\n @param value The address or value associated with the setting.\n @param status The boolean value to be set.\n Requirements:\n - The value must not be a zero address."},"functionSelector":"cd992400","id":3531,"implemented":true,"kind":"function","modifiers":[{"id":3490,"kind":"modifierInvocation","modifierName":{"id":3489,"name":"onlyOwner","nameLocations":["1508:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"1508:9:12"},"nodeType":"ModifierInvocation","src":"1508:9:12"}],"name":"settingManagerBool","nameLocation":"1435:18:12","nodeType":"FunctionDefinition","parameters":{"id":3488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3483,"mutability":"mutable","name":"what","nameLocation":"1462:4:12","nodeType":"VariableDeclaration","scope":3531,"src":"1454:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1454:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3485,"mutability":"mutable","name":"value","nameLocation":"1476:5:12","nodeType":"VariableDeclaration","scope":3531,"src":"1468:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3484,"name":"address","nodeType":"ElementaryTypeName","src":"1468:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3487,"mutability":"mutable","name":"status","nameLocation":"1491:6:12","nodeType":"VariableDeclaration","scope":3531,"src":"1483:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3486,"name":"uint256","nodeType":"ElementaryTypeName","src":"1483:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1453:45:12"},"returnParameters":{"id":3491,"nodeType":"ParameterList","parameters":[],"src":"1518:0:12"},"scope":3621,"src":"1426:335:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3547,"nodeType":"Block","src":"1968:96:12","statements":[{"expression":{"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3539,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"1972:18:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3540,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"1993:19:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1972:40:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3542,"nodeType":"ExpressionStatement","src":"1972:40:12"},{"eventCall":{"arguments":[{"id":3544,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"2040:19:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3543,"name":"ProtocolFeeUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"2021:18:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2021:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3546,"nodeType":"EmitStatement","src":"2016:44:12"}]},"documentation":{"id":3532,"nodeType":"StructuredDocumentation","src":"1764:128:12","text":" @dev Updates the protocol fee percentage.\n @param _protocolFeePercent The new protocol fee percentage to be set."},"functionSelector":"47094e2e","id":3548,"implemented":true,"kind":"function","modifiers":[{"id":3537,"kind":"modifierInvocation","modifierName":{"id":3536,"name":"onlyOwner","nameLocations":["1958:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"1958:9:12"},"nodeType":"ModifierInvocation","src":"1958:9:12"}],"name":"updateProtocolFee","nameLocation":"1903:17:12","nodeType":"FunctionDefinition","parameters":{"id":3535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3534,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"1928:19:12","nodeType":"VariableDeclaration","scope":3548,"src":"1921:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3533,"name":"uint64","nodeType":"ElementaryTypeName","src":"1921:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1920:28:12"},"returnParameters":{"id":3538,"nodeType":"ParameterList","parameters":[],"src":"1968:0:12"},"scope":3621,"src":"1894:170:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3619,"nodeType":"Block","src":"2372:472:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2384:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2401:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2393:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"2393:7:12","typeDescriptions":{}}},"id":3563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2393:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2384:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"476174657761793a207a65726f2061646472657373","id":3565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2405:23:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ed1b610c65ae67667a8e3cd9480c209600a6bf02b22b4af311243c2e6c74caf","typeString":"literal_string \"Gateway: zero address\""},"value":"Gateway: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ed1b610c65ae67667a8e3cd9480c209600a6bf02b22b4af311243c2e6c74caf","typeString":"literal_string \"Gateway: zero address\""}],"id":3558,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2376:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3567,"nodeType":"ExpressionStatement","src":"2376:53:12"},{"assignments":[3569],"declarations":[{"constant":false,"id":3569,"mutability":"mutable","name":"updated","nameLocation":"2438:7:12","nodeType":"VariableDeclaration","scope":3619,"src":"2433:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3568,"name":"bool","nodeType":"ElementaryTypeName","src":"2433:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3570,"nodeType":"VariableDeclarationStatement","src":"2433:12:12"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3571,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"2453:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"7472656173757279","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2461:10:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_cbd818ad4dd6f1ff9338c2bb62480241424dd9a65f9f3284101a01cd099ad8ac","typeString":"literal_string \"treasury\""},"value":"treasury"},"src":"2453:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3590,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"2614:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"61676772656761746f72","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2622:12:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_e124d7cc79a19705865fa21b784ba187cd393559e960c0c071132cb60354d1a3","typeString":"literal_string \"aggregator\""},"value":"aggregator"},"src":"2614:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3609,"nodeType":"IfStatement","src":"2610:165:12","trueBody":{"id":3608,"nodeType":"Block","src":"2636:139:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3594,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"2649:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2671:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2649:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"476174657761793a2061676772656761746f72206164647265737320616c726561647920736574","id":3597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2678:41:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_df54c347a849fd7dd0b01f92bc3efd917cd7e26dbe67aebf880d956b8dc0bca4","typeString":"literal_string \"Gateway: aggregator address already set\""},"value":"Gateway: aggregator address already set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df54c347a849fd7dd0b01f92bc3efd917cd7e26dbe67aebf880d956b8dc0bca4","typeString":"literal_string \"Gateway: aggregator address already set\""}],"id":3593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2641:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:79:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3599,"nodeType":"ExpressionStatement","src":"2641:79:12"},{"expression":{"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3600,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"2725:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2746:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2725:26:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3603,"nodeType":"ExpressionStatement","src":"2725:26:12"},{"expression":{"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3604,"name":"updated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"2756:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2766:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2756:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3607,"nodeType":"ExpressionStatement","src":"2756:14:12"}]}},"id":3610,"nodeType":"IfStatement","src":"2449:326:12","trueBody":{"id":3589,"nodeType":"Block","src":"2473:131:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3575,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"2486:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3576,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2505:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2486:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"476174657761793a207472656173757279206164647265737320616c726561647920736574","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2512:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_b6e1af8cead2910a847eecbe92be55c8397880e12250986fbcac76421d557ead","typeString":"literal_string \"Gateway: treasury address already set\""},"value":"Gateway: treasury address already set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b6e1af8cead2910a847eecbe92be55c8397880e12250986fbcac76421d557ead","typeString":"literal_string \"Gateway: treasury address already set\""}],"id":3574,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2478:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2478:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3580,"nodeType":"ExpressionStatement","src":"2478:74:12"},{"expression":{"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3581,"name":"treasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"2557:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2575:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2557:23:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3584,"nodeType":"ExpressionStatement","src":"2557:23:12"},{"expression":{"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3585,"name":"updated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"2585:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2595:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2585:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3588,"nodeType":"ExpressionStatement","src":"2585:14:12"}]}},{"condition":{"id":3611,"name":"updated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"2782:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3618,"nodeType":"IfStatement","src":"2778:63:12","trueBody":{"id":3617,"nodeType":"Block","src":"2791:50:12","statements":[{"eventCall":{"arguments":[{"id":3613,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"2824:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2830:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3612,"name":"ProtocolAddressUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"2801:22:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2801:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3616,"nodeType":"EmitStatement","src":"2796:40:12"}]}}]},"documentation":{"id":3549,"nodeType":"StructuredDocumentation","src":"2067:224:12","text":" @dev Updates a protocol address.\n @param what The address type to be updated (treasury or aggregator).\n @param value The new address to be set.\n Requirements:\n - The value must not be a zero address."},"functionSelector":"40ebc677","id":3620,"implemented":true,"kind":"function","modifiers":[{"id":3556,"kind":"modifierInvocation","modifierName":{"id":3555,"name":"onlyOwner","nameLocations":["2362:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"2362:9:12"},"nodeType":"ModifierInvocation","src":"2362:9:12"}],"name":"updateProtocolAddress","nameLocation":"2302:21:12","nodeType":"FunctionDefinition","parameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3551,"mutability":"mutable","name":"what","nameLocation":"2332:4:12","nodeType":"VariableDeclaration","scope":3620,"src":"2324:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3553,"mutability":"mutable","name":"value","nameLocation":"2346:5:12","nodeType":"VariableDeclaration","scope":3620,"src":"2338:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3552,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:29:12"},"returnParameters":{"id":3557,"nodeType":"ParameterList","parameters":[],"src":"2372:0:12"},"scope":3621,"src":"2293:551:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3622,"src":"276:2570:12","usedErrors":[]}],"src":"168:2679:12"},"id":12},"contracts/interfaces/IGateway.sol":{"ast":{"absolutePath":"contracts/interfaces/IGateway.sol","exportedSymbols":{"IERC20":[995],"IGateway":[3845]},"id":3846,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3623,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3625,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3846,"sourceUnit":996,"src":"68:70:13","symbolAliases":[{"foreign":{"id":3624,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"76:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IGateway","contractDependencies":[],"contractKind":"interface","documentation":{"id":3626,"nodeType":"StructuredDocumentation","src":"142:76:13","text":" @title IGateway\n @notice Interface for the Gateway contract."},"fullyImplemented":false,"id":3845,"linearizedBaseContracts":[3845],"name":"IGateway","nameLocation":"230:8:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3627,"nodeType":"StructuredDocumentation","src":"430:348:13","text":" @notice Emitted when an order is created.\n @param sender The address of the sender.\n @param token The address of the deposited token.\n @param amount The amount of the deposit.\n @param orderId The ID of the order.\n @param rate The rate at which the deposit is made.\n @param messageHash The hash of the message."},"eventSelector":"40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a137","id":3643,"name":"OrderCreated","nameLocation":"787:12:13","nodeType":"EventDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3629,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"820:6:13","nodeType":"VariableDeclaration","scope":3643,"src":"804:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3628,"name":"address","nodeType":"ElementaryTypeName","src":"804:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3631,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"847:5:13","nodeType":"VariableDeclaration","scope":3643,"src":"831:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3630,"name":"address","nodeType":"ElementaryTypeName","src":"831:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3633,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"873:6:13","nodeType":"VariableDeclaration","scope":3643,"src":"857:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3632,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3635,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"892:11:13","nodeType":"VariableDeclaration","scope":3643,"src":"884:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3634,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3637,"indexed":false,"mutability":"mutable","name":"orderId","nameLocation":"916:7:13","nodeType":"VariableDeclaration","scope":3643,"src":"908:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"908:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3639,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"936:4:13","nodeType":"VariableDeclaration","scope":3643,"src":"928:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3638,"name":"uint256","nodeType":"ElementaryTypeName","src":"928:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3641,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"952:11:13","nodeType":"VariableDeclaration","scope":3643,"src":"945:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3640,"name":"string","nodeType":"ElementaryTypeName","src":"945:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"799:168:13"},"src":"781:187:13"},{"anonymous":false,"documentation":{"id":3644,"nodeType":"StructuredDocumentation","src":"973:300:13","text":" @notice Emitted when an order is settled out.\n @param splitOrderId The ID of the split order.\n @param orderId The ID of the order.\n @param liquidityProvider The address of the liquidity provider.\n @param settlePercent The percentage at which the transaction is settled."},"eventSelector":"d466be5516d4d2372b27b6e13104cd3f5d1656e5c9e5ae9a6939da8cf62dbbde","id":3654,"name":"OrderSettledOut","nameLocation":"1282:15:13","nodeType":"EventDefinition","parameters":{"id":3653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3646,"indexed":false,"mutability":"mutable","name":"splitOrderId","nameLocation":"1310:12:13","nodeType":"VariableDeclaration","scope":3654,"src":"1302:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3645,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1302:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3648,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"1343:7:13","nodeType":"VariableDeclaration","scope":3654,"src":"1327:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1327:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3650,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"1371:17:13","nodeType":"VariableDeclaration","scope":3654,"src":"1355:33:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3649,"name":"address","nodeType":"ElementaryTypeName","src":"1355:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3652,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"1400:13:13","nodeType":"VariableDeclaration","scope":3654,"src":"1393:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3651,"name":"uint96","nodeType":"ElementaryTypeName","src":"1393:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1297:120:13"},"src":"1276:142:13"},{"anonymous":false,"documentation":{"id":3655,"nodeType":"StructuredDocumentation","src":"1423:170:13","text":" @notice Emitted when an aggregator refunds a transaction.\n @param fee The fee deducted from the refund amount.\n @param orderId The ID of the order."},"eventSelector":"0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e","id":3661,"name":"OrderRefunded","nameLocation":"1602:13:13","nodeType":"EventDefinition","parameters":{"id":3660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"indexed":false,"mutability":"mutable","name":"fee","nameLocation":"1624:3:13","nodeType":"VariableDeclaration","scope":3661,"src":"1616:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3656,"name":"uint256","nodeType":"ElementaryTypeName","src":"1616:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3659,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"1645:7:13","nodeType":"VariableDeclaration","scope":3661,"src":"1629:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1629:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1615:38:13"},"src":"1596:58:13"},{"anonymous":false,"documentation":{"id":3662,"nodeType":"StructuredDocumentation","src":"1659:168:13","text":" @notice Emitted when the sender's fee is transferred.\n @param sender The address of the sender.\n @param amount The amount of the fee transferred."},"eventSelector":"44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501","id":3668,"name":"SenderFeeTransferred","nameLocation":"1836:20:13","nodeType":"EventDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3664,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1873:6:13","nodeType":"VariableDeclaration","scope":3668,"src":"1857:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3663,"name":"address","nodeType":"ElementaryTypeName","src":"1857:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3666,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1897:6:13","nodeType":"VariableDeclaration","scope":3668,"src":"1881:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1856:48:13"},"src":"1830:75:13"},{"anonymous":false,"documentation":{"id":3669,"nodeType":"StructuredDocumentation","src":"1910:214:13","text":" @notice Emitted when a deposit is made by a provider.\n @param sender The address of the sender.\n @param token The address of the deposited token.\n @param amount The amount of the deposit."},"eventSelector":"5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62","id":3677,"name":"Deposit","nameLocation":"2133:7:13","nodeType":"EventDefinition","parameters":{"id":3676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3671,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2157:6:13","nodeType":"VariableDeclaration","scope":3677,"src":"2141:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3670,"name":"address","nodeType":"ElementaryTypeName","src":"2141:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3673,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"2181:5:13","nodeType":"VariableDeclaration","scope":3677,"src":"2165:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3672,"name":"address","nodeType":"ElementaryTypeName","src":"2165:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3675,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"2204:6:13","nodeType":"VariableDeclaration","scope":3677,"src":"2188:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3674,"name":"uint256","nodeType":"ElementaryTypeName","src":"2188:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2140:71:13"},"src":"2127:85:13"},{"anonymous":false,"documentation":{"id":3678,"nodeType":"StructuredDocumentation","src":"2217:300:13","text":" @dev Emitted when an order is settled in.\n @param provider The address of the provider.\n @param senderAddress The address of the sender.\n @param amount The address of the deposited token.\n @param token The amount of the deposit.\n @param orderId The ID of the order."},"eventSelector":"6e169b3fe3601f2c225fbdb8de390eccb476ad5a83176809af89dab4a7bea32e","id":3690,"name":"OrderSettledIn","nameLocation":"2526:14:13","nodeType":"EventDefinition","parameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"indexed":true,"mutability":"mutable","name":"provider","nameLocation":"2557:8:13","nodeType":"VariableDeclaration","scope":3690,"src":"2541:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3679,"name":"address","nodeType":"ElementaryTypeName","src":"2541:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3682,"indexed":true,"mutability":"mutable","name":"senderAddress","nameLocation":"2583:13:13","nodeType":"VariableDeclaration","scope":3690,"src":"2567:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3681,"name":"address","nodeType":"ElementaryTypeName","src":"2567:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3684,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"2614:6:13","nodeType":"VariableDeclaration","scope":3690,"src":"2598:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3683,"name":"uint256","nodeType":"ElementaryTypeName","src":"2598:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3686,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"2630:5:13","nodeType":"VariableDeclaration","scope":3690,"src":"2622:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3685,"name":"address","nodeType":"ElementaryTypeName","src":"2622:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3688,"indexed":false,"mutability":"mutable","name":"orderId","nameLocation":"2645:7:13","nodeType":"VariableDeclaration","scope":3690,"src":"2637:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2637:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2540:113:13"},"src":"2520:134:13"},{"canonicalName":"IGateway.OrderOut","id":3711,"members":[{"constant":false,"id":3692,"mutability":"mutable","name":"sender","nameLocation":"3488:6:13","nodeType":"VariableDeclaration","scope":3711,"src":"3480:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"3480:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"token","nameLocation":"3507:5:13","nodeType":"VariableDeclaration","scope":3711,"src":"3499:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3693,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3696,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"3525:18:13","nodeType":"VariableDeclaration","scope":3711,"src":"3517:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3695,"name":"address","nodeType":"ElementaryTypeName","src":"3517:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3698,"mutability":"mutable","name":"senderFee","nameLocation":"3556:9:13","nodeType":"VariableDeclaration","scope":3711,"src":"3548:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3697,"name":"uint256","nodeType":"ElementaryTypeName","src":"3548:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3700,"mutability":"mutable","name":"protocolFee","nameLocation":"3578:11:13","nodeType":"VariableDeclaration","scope":3711,"src":"3570:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3699,"name":"uint256","nodeType":"ElementaryTypeName","src":"3570:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3702,"mutability":"mutable","name":"isFulfilled","nameLocation":"3599:11:13","nodeType":"VariableDeclaration","scope":3711,"src":"3594:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3701,"name":"bool","nodeType":"ElementaryTypeName","src":"3594:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"isRefunded","nameLocation":"3620:10:13","nodeType":"VariableDeclaration","scope":3711,"src":"3615:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3703,"name":"bool","nodeType":"ElementaryTypeName","src":"3615:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"refundAddress","nameLocation":"3643:13:13","nodeType":"VariableDeclaration","scope":3711,"src":"3635:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3705,"name":"address","nodeType":"ElementaryTypeName","src":"3635:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3708,"mutability":"mutable","name":"currentBPS","nameLocation":"3668:10:13","nodeType":"VariableDeclaration","scope":3711,"src":"3661:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3707,"name":"uint96","nodeType":"ElementaryTypeName","src":"3661:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"amount","nameLocation":"3691:6:13","nodeType":"VariableDeclaration","scope":3711,"src":"3683:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3709,"name":"uint256","nodeType":"ElementaryTypeName","src":"3683:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"OrderOut","nameLocation":"3466:8:13","nodeType":"StructDefinition","scope":3845,"src":"3459:243:13","visibility":"public"},{"canonicalName":"IGateway.OrderIn","id":3722,"members":[{"constant":false,"id":3713,"mutability":"mutable","name":"amount","nameLocation":"4031:6:13","nodeType":"VariableDeclaration","scope":3722,"src":"4023:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3712,"name":"uint256","nodeType":"ElementaryTypeName","src":"4023:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3715,"mutability":"mutable","name":"provider","nameLocation":"4050:8:13","nodeType":"VariableDeclaration","scope":3722,"src":"4042:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3714,"name":"address","nodeType":"ElementaryTypeName","src":"4042:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3717,"mutability":"mutable","name":"sender","nameLocation":"4071:6:13","nodeType":"VariableDeclaration","scope":3722,"src":"4063:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3716,"name":"address","nodeType":"ElementaryTypeName","src":"4063:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3719,"mutability":"mutable","name":"token","nameLocation":"4090:5:13","nodeType":"VariableDeclaration","scope":3722,"src":"4082:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3718,"name":"address","nodeType":"ElementaryTypeName","src":"4082:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3721,"mutability":"mutable","name":"orderId","nameLocation":"4108:7:13","nodeType":"VariableDeclaration","scope":3722,"src":"4100:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4100:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"OrderIn","nameLocation":"4010:7:13","nodeType":"StructDefinition","scope":3845,"src":"4003:117:13","visibility":"public"},{"documentation":{"id":3723,"nodeType":"StructuredDocumentation","src":"4320:979:13","text":" @notice Locks the sender's amount of token into Gateway.\n @dev Requirements:\n - `msg.sender` must approve Gateway contract on `_token` of at least `amount` before function call.\n - `_token` must be an acceptable token. See {isTokenSupported}.\n - `amount` must be greater than minimum.\n - `_refundAddress` refund address must not be zero address.\n @param _token The address of the token.\n @param _amount The amount in the decimal of `_token` to be locked.\n @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\n @param _senderFeeRecipient The address that will receive `_senderFee` in `_token`.\n @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient`.\n @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\n @param messageHash The hash of the message.\n @return _orderId The ID of the order."},"functionSelector":"809804f7","id":3742,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"5311:11:13","nodeType":"FunctionDefinition","parameters":{"id":3738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"mutability":"mutable","name":"_token","nameLocation":"5335:6:13","nodeType":"VariableDeclaration","scope":3742,"src":"5327:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3724,"name":"address","nodeType":"ElementaryTypeName","src":"5327:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3727,"mutability":"mutable","name":"_amount","nameLocation":"5354:7:13","nodeType":"VariableDeclaration","scope":3742,"src":"5346:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"5346:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3729,"mutability":"mutable","name":"_rate","nameLocation":"5373:5:13","nodeType":"VariableDeclaration","scope":3742,"src":"5366:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3728,"name":"uint96","nodeType":"ElementaryTypeName","src":"5366:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3731,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"5391:19:13","nodeType":"VariableDeclaration","scope":3742,"src":"5383:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3730,"name":"address","nodeType":"ElementaryTypeName","src":"5383:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3733,"mutability":"mutable","name":"_senderFee","nameLocation":"5423:10:13","nodeType":"VariableDeclaration","scope":3742,"src":"5415:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"5415:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"_refundAddress","nameLocation":"5446:14:13","nodeType":"VariableDeclaration","scope":3742,"src":"5438:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3734,"name":"address","nodeType":"ElementaryTypeName","src":"5438:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3737,"mutability":"mutable","name":"messageHash","nameLocation":"5481:11:13","nodeType":"VariableDeclaration","scope":3742,"src":"5465:27:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3736,"name":"string","nodeType":"ElementaryTypeName","src":"5465:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5322:174:13"},"returnParameters":{"id":3741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3740,"mutability":"mutable","name":"_orderId","nameLocation":"5523:8:13","nodeType":"VariableDeclaration","scope":3742,"src":"5515:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5515:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5514:18:13"},"scope":3845,"src":"5302:231:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3743,"nodeType":"StructuredDocumentation","src":"5538:372:13","text":" @notice Settles an order out transaction and distributes fees accordingly.\n @param _splitOrderId The ID of the split order.\n @param _orderId The ID of the transaction.\n @param _provider The address of the liquidity provider.\n @param _settlePercent The rate at which the transaction is settled.\n @return bool The settlement is successful."},"functionSelector":"9a06601f","id":3756,"implemented":false,"kind":"function","modifiers":[],"name":"settleOrderOut","nameLocation":"5922:14:13","nodeType":"FunctionDefinition","parameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3745,"mutability":"mutable","name":"_splitOrderId","nameLocation":"5949:13:13","nodeType":"VariableDeclaration","scope":3756,"src":"5941:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3744,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5941:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3747,"mutability":"mutable","name":"_orderId","nameLocation":"5975:8:13","nodeType":"VariableDeclaration","scope":3756,"src":"5967:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3749,"mutability":"mutable","name":"_provider","nameLocation":"5996:9:13","nodeType":"VariableDeclaration","scope":3756,"src":"5988:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3748,"name":"address","nodeType":"ElementaryTypeName","src":"5988:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"_settlePercent","nameLocation":"6017:14:13","nodeType":"VariableDeclaration","scope":3756,"src":"6010:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3750,"name":"uint64","nodeType":"ElementaryTypeName","src":"6010:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5936:99:13"},"returnParameters":{"id":3755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3756,"src":"6054:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3753,"name":"bool","nodeType":"ElementaryTypeName","src":"6054:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6053:6:13"},"scope":3845,"src":"5913:147:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3757,"nodeType":"StructuredDocumentation","src":"6065:302:13","text":" @notice Refunds to the specified refund address.\n @dev Requirements:\n - Only aggregators can call this function.\n @param _fee The amount to be deducted from the amount to be refunded.\n @param _orderId The ID of the transaction.\n @return bool the refund is successful."},"functionSelector":"47b0f1cd","id":3766,"implemented":false,"kind":"function","modifiers":[],"name":"refundOrder","nameLocation":"6379:11:13","nodeType":"FunctionDefinition","parameters":{"id":3762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3759,"mutability":"mutable","name":"_fee","nameLocation":"6399:4:13","nodeType":"VariableDeclaration","scope":3766,"src":"6391:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3758,"name":"uint256","nodeType":"ElementaryTypeName","src":"6391:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3761,"mutability":"mutable","name":"_orderId","nameLocation":"6413:8:13","nodeType":"VariableDeclaration","scope":3766,"src":"6405:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6405:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6390:32:13"},"returnParameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3766,"src":"6441:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3763,"name":"bool","nodeType":"ElementaryTypeName","src":"6441:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6440:6:13"},"scope":3845,"src":"6370:77:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3767,"nodeType":"StructuredDocumentation","src":"6452:424:13","text":" @notice Allow a provider to deposit an asset into Gateway.\n @dev Requirements:\n - The amount must be greater than minimum.\n - The asset must be supported.\n - The provider must approve Gateway contract on `_token` of at least `_amount` before function call\n @param _token The address of the asset.\n @param _amount The amount to be deposited.\n @return bool The deposit is successful."},"functionSelector":"47e7ef24","id":3776,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"6888:7:13","nodeType":"FunctionDefinition","parameters":{"id":3772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3769,"mutability":"mutable","name":"_token","nameLocation":"6904:6:13","nodeType":"VariableDeclaration","scope":3776,"src":"6896:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3768,"name":"address","nodeType":"ElementaryTypeName","src":"6896:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3771,"mutability":"mutable","name":"_amount","nameLocation":"6920:7:13","nodeType":"VariableDeclaration","scope":3776,"src":"6912:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3770,"name":"uint256","nodeType":"ElementaryTypeName","src":"6912:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6895:33:13"},"returnParameters":{"id":3775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3776,"src":"6947:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3773,"name":"bool","nodeType":"ElementaryTypeName","src":"6947:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6946:6:13"},"scope":3845,"src":"6879:74:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3777,"nodeType":"StructuredDocumentation","src":"6961:371:13","text":" @notice Allow aggregator to settle an order coming in.\n @param _orderId The ID of the transaction.\n @param _signature The signature of the provider.\n @param _provider The address of the provider.\n @param _senderAddress The address of the sender.\n @param _token The address of the asset.\n @param _amount The amount to be transferred."},"functionSelector":"b682b667","id":3792,"implemented":false,"kind":"function","modifiers":[],"name":"settleOrderIn","nameLocation":"7344:13:13","nodeType":"FunctionDefinition","parameters":{"id":3790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3779,"mutability":"mutable","name":"_orderId","nameLocation":"7376:8:13","nodeType":"VariableDeclaration","scope":3792,"src":"7368:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3778,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7368:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3781,"mutability":"mutable","name":"_signature","nameLocation":"7408:10:13","nodeType":"VariableDeclaration","scope":3792,"src":"7395:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3780,"name":"bytes","nodeType":"ElementaryTypeName","src":"7395:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3783,"mutability":"mutable","name":"_provider","nameLocation":"7437:9:13","nodeType":"VariableDeclaration","scope":3792,"src":"7429:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"7429:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3785,"mutability":"mutable","name":"_senderAddress","nameLocation":"7465:14:13","nodeType":"VariableDeclaration","scope":3792,"src":"7457:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3784,"name":"address","nodeType":"ElementaryTypeName","src":"7457:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3787,"mutability":"mutable","name":"_token","nameLocation":"7498:6:13","nodeType":"VariableDeclaration","scope":3792,"src":"7490:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3786,"name":"address","nodeType":"ElementaryTypeName","src":"7490:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3789,"mutability":"mutable","name":"_amount","nameLocation":"7523:7:13","nodeType":"VariableDeclaration","scope":3792,"src":"7515:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3788,"name":"uint256","nodeType":"ElementaryTypeName","src":"7515:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7357:180:13"},"returnParameters":{"id":3791,"nodeType":"ParameterList","parameters":[],"src":"7546:0:13"},"scope":3845,"src":"7335:212:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3793,"nodeType":"StructuredDocumentation","src":"7552:161:13","text":" @notice Checks if a token is supported by Gateway.\n @param _token The address of the token to check.\n @return bool the token is supported."},"functionSelector":"75151b63","id":3800,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"7725:16:13","nodeType":"FunctionDefinition","parameters":{"id":3796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"_token","nameLocation":"7750:6:13","nodeType":"VariableDeclaration","scope":3800,"src":"7742:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3794,"name":"address","nodeType":"ElementaryTypeName","src":"7742:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7741:16:13"},"returnParameters":{"id":3799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3800,"src":"7781:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3797,"name":"bool","nodeType":"ElementaryTypeName","src":"7781:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7780:6:13"},"scope":3845,"src":"7716:71:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3801,"nodeType":"StructuredDocumentation","src":"7792:141:13","text":" @notice Gets the details of an off ramp order.\n @param _orderId The ID of the order.\n @return Order The order details."},"functionSelector":"9bb39e13","id":3809,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfoOut","nameLocation":"7945:15:13","nodeType":"FunctionDefinition","parameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"mutability":"mutable","name":"_orderId","nameLocation":"7969:8:13","nodeType":"VariableDeclaration","scope":3809,"src":"7961:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3802,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7961:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7960:18:13"},"returnParameters":{"id":3808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3809,"src":"8002:15:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_memory_ptr","typeString":"struct IGateway.OrderOut"},"typeName":{"id":3806,"nodeType":"UserDefinedTypeName","pathNode":{"id":3805,"name":"OrderOut","nameLocations":["8002:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":3711,"src":"8002:8:13"},"referencedDeclaration":3711,"src":"8002:8:13","typeDescriptions":{"typeIdentifier":"t_struct$_OrderOut_$3711_storage_ptr","typeString":"struct IGateway.OrderOut"}},"visibility":"internal"}],"src":"8001:17:13"},"scope":3845,"src":"7936:83:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3810,"nodeType":"StructuredDocumentation","src":"8024:140:13","text":" @notice Gets the details of an on ramp order.\n @param _orderId The ID of the order.\n @return Order The order details."},"functionSelector":"9c0fea2c","id":3818,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfoIn","nameLocation":"8176:14:13","nodeType":"FunctionDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3812,"mutability":"mutable","name":"_orderId","nameLocation":"8199:8:13","nodeType":"VariableDeclaration","scope":3818,"src":"8191:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3811,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8191:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8190:18:13"},"returnParameters":{"id":3817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3818,"src":"8232:14:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_memory_ptr","typeString":"struct IGateway.OrderIn"},"typeName":{"id":3815,"nodeType":"UserDefinedTypeName","pathNode":{"id":3814,"name":"OrderIn","nameLocations":["8232:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3722,"src":"8232:7:13"},"referencedDeclaration":3722,"src":"8232:7:13","typeDescriptions":{"typeIdentifier":"t_struct$_OrderIn_$3722_storage_ptr","typeString":"struct IGateway.OrderIn"}},"visibility":"internal"}],"src":"8231:16:13"},"scope":3845,"src":"8167:81:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3819,"nodeType":"StructuredDocumentation","src":"8253:158:13","text":" @notice Gets the fee details of Gateway.\n @return protocolReward The protocol reward amount.\n @return max_bps The maximum basis points."},"functionSelector":"b810c636","id":3826,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"8423:13:13","nodeType":"FunctionDefinition","parameters":{"id":3820,"nodeType":"ParameterList","parameters":[],"src":"8436:2:13"},"returnParameters":{"id":3825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"mutability":"mutable","name":"protocolReward","nameLocation":"8469:14:13","nodeType":"VariableDeclaration","scope":3826,"src":"8462:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3821,"name":"uint64","nodeType":"ElementaryTypeName","src":"8462:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3824,"mutability":"mutable","name":"max_bps","nameLocation":"8493:7:13","nodeType":"VariableDeclaration","scope":3826,"src":"8485:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"8485:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8461:40:13"},"scope":3845,"src":"8414:88:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3827,"nodeType":"StructuredDocumentation","src":"8507:195:13","text":" @notice Gets the balance of a provider.\n @param _provider The address of the provider.\n @param _asset The address of the asset.\n @return uint256 The provider's balance."},"functionSelector":"d4fac45d","id":3836,"implemented":false,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"8714:10:13","nodeType":"FunctionDefinition","parameters":{"id":3832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3829,"mutability":"mutable","name":"_asset","nameLocation":"8733:6:13","nodeType":"VariableDeclaration","scope":3836,"src":"8725:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3828,"name":"address","nodeType":"ElementaryTypeName","src":"8725:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3831,"mutability":"mutable","name":"_provider","nameLocation":"8749:9:13","nodeType":"VariableDeclaration","scope":3836,"src":"8741:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3830,"name":"address","nodeType":"ElementaryTypeName","src":"8741:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8724:35:13"},"returnParameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3836,"src":"8783:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"8783:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8782:9:13"},"scope":3845,"src":"8705:87:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3837,"nodeType":"StructuredDocumentation","src":"8797:139:13","text":" @notice Gets order processed status.\n @param _orderId The ID of the order.\n @return bool The order processed status."},"functionSelector":"00b727da","id":3844,"implemented":false,"kind":"function","modifiers":[],"name":"isOrderProcessed","nameLocation":"8948:16:13","nodeType":"FunctionDefinition","parameters":{"id":3840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3839,"mutability":"mutable","name":"_orderId","nameLocation":"8973:8:13","nodeType":"VariableDeclaration","scope":3844,"src":"8965:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3838,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8965:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8964:18:13"},"returnParameters":{"id":3843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3844,"src":"9006:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3841,"name":"bool","nodeType":"ElementaryTypeName","src":"9006:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9005:6:13"},"scope":3845,"src":"8939:73:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3846,"src":"220:8795:13","usedErrors":[]}],"src":"40:8977:13"},"id":13}},"contracts":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"Ownable2StepUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":\"Ownable2StepUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":916,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":118,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":238,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":11,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":105,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":916,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":118,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":238,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":916,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":430,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"_paused","offset":0,"slot":"51","type":"t_bool"},{"astId":535,"contract":"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122074e64948a85f7bbbada69c4a92938e0498524f335addd8c89ce9ab339d3281e464736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xE64948A85F7BBBADA69C4A92938E0498524F335ADD 0xD8 0xC8 SWAP13 0xE9 0xAB CALLER SWAP14 ORIGIN DUP2 0xE4 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:4:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122074e64948a85f7bbbada69c4a92938e0498524f335addd8c89ce9ab339d3281e464736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH21 0xE64948A85F7BBBADA69C4A92938E0498524F335ADD 0xD8 0xC8 SWAP13 0xE9 0xAB CALLER SWAP14 ORIGIN DUP2 0xE4 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:4:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":916,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f47120980f9705a2f401d98ae81c9d1e65e2a3fa65485df0c9085ef28005031064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL PUSH18 0x20980F9705A2F401D98AE81C9D1E65E2A3FA PUSH6 0x485DF0C9085E CALLCODE DUP1 SDIV SUB LT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"220:2559:7:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220f47120980f9705a2f401d98ae81c9d1e65e2a3fa65485df0c9085ef28005031064736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL PUSH18 0x20980F9705A2F401D98AE81C9D1E65E2A3FA PUSH6 0x485DF0C9085E CALLCODE DUP1 SDIV SUB LT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"220:2559:7:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202d3d80c1a7ed3a2585c5d2be19a4cc20e123fd05bb380463194ea5a0289ce87d64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D RETURNDATASIZE DUP1 0xC1 0xA7 0xED GASPRICE 0x25 DUP6 0xC5 0xD2 0xBE NOT LOG4 0xCC KECCAK256 0xE1 0x23 REVERT SDIV 0xBB CODESIZE DIV PUSH4 0x194EA5A0 0x28 SWAP13 0xE8 PUSH30 0x64736F6C6343000812003300000000000000000000000000000000000000 ","sourceMap":"369:8761:8:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212202d3d80c1a7ed3a2585c5d2be19a4cc20e123fd05bb380463194ea5a0289ce87d64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D RETURNDATASIZE DUP1 0xC1 0xA7 0xED GASPRICE 0x25 DUP6 0xC5 0xD2 0xBE NOT LOG4 0xCC KECCAK256 0xE1 0x23 REVERT SDIV 0xBB CODESIZE DIV PUSH4 0x194EA5A0 0x28 SWAP13 0xE8 PUSH30 0x64736F6C6343000812003300000000000000000000000000000000000000 ","sourceMap":"369:8761:8:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122057f67a5f5464bce52eb898013a9f5eb0a19d6cff414bb24217542dbb15207e5164736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI 0xF6 PUSH27 0x5F5464BCE52EB898013A9F5EB0A19D6CFF414BB24217542DBB1520 PUSH31 0x5164736F6C6343000812003300000000000000000000000000000000000000 ","sourceMap":"202:12582:9:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122057f67a5f5464bce52eb898013a9f5eb0a19d6cff414bb24217542dbb15207e5164736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI 0xF6 PUSH27 0x5F5464BCE52EB898013A9F5EB0A19D6CFF414BB24217542DBB1520 PUSH31 0x5164736F6C6343000812003300000000000000000000000000000000000000 ","sourceMap":"202:12582:9:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220aeabe9786664b5693d0f0e0b428c2f19cb673eec80b4ac37fe8e35d60aa9d11964736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0xAB 0xE9 PUSH25 0x6664B5693D0F0E0B428C2F19CB673EEC80B4AC37FE8E35D60A 0xA9 0xD1 NOT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"215:1047:10:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220aeabe9786664b5693d0f0e0b428c2f19cb673eec80b4ac37fe8e35d60aa9d11964736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0xAB 0xE9 PUSH25 0x6664B5693D0F0E0B428C2F19CB673EEC80B4AC37FE8E35D60A 0xA9 0xD1 NOT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"215:1047:10:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Gateway.sol":{"Gateway":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolFee","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"OrderCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"OrderRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"provider","type":"address"},{"indexed":true,"internalType":"address","name":"senderAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"OrderSettledIn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"OrderSettledOut","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":true,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"ProtocolAddressUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"ProtocolFeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"SenderFeeTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":true,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"uint256","name":"status","type":"uint256"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_provider","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfoIn","outputs":[{"components":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"internalType":"struct IGateway.OrderIn","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfoOut","outputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"bool","name":"isRefunded","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IGateway.OrderOut","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"isOrderProcessed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"refundOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"uint256","name":"status","type":"uint256"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"},{"internalType":"address","name":"_provider","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"settleOrderIn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"address","name":"_provider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"}],"name":"settleOrderOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFee","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(address,address,uint256)":{"params":{"amount":"The amount of the deposit.","sender":"The address of the sender.","token":"The address of the deposited token."}},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)":{"params":{"amount":"The amount of the deposit.","messageHash":"The hash of the message.","orderId":"The ID of the order.","rate":"The rate at which the deposit is made.","sender":"The address of the sender.","token":"The address of the deposited token."}},"OrderRefunded(uint256,bytes32)":{"params":{"fee":"The fee deducted from the refund amount.","orderId":"The ID of the order."}},"OrderSettledIn(address,address,uint256,address,bytes32)":{"details":"Emitted when an order is settled in.","params":{"amount":"The address of the deposited token.","orderId":"The ID of the order.","provider":"The address of the provider.","senderAddress":"The address of the sender.","token":"The amount of the deposit."}},"OrderSettledOut(bytes32,bytes32,address,uint96)":{"params":{"liquidityProvider":"The address of the liquidity provider.","orderId":"The ID of the order.","settlePercent":"The percentage at which the transaction is settled.","splitOrderId":"The ID of the split order."}},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"SenderFeeTransferred(address,uint256)":{"params":{"amount":"The amount of the fee transferred.","sender":"The address of the sender."}},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,uint96,address,uint256,address,string)":{"details":"See {createOrder-IGateway}. "},"deposit(address,uint256)":{"details":"See {deposit-IGateway}.  enables providers to deposit tokens into the contract","params":{"_amount":"The amount of tokens to be deposited. Requirements: - The token must be supported. - The amount must be greater than 0. - The contract must have sufficient allowance to transfer the tokens. - The contract must have sufficient balance to store the tokens. Emits a {Deposit} event. Returns a boolean value indicating whether the deposit was successful. ","_token":"The address of the token to be deposited."}},"getBalance(address,address)":{"details":"See {getBalance-IGateway}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IGateway}. "},"getOrderInfoIn(bytes32)":{"details":"See {getOrderInfoIn-IGateway}. "},"getOrderInfoOut(bytes32)":{"details":"See {getOrderInfoOut-IGateway}. "},"initialize()":{"details":"Initialize function."},"isTokenSupported(address)":{"details":"See {isTokenSupported-IGateway}. "},"owner()":{"details":"Returns the address of the current owner."},"pause()":{"details":"Pause the contract."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"refundOrder(uint256,bytes32)":{"details":"See {refundOrder-IGateway}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settingManagerBool(bytes32,address,uint256)":{"details":"Sets the boolean value for a specific setting.","params":{"status":"The boolean value to be set. Requirements: - The value must not be a zero address.","value":"The address or value associated with the setting.","what":"The setting to be updated."}},"settleOrderIn(bytes32,bytes,address,address,address,uint256)":{"details":"See {settledOrderIn-IGateway}.  enables providers to settle orders in","params":{"_amount":"The amount of tokens to be settled.","_orderId":"The ID of the order to be settled.","_provider":"The address of the provider.","_sender":"The address of the sender i.e. the user that created the order.","_signature":"The signature of the order.","_token":"The address of the token to be settled."}},"settleOrderOut(bytes32,bytes32,address,uint64)":{"details":"See {settleOrderOut-IGateway}. "},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."},"unpause()":{"details":"Unpause the contract."},"updateProtocolAddress(bytes32,address)":{"details":"Updates a protocol address.","params":{"value":"The new address to be set. Requirements: - The value must not be a zero address.","what":"The address type to be updated (treasury or aggregator)."}},"updateProtocolFee(uint64)":{"details":"Updates the protocol fee percentage.","params":{"_protocolFeePercent":"The new protocol fee percentage to be set."}}},"title":"Gateway","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b6040516121eb90816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908162b727da14611ba6575080633f4ba83a14611b1257806340ebc6771461196957806347094e2e146118fd57806347b0f1cd146116b257806347e7ef24146115bd5780635c975abb1461159a578063715018a61461153357806375151b631461150657806379ba50971461147f578063809804f714610ff45780638129fc1c14610e9b5780638456cb5914610e415780638da5cb5b14610e185780639a06601f14610ae85780639bb39e13146109565780639c0fea2c14610896578063b682b66714610320578063b810c636146102f2578063cd99240014610208578063d4fac45d146101b6578063e30c39781461018d5763f2fde38b1461011b57600080fd5b3461018857602036600319011261018857610134611bea565b61013c611cd5565b606580546001600160a01b0319166001600160a01b039283169081179091556033549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b600080fd5b34610188576000366003190112610188576065546040516001600160a01b039091168152602090f35b34610188576040366003190112610188576101cf611bea565b6101d7611bd4565b9060018060a01b03809116600052610102602052604060002091166000526020526020604060002054604051908152f35b3461018857606036600319011261018857600435610224611bd4565b9060443591610231611cd5565b6001600160a01b031691610246831515612171565b6001811480156102e8575b156102a357643a37b5b2b760d91b821461026757005b60207fcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c9184600052609a825280604060002055604051908152a3005b60405162461bcd60e51b815260206004820152601760248201527f476174657761793a20696e76616c6964207374617475730000000000000000006044820152606490fd5b5060028114610251565b346101885760003660031901126101885760406001600160401b036098541660975482519182526020820152f35b346101885760c0366003190112610188576024356001600160401b03811161018857366023820112156101885780600401356001600160401b0381116108805760405191610378601f8301601f191660200184611c63565b8183523660248383010111610188578160009260246020930183860137830101526103a1611c16565b6103a9611c00565b916084356001600160a01b0381169003610188576103d260018060a01b03609954163314611ea4565b6103df60a4351515611e69565b60043560005261010360205260ff6040600020541661083b576001600160a01b038216156107f6576001600160a01b038316156107b85761049e6104a691604051602081019060043582526001600160601b0319808760601b166040830152808860601b16605483015260843560601b16606882015260a435607c820152607c815261046a81611c48565b5190207f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52603c600020612081565b919091611f67565b6001600160a01b0382811691160361077f576104db6104d26001600160401b036098541660a435611df6565b60975490611e09565b6001600160a01b0360843581166000908152610102602081815260408084209487168452939052919020546105128360a435611dd1565b11610743576004356000526101036020526040600020600160ff1982541617905561053f8260a435611dd1565b9060018060a01b0360843516600052602052604060002060018060a01b0384166000526020526105756040600020918254611f5a565b905560405161058381611c48565b60a4358082526001600160a01b03848116602080850191825287831660408087018281526084358616606089018181526004803560808c01818152600091825261010089528682209c518d55985160018d018054918c166001600160a01b0319928316179055945160028d018054918c16918716919091179055915160038c01805491909a169416939093179097559451978101979097555163a9059cbb60e01b80825296810191909152602481019490945291839160449183915af1801561071857610724575b508161069d575b5050604080516001600160a01b0360843581168252600435602083015260a4359481169316917f6e169b3fe3601f2c225fbdb8de390eccb476ad5a83176809af89dab4a7bea32e91a4005b609854604080519283521c6001600160a01b0316600482015260248101919091526020818060448101038160006084356001600160a01b03165af18015610718576106e9575b80610652565b61070a9060203d602011610711575b6107028183611c63565b810190611dde565b50826106e3565b503d6106f8565b6040513d6000823e3d90fd5b61073c9060203d602011610711576107028183611c63565b508461064b565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656e646572206164647265737360501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f7669646572206164647265737300000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4f7264657220616c72656164792070726f6365737365640000000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b3461018857602036600319011261018857600060806040516108b781611c48565b828152826020820152826040820152826060820152015260043560005261010060205260a060406000206040516108ed81611c48565b815491828252600180851b03908180600183015416602085019081528180600285015416916040870192835260806004836003880154169660608a0197885201549701968752604051978852511660208701525116604085015251166060830152516080820152f35b3461018857602036600319011261018857600061012060405161097881611c2c565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152015260043560005260ff60205261014060406000206101206040516109d081611c2c565b600760018060a01b038454169384835260018060a01b03600182015416602084015260018060a01b0360028201541660408401526003810154606084015260048101546080840152600581015460ff8116151560a085015260ff8160081c16151560c085015260018060a01b039060101c1660e08401526001600160601b0360068201541661010084015201548282015260405192835260018060a01b03602082015116602084015260018060a01b036040820151166040840152606081015160608401526080810151608084015260a0810151151560a084015260c0810151151560c084015260018060a01b0360e08201511660e08401526001600160601b03610100820151166101008401520151610120820152f35b3461018857608036600319011261018857602435610b04611c16565b90606435906001600160401b0392838316809303610188576099546001600160a01b039190610b369083163314611ea4565b8260005260ff91602095838752610b57846005604060002001541615611ee1565b84600052838752610b758460056040600020015460081c1615611f1e565b846000528387526040600020936006836001870154169501948554956001600160601b03968988821603888111610e02578816906001600160601b0319161790558660005281895260406000209560068701541615610d2b575b610c599550610be96104d289600760406000200154611df6565b918760005289526007604060002001610c03838254611f5a565b905588610c22610c1b6104d260985496871686611df6565b8094611f5a565b92604051809881928863a9059cbb60e01b9889855260401c166004840160209093929193604081019460018060a01b031681520152565b03816000855af192831561071857610ca3968a94610d0e575b506040519081526001600160a01b038616600482015260248101929092529094859190829060009082906044820190565b03925af1918215610718577fd466be5516d4d2372b27b6e13104cd3f5d1656e5c9e5ae9a6939da8cf62dbbde93604093610cf1575b508251956004358752878701521693a360405160018152f35b610d0790883d8a11610711576107028183611c63565b5087610cd8565b610d2490853d8711610711576107028183611c63565b508a610c72565b60058601600160ff1982541617905588600387015480610d4d575b5050610bcf565b600188015460029098015460405163a9059cbb60e01b81529087166001600160a01b0316600482015260248101919091529687908616816000816044810103925af195861561071857610c5996610de5575b50866000528189526040600020600385600283015416910154907f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501600080a3888a610d46565b610dfb908a3d8c11610711576107028183611c63565b5089610d9f565b634e487b7160e01b600052601160045260246000fd5b34610188576000366003190112610188576033546040516001600160a01b039091168152602090f35b3461018857600036600319011261018857610e5a611cd5565b610e62611d8d565b600160ff1960cd54161760cd557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346101885760003660031901126101885760005460ff8160081c1615808091610fe7575b8015610fd0575b15610f745760ff198281166001176000559181610f62575b50620186a0609755610f0060ff60005460081c16610efb81611d2d565b611d2d565b610f0933611c84565b60005491610f2060ff8460081c16610efb81611d2d565b60cd541660cd55610f2d57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005582610ede565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610ec65750600160ff831614610ec6565b50600160ff831610610ebf565b346101885760e03660031901126101885761100d611bea565b6044356001600160601b038116810361018857611028611c00565b60a4356001600160a01b0381168103610188576001600160401b0360c435116101885736602360c435011215610188576001600160401b0360c43560040135116101885736602460c4356004013560c43501011161018857611088611d8d565b6001600160a01b0384166000908152609a60205260409020546110ad90600114611e29565b6110ba6024351515611e69565b6001600160a01b03811615611447576084356113f4575b60c43560040135156113ba5761111d60206110f0608435602435611dd1565b6040516323b872dd60e01b8152336004820152306024820152604481019190915291829081906064820190565b038160006001600160a01b038a165af180156107185761139b575b503360005261010160205260406000209182546000198114610e025760209560079460017f40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a137930190553360005261010187526001600160601b036111c26111d0604060002054604051928391338d840160209093929193604081019460018060a01b031681520152565b03601f198101835282611c63565b888151910120966001600160401b036111ef8160985416602435611df6565b6111fc6097548092611e09565b976040519761120a89611c2c565b33895260018060a01b0387168d8a015260018060a01b031660408901526084356060890152886080890152600060a0890152600060c089015260018060a01b031660e0880152166101008601526024356101208601528760005260ff8952604060002061012060018060a01b03875116968460a01b88818554161784556001840160018060a01b038e8401511682825416179055600284019060018060a01b036040840151169082541617905560608101516003840155608081015160048401556005830160a08201511515815461ff0060c0850151151560081b169060ff62010000600160b01b0360e087015160101b1693169069ffffffffffffffffffff60b01b16171717905560068301856101008301511686198254161790550151978891015560405195865287898701521660408501526080606085015260c43560040135608085015260c43560040135602460c4350160a0860137600060a060c435600401358601015260018060a01b03169260a081601f19601f60c4356004013501168101030190a4604051908152f35b6113b39060203d602011610711576107028183611c63565b5084611138565b60405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c89acae6e6c2ceca90c2e6d60731b6044820152606490fd5b6001600160a01b0382166110d15760405162461bcd60e51b815260206004820152601960248201527f496e76616c696453656e646572466565526563697069656e74000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f5468726f775a65726f4164647265737360801b6044820152606490fd5b3461018857600036600319011261018857606554336001600160a01b03909116036114af576114ad33611c84565b005b60405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b34610188576020366003190112610188576020611529611524611bea565b612148565b6040519015158152f35b346101885760003660031901126101885761154c611cd5565b606580546001600160a01b03199081169091556033805491821690556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461018857600036600319011261018857602060ff60cd54166040519015158152f35b34610188576040366003190112610188576115d6611bea565b6024359060018060a01b031680600052602091609a83526115fe600160406000205414611e29565b611609811515611e69565b6040516323b872dd60e01b81523360048201523060248201526044810182905283816064816000875af1801561071857611695575b5081600052610102835260406000203360005283526040600020611663828254611dd1565b905560405191337f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62600080a460018152f35b6116ab90843d8611610711576107028183611c63565b508361163e565b346101885760403660031901126101885760043560243560018060a01b036116df81609954163314611ea4565b8160005260ff92602093808552611700816005604060002001541615611ee1565b8360005280855261171e8160056040600020015460081c1615611f1e565b8360005280855281600460406000200154106118c05784908261183f575b6117dd938560005281835261177c84600760406000206005810161010061ff0019825416179055600681016001600160601b031981541690550154611f5a565b918660005283526117a860406000209260038360018601541693600586015460101c1694015490611dd1565b60405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529093849190829060009082906044820190565b03925af1908115610718577f0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e928592611822575b50604051908152a260405160018152f35b61183890833d8511610711576107028183611c63565b5085611811565b6000858152818752604080822060010154609854825163a9059cbb60e01b8152921c87166001600160a01b03166004830152602482018690529095935087918691604491839187165af1918215610718576117dd9487936118a3575b50935061173c565b6118b990843d8611610711576107028183611c63565b508761189b565b60405162461bcd60e51b81526004810186905260156024820152744665654578636565647350726f746f636f6c46656560581b6044820152606490fd5b34610188576020366003190112610188576004356001600160401b0381168091036101885760207f1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b9161194e611cd5565b806001600160401b03196098541617609855604051908152a1005b3461018857604036600319011261018857600435611985611bd4565b9061198e611cd5565b6001600160a01b03828116926119a5841515612171565b600067747265617375727960c01b8403611a7b575083609854928360401c1614611a285768010000000000000000600160e01b031990911660409190911b68010000000000000000600160e01b03161760985560015b611a0157005b7fbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4600080a3005b60405162461bcd60e51b815260206004820152602560248201527f476174657761793a207472656173757279206164647265737320616c726561646044820152641e481cd95d60da1b6064820152608490fd5b9190506930b3b3b932b3b0ba37b960b11b8314611a99575b506119fb565b609954915081168314611abd576001600160a01b0319168217609955600183611a93565b60405162461bcd60e51b815260206004820152602760248201527f476174657761793a2061676772656761746f72206164647265737320616c726560448201526618591e481cd95d60ca1b6064820152608490fd5b3461018857600036600319011261018857611b2b611cd5565b60cd5460ff811615611b6a5760ff191660cd557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461018857602036600319011261018857602090600435600052610103825260ff6040600020541615158152f35b602435906001600160a01b038216820361018857565b600435906001600160a01b038216820361018857565b606435906001600160a01b038216820361018857565b604435906001600160a01b038216820361018857565b61014081019081106001600160401b0382111761088057604052565b60a081019081106001600160401b0382111761088057604052565b90601f801991011681019081106001600160401b0382111761088057604052565b6001600160601b0360a01b90816065541660655560335460018060a01b038092168093821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6033546001600160a01b03163303611ce957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611d3457565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60ff60cd5416611d9957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b91908201809211610e0257565b90816020910312610188575180151581036101885790565b81810292918115918404141715610e0257565b8115611e13570490565b634e487b7160e01b600052601260045260246000fd5b15611e3057565b60405162461bcd60e51b8152602060048201526011602482015270151bdad95b939bdd14dd5c1c1bdc9d1959607a1b6044820152606490fd5b15611e7057565b60405162461bcd60e51b815260206004820152600c60248201526b416d6f756e7449735a65726f60a01b6044820152606490fd5b15611eab57565b60405162461bcd60e51b815260206004820152600e60248201526d27b7363ca0b3b3b932b3b0ba37b960911b6044820152606490fd5b15611ee857565b60405162461bcd60e51b815260206004820152600e60248201526d13dc99195c919d5b199a5b1b195960921b6044820152606490fd5b15611f2557565b60405162461bcd60e51b815260206004820152600d60248201526c13dc99195c9499599d5b991959609a1b6044820152606490fd5b91908203918211610e0257565b600581101561206b5780611f785750565b60018103611fc55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036120125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b60031461201b57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9060418151146000146120af576120ab916020820151906060604084015193015160001a906120b9565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161213c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561212f5781516001600160a01b03811615612129579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b6001600160a01b03166000908152609a602052604090205460011461216c57600090565b600190565b1561217857565b60405162461bcd60e51b8152602060048201526015602482015274476174657761793a207a65726f206164647265737360581b6044820152606490fdfea264697066735822122087370b94dc4c971c5488522951415df7e9629379c607a35635e3a2615bdca26464736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0xC1 JUMPI PUSH1 0x0 SLOAD SWAP1 PUSH1 0xFF DUP3 PUSH1 0x8 SHR AND PUSH2 0x6F JUMPI POP PUSH1 0xFF DUP1 DUP3 AND SUB PUSH2 0x34 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21EB SWAP1 DUP2 PUSH2 0xC7 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0xFF SWAP1 DUP2 NOT AND OR PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xFF DUP2 MSTORE LOG1 CODESIZE PUSH2 0x25 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xB727DA EQ PUSH2 0x1BA6 JUMPI POP DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1B12 JUMPI DUP1 PUSH4 0x40EBC677 EQ PUSH2 0x1969 JUMPI DUP1 PUSH4 0x47094E2E EQ PUSH2 0x18FD JUMPI DUP1 PUSH4 0x47B0F1CD EQ PUSH2 0x16B2 JUMPI DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x15BD JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x159A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1533 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x1506 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x147F JUMPI DUP1 PUSH4 0x809804F7 EQ PUSH2 0xFF4 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0xE9B JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xE41 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE18 JUMPI DUP1 PUSH4 0x9A06601F EQ PUSH2 0xAE8 JUMPI DUP1 PUSH4 0x9BB39E13 EQ PUSH2 0x956 JUMPI DUP1 PUSH4 0x9C0FEA2C EQ PUSH2 0x896 JUMPI DUP1 PUSH4 0xB682B667 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xCD992400 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xD4FAC45D EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x18D JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x134 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0x13C PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x33 SLOAD SWAP1 SWAP2 AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x0 DUP1 LOG3 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x1CF PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH1 0x0 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x224 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x231 PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x246 DUP4 ISZERO ISZERO PUSH2 0x2171 JUMP JUMPDEST PUSH1 0x1 DUP2 EQ DUP1 ISZERO PUSH2 0x2E8 JUMPI JUMPDEST ISZERO PUSH2 0x2A3 JUMPI PUSH5 0x3A37B5B2B7 PUSH1 0xD9 SHL DUP3 EQ PUSH2 0x267 JUMPI STOP JUMPDEST PUSH1 0x20 PUSH32 0xCFA976492AF7C14A916CC3A239F4C9C75BBD7F5F0E398BEB41D892C7EECCAE4C SWAP2 DUP5 PUSH1 0x0 MSTORE PUSH1 0x9A DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A20696E76616C696420737461747573000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x2 DUP2 EQ PUSH2 0x251 JUMP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x40 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x98 SLOAD AND PUSH1 0x97 SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x188 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x188 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x378 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x1C63 JUMP JUMPDEST DUP2 DUP4 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0x188 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE PUSH2 0x3A1 PUSH2 0x1C16 JUMP JUMPDEST PUSH2 0x3A9 PUSH2 0x1C00 JUMP JUMPDEST SWAP2 PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x188 JUMPI PUSH2 0x3D2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x99 SLOAD AND CALLER EQ PUSH2 0x1EA4 JUMP JUMPDEST PUSH2 0x3DF PUSH1 0xA4 CALLDATALOAD ISZERO ISZERO PUSH2 0x1E69 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x83B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x7F6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x7B8 JUMPI PUSH2 0x49E PUSH2 0x4A6 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP8 PUSH1 0x60 SHL AND PUSH1 0x40 DUP4 ADD MSTORE DUP1 DUP9 PUSH1 0x60 SHL AND PUSH1 0x54 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 SHL AND PUSH1 0x68 DUP3 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0x7C DUP3 ADD MSTORE PUSH1 0x7C DUP2 MSTORE PUSH2 0x46A DUP2 PUSH2 0x1C48 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 PUSH2 0x2081 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x1F67 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND SUB PUSH2 0x77F JUMPI PUSH2 0x4DB PUSH2 0x4D2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x98 SLOAD AND PUSH1 0xA4 CALLDATALOAD PUSH2 0x1DF6 JUMP JUMPDEST PUSH1 0x97 SLOAD SWAP1 PUSH2 0x1E09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP5 DUP8 AND DUP5 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD PUSH2 0x512 DUP4 PUSH1 0xA4 CALLDATALOAD PUSH2 0x1DD1 JUMP JUMPDEST GT PUSH2 0x743 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x53F DUP3 PUSH1 0xA4 CALLDATALOAD PUSH2 0x1DD1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x575 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x1F5A JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x583 DUP2 PUSH2 0x1C48 JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP8 DUP4 AND PUSH1 0x40 DUP1 DUP8 ADD DUP3 DUP2 MSTORE PUSH1 0x84 CALLDATALOAD DUP7 AND PUSH1 0x60 DUP10 ADD DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x80 DUP13 ADD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH2 0x100 DUP10 MSTORE DUP7 DUP3 KECCAK256 SWAP13 MLOAD DUP14 SSTORE SWAP9 MLOAD PUSH1 0x1 DUP14 ADD DUP1 SLOAD SWAP2 DUP13 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP5 MLOAD PUSH1 0x2 DUP14 ADD DUP1 SLOAD SWAP2 DUP13 AND SWAP2 DUP8 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 MLOAD PUSH1 0x3 DUP13 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP11 AND SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP8 SSTORE SWAP5 MLOAD SWAP8 DUP2 ADD SWAP8 SWAP1 SWAP8 SSTORE MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP7 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x724 JUMPI JUMPDEST POP DUP2 PUSH2 0x69D JUMPI JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND DUP3 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA4 CALLDATALOAD SWAP5 DUP2 AND SWAP4 AND SWAP2 PUSH32 0x6E169B3FE3601F2C225FBDB8DE390ECCB476AD5A83176809AF89DAB4A7BEA32E SWAP2 LOG4 STOP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 DUP1 PUSH1 0x44 DUP2 ADD SUB DUP2 PUSH1 0x0 PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x6E9 JUMPI JUMPDEST DUP1 PUSH2 0x652 JUMP JUMPDEST PUSH2 0x70A SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x711 JUMPI JUMPDEST PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1DDE JUMP JUMPDEST POP DUP3 PUSH2 0x6E3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x73C SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP5 PUSH2 0x64B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x496E76616C69642073656E6465722061646472657373 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642070726F766964657220616464726573730000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F7264657220616C72656164792070726F636573736564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x0 PUSH1 0x80 PUSH1 0x40 MLOAD PUSH2 0x8B7 DUP2 PUSH2 0x1C48 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x100 PUSH1 0x20 MSTORE PUSH1 0xA0 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x8ED DUP2 PUSH2 0x1C48 JUMP JUMPDEST DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 DUP1 DUP6 SHL SUB SWAP1 DUP2 DUP1 PUSH1 0x1 DUP4 ADD SLOAD AND PUSH1 0x20 DUP6 ADD SWAP1 DUP2 MSTORE DUP2 DUP1 PUSH1 0x2 DUP6 ADD SLOAD AND SWAP2 PUSH1 0x40 DUP8 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 PUSH1 0x4 DUP4 PUSH1 0x3 DUP9 ADD SLOAD AND SWAP7 PUSH1 0x60 DUP11 ADD SWAP8 DUP9 MSTORE ADD SLOAD SWAP8 ADD SWAP7 DUP8 MSTORE PUSH1 0x40 MLOAD SWAP8 DUP9 MSTORE MLOAD AND PUSH1 0x20 DUP8 ADD MSTORE MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE MLOAD AND PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x80 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x0 PUSH2 0x120 PUSH1 0x40 MLOAD PUSH2 0x978 DUP2 PUSH2 0x1C2C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xFF PUSH1 0x20 MSTORE PUSH2 0x140 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x120 PUSH1 0x40 MLOAD PUSH2 0x9D0 DUP2 PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 SLOAD AND SWAP4 DUP5 DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 DUP3 ADD SLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x2 DUP3 ADD SLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x10 SHR AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x6 DUP3 ADD SLOAD AND PUSH2 0x100 DUP5 ADD MSTORE ADD SLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH2 0x100 DUP3 ADD MLOAD AND PUSH2 0x100 DUP5 ADD MSTORE ADD MLOAD PUSH2 0x120 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x24 CALLDATALOAD PUSH2 0xB04 PUSH2 0x1C16 JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x188 JUMPI PUSH1 0x99 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH2 0xB36 SWAP1 DUP4 AND CALLER EQ PUSH2 0x1EA4 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0xFF SWAP2 PUSH1 0x20 SWAP6 DUP4 DUP8 MSTORE PUSH2 0xB57 DUP5 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x1EE1 JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP4 DUP8 MSTORE PUSH2 0xB75 DUP5 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x1F1E JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP4 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x6 DUP4 PUSH1 0x1 DUP8 ADD SLOAD AND SWAP6 ADD SWAP5 DUP6 SLOAD SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP7 DUP10 DUP9 DUP3 AND SUB DUP9 DUP2 GT PUSH2 0xE02 JUMPI DUP9 AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND OR SWAP1 SSTORE DUP7 PUSH1 0x0 MSTORE DUP2 DUP10 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x6 DUP8 ADD SLOAD AND ISZERO PUSH2 0xD2B JUMPI JUMPDEST PUSH2 0xC59 SWAP6 POP PUSH2 0xBE9 PUSH2 0x4D2 DUP10 PUSH1 0x7 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1DF6 JUMP JUMPDEST SWAP2 DUP8 PUSH1 0x0 MSTORE DUP10 MSTORE PUSH1 0x7 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0xC03 DUP4 DUP3 SLOAD PUSH2 0x1F5A JUMP JUMPDEST SWAP1 SSTORE DUP9 PUSH2 0xC22 PUSH2 0xC1B PUSH2 0x4D2 PUSH1 0x98 SLOAD SWAP7 DUP8 AND DUP7 PUSH2 0x1DF6 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1F5A JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD DUP1 SWAP9 DUP2 SWAP3 DUP9 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP9 DUP10 DUP6 MSTORE PUSH1 0x40 SHR AND PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB DUP2 PUSH1 0x0 DUP6 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x718 JUMPI PUSH2 0xCA3 SWAP7 DUP11 SWAP5 PUSH2 0xD0E JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP5 DUP6 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x718 JUMPI PUSH32 0xD466BE5516D4D2372B27B6E13104CD3F5D1656E5C9E5AE9A6939DA8CF62DBBDE SWAP4 PUSH1 0x40 SWAP4 PUSH2 0xCF1 JUMPI JUMPDEST POP DUP3 MLOAD SWAP6 PUSH1 0x4 CALLDATALOAD DUP8 MSTORE DUP8 DUP8 ADD MSTORE AND SWAP4 LOG3 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0xD07 SWAP1 DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP8 PUSH2 0xCD8 JUMP JUMPDEST PUSH2 0xD24 SWAP1 DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP11 PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x5 DUP7 ADD PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP9 PUSH1 0x3 DUP8 ADD SLOAD DUP1 PUSH2 0xD4D JUMPI JUMPDEST POP POP PUSH2 0xBCF JUMP JUMPDEST PUSH1 0x1 DUP9 ADD SLOAD PUSH1 0x2 SWAP1 SWAP9 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP7 DUP8 SWAP1 DUP7 AND DUP2 PUSH1 0x0 DUP2 PUSH1 0x44 DUP2 ADD SUB SWAP3 GAS CALL SWAP6 DUP7 ISZERO PUSH2 0x718 JUMPI PUSH2 0xC59 SWAP7 PUSH2 0xDE5 JUMPI JUMPDEST POP DUP7 PUSH1 0x0 MSTORE DUP2 DUP10 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x3 DUP6 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP2 ADD SLOAD SWAP1 PUSH32 0x44F6938CA4A10313AABB76F874CCED61E35710A734A126E4AFB34461BF8C2501 PUSH1 0x0 DUP1 LOG3 DUP9 DUP11 PUSH2 0xD46 JUMP JUMPDEST PUSH2 0xDFB SWAP1 DUP11 RETURNDATASIZE DUP13 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP10 PUSH2 0xD9F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0xE5A PUSH2 0x1CD5 JUMP JUMPDEST PUSH2 0xE62 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xCD SLOAD AND OR PUSH1 0xCD SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO DUP1 DUP1 SWAP2 PUSH2 0xFE7 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0xFD0 JUMPI JUMPDEST ISZERO PUSH2 0xF74 JUMPI PUSH1 0xFF NOT DUP3 DUP2 AND PUSH1 0x1 OR PUSH1 0x0 SSTORE SWAP2 DUP2 PUSH2 0xF62 JUMPI JUMPDEST POP PUSH3 0x186A0 PUSH1 0x97 SSTORE PUSH2 0xF00 PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND PUSH2 0xEFB DUP2 PUSH2 0x1D2D JUMP JUMPDEST PUSH2 0x1D2D JUMP JUMPDEST PUSH2 0xF09 CALLER PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP2 PUSH2 0xF20 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH2 0xEFB DUP2 PUSH2 0x1D2D JUMP JUMPDEST PUSH1 0xCD SLOAD AND PUSH1 0xCD SSTORE PUSH2 0xF2D JUMPI STOP JUMPDEST PUSH2 0xFF00 NOT AND PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR PUSH1 0x0 SSTORE DUP3 PUSH2 0xEDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEC6 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP4 AND EQ PUSH2 0xEC6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP4 AND LT PUSH2 0xEBF JUMP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x100D PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x188 JUMPI PUSH2 0x1028 PUSH2 0x1C00 JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x188 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC4 CALLDATALOAD GT PUSH2 0x188 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0xC4 CALLDATALOAD ADD SLT ISZERO PUSH2 0x188 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0x188 JUMPI CALLDATASIZE PUSH1 0x24 PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0xC4 CALLDATALOAD ADD ADD GT PUSH2 0x188 JUMPI PUSH2 0x1088 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x10AD SWAP1 PUSH1 0x1 EQ PUSH2 0x1E29 JUMP JUMPDEST PUSH2 0x10BA PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x1E69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1447 JUMPI PUSH1 0x84 CALLDATALOAD PUSH2 0x13F4 JUMPI JUMPDEST PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD ISZERO PUSH2 0x13BA JUMPI PUSH2 0x111D PUSH1 0x20 PUSH2 0x10F0 PUSH1 0x84 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP3 SWAP1 DUP2 SWAP1 PUSH1 0x64 DUP3 ADD SWAP1 JUMP JUMPDEST SUB DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x139B JUMPI JUMPDEST POP CALLER PUSH1 0x0 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xE02 JUMPI PUSH1 0x20 SWAP6 PUSH1 0x7 SWAP5 PUSH1 0x1 PUSH32 0x40CCD1CEB111A3C186EF9911E1B876DC1F789ED331B86097B3B8851055B6A137 SWAP4 ADD SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH2 0x101 DUP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH2 0x11C2 PUSH2 0x11D0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 CALLER DUP14 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1C63 JUMP JUMPDEST DUP9 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x11EF DUP2 PUSH1 0x98 SLOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x11FC PUSH1 0x97 SLOAD DUP1 SWAP3 PUSH2 0x1E09 JUMP JUMPDEST SWAP8 PUSH1 0x40 MLOAD SWAP8 PUSH2 0x120A DUP10 PUSH2 0x1C2C JUMP JUMPDEST CALLER DUP10 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND DUP14 DUP11 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP10 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 DUP10 ADD MSTORE DUP9 PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP10 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 DUP9 ADD MSTORE AND PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH2 0x120 DUP7 ADD MSTORE DUP8 PUSH1 0x0 MSTORE PUSH1 0xFF DUP10 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x120 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 MLOAD AND SWAP7 DUP5 PUSH1 0xA0 SHL DUP9 DUP2 DUP6 SLOAD AND OR DUP5 SSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP15 DUP5 ADD MLOAD AND DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x2 DUP5 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP5 ADD MLOAD AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x5 DUP4 ADD PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO DUP2 SLOAD PUSH2 0xFF00 PUSH1 0xC0 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP1 PUSH1 0xFF PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB PUSH1 0xE0 DUP8 ADD MLOAD PUSH1 0x10 SHL AND SWAP4 AND SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0xB0 SHL AND OR OR OR SWAP1 SSTORE PUSH1 0x6 DUP4 ADD DUP6 PUSH2 0x100 DUP4 ADD MLOAD AND DUP7 NOT DUP3 SLOAD AND OR SWAP1 SSTORE ADD MLOAD SWAP8 DUP9 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE DUP8 DUP10 DUP8 ADD MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x24 PUSH1 0xC4 CALLDATALOAD ADD PUSH1 0xA0 DUP7 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xA0 PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP7 ADD ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH1 0xA0 DUP2 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD ADD AND DUP2 ADD SUB ADD SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x13B3 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP5 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x92DCECC2D8D2C89ACAE6E6C2CECA90C2E6D PUSH1 0x73 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696453656E646572466565526563697069656E7400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x5468726F775A65726F41646472657373 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x65 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14AF JUMPI PUSH2 0x14AD CALLER PUSH2 0x1C84 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x20 PUSH2 0x1529 PUSH2 0x1524 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x154C PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x33 DUP1 SLOAD SWAP2 DUP3 AND SWAP1 SSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCD SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x15D6 PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x9A DUP4 MSTORE PUSH2 0x15FE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD EQ PUSH2 0x1E29 JUMP JUMPDEST PUSH2 0x1609 DUP2 ISZERO ISZERO PUSH2 0x1E69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE DUP4 DUP2 PUSH1 0x64 DUP2 PUSH1 0x0 DUP8 GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x1695 JUMPI JUMPDEST POP DUP2 PUSH1 0x0 MSTORE PUSH2 0x102 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1663 DUP3 DUP3 SLOAD PUSH2 0x1DD1 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 CALLER PUSH32 0x5548C837AB068CF56A2C2479DF0882A4922FD203EDB7517321831D95078C5F62 PUSH1 0x0 DUP1 LOG4 PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x16AB SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP4 PUSH2 0x163E JUMP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x16DF DUP2 PUSH1 0x99 SLOAD AND CALLER EQ PUSH2 0x1EA4 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0xFF SWAP3 PUSH1 0x20 SWAP4 DUP1 DUP6 MSTORE PUSH2 0x1700 DUP2 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x1EE1 JUMP JUMPDEST DUP4 PUSH1 0x0 MSTORE DUP1 DUP6 MSTORE PUSH2 0x171E DUP2 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x1F1E JUMP JUMPDEST DUP4 PUSH1 0x0 MSTORE DUP1 DUP6 MSTORE DUP2 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD LT PUSH2 0x18C0 JUMPI DUP5 SWAP1 DUP3 PUSH2 0x183F JUMPI JUMPDEST PUSH2 0x17DD SWAP4 DUP6 PUSH1 0x0 MSTORE DUP2 DUP4 MSTORE PUSH2 0x177C DUP5 PUSH1 0x7 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x5 DUP2 ADD PUSH2 0x100 PUSH2 0xFF00 NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x6 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP2 SLOAD AND SWAP1 SSTORE ADD SLOAD PUSH2 0x1F5A JUMP JUMPDEST SWAP2 DUP7 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH2 0x17A8 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x3 DUP4 PUSH1 0x1 DUP7 ADD SLOAD AND SWAP4 PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x10 SHR AND SWAP5 ADD SLOAD SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP4 DUP5 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x718 JUMPI PUSH32 0x736FE428E1747CA8D387C2E6FA1A31A0CDE62D3A167C40A46ADE59A3CDC828E SWAP3 DUP6 SWAP3 PUSH2 0x1822 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x1838 SWAP1 DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP6 PUSH2 0x1811 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE DUP2 DUP8 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x98 SLOAD DUP3 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SHR DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP6 SWAP4 POP DUP8 SWAP2 DUP7 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 DUP8 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x718 JUMPI PUSH2 0x17DD SWAP5 DUP8 SWAP4 PUSH2 0x18A3 JUMPI JUMPDEST POP SWAP4 POP PUSH2 0x173C JUMP JUMPDEST PUSH2 0x18B9 SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP8 PUSH2 0x189B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4665654578636565647350726F746F636F6C466565 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x188 JUMPI PUSH1 0x20 PUSH32 0x1CE29A697A4765BD17D91DF93BA75B250B629ECF030553FF1F6AB59F15AE6C7B SWAP2 PUSH2 0x194E PUSH2 0x1CD5 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT PUSH1 0x98 SLOAD AND OR PUSH1 0x98 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1985 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 PUSH2 0x198E PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP3 PUSH2 0x19A5 DUP5 ISZERO ISZERO PUSH2 0x2171 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7472656173757279 PUSH1 0xC0 SHL DUP5 SUB PUSH2 0x1A7B JUMPI POP DUP4 PUSH1 0x98 SLOAD SWAP3 DUP4 PUSH1 0x40 SHR AND EQ PUSH2 0x1A28 JUMPI PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND OR PUSH1 0x98 SSTORE PUSH1 0x1 JUMPDEST PUSH2 0x1A01 JUMPI STOP JUMPDEST PUSH32 0xBBC5B96E57CFECB3DBEEADF92E87F15E58E64FCD75CBE256DCC5D9EF2E51E8A4 PUSH1 0x0 DUP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A207472656173757279206164647265737320616C72656164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1E481CD95D PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP PUSH10 0x30B3B3B932B3B0BA37B9 PUSH1 0xB1 SHL DUP4 EQ PUSH2 0x1A99 JUMPI JUMPDEST POP PUSH2 0x19FB JUMP JUMPDEST PUSH1 0x99 SLOAD SWAP2 POP DUP2 AND DUP4 EQ PUSH2 0x1ABD JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR PUSH1 0x99 SSTORE PUSH1 0x1 DUP4 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A2061676772656761746F72206164647265737320616C7265 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x18591E481CD95D PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x1B2B PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0xCD SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1B6A JUMPI PUSH1 0xFF NOT AND PUSH1 0xCD SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x103 DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x880 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x880 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x880 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 DUP2 PUSH1 0x65 SLOAD AND PUSH1 0x65 SSTORE PUSH1 0x33 SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP1 SWAP4 DUP3 AND OR PUSH1 0x33 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1CE9 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x1D34 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0xFF PUSH1 0xCD SLOAD AND PUSH2 0x1D99 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xE02 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x188 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x188 JUMPI SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0xE02 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1E13 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1E30 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x151BDAD95B939BDD14DD5C1C1BDC9D1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1E70 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x416D6F756E7449735A65726F PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1EAB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x27B7363CA0B3B3B932B3B0BA37B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1EE8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x13DC99195C919D5B199A5B1B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1F25 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x13DC99195C9499599D5B991959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xE02 JUMPI JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x206B JUMPI DUP1 PUSH2 0x1F78 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1FC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x2012 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 EQ PUSH2 0x201B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x41 DUP2 MLOAD EQ PUSH1 0x0 EQ PUSH2 0x20AF JUMPI PUSH2 0x20AB SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x0 BYTE SWAP1 PUSH2 0x20B9 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x213C JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x212F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x2129 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0x216C JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2178 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x476174657761793A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 CALLDATACOPY SIGNEXTEND SWAP5 0xDC 0x4C SWAP8 SHR SLOAD DUP9 MSTORE 0x29 MLOAD COINBASE 0x5D 0xF7 0xE9 PUSH3 0x9379C6 SMOD LOG3 JUMP CALLDATALOAD 0xE3 LOG2 PUSH2 0x5BDC LOG2 PUSH5 0x64736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"466:11692:11:-:0;;;;;;;6007:13:2;466:11692:11;;;;;;;;;;;;;;6078:31:2;6074:139;;-1:-1:-1;466:11692:11;;;;;;;;;6074:139:2;466:11692:11;;;;;;6007:13:2;466:11692:11;6174:28:2;466:11692:11;;;;;;6174:28:2;6074:139;;;466:11692:11;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":7168,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_30844":{"entryPoint":7124,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_30847":{"entryPoint":7146,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_30854":{"entryPoint":7190,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":7646,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":7633,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint256":{"entryPoint":7689,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":7670,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":8026,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":7267,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_30853":{"entryPoint":7212,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_30858":{"entryPoint":7240,"id":null,"parameterSlots":1,"returnSlots":0},"fun_checkOwner":{"entryPoint":7381,"id":176,"parameterSlots":0,"returnSlots":0},"fun_isTokenSupported":{"entryPoint":8520,"id":3393,"parameterSlots":1,"returnSlots":1},"fun_requireNotPaused":{"entryPoint":7565,"id":487,"parameterSlots":0,"returnSlots":0},"fun_throwError":{"entryPoint":8039,"id":1278,"parameterSlots":1,"returnSlots":0},"fun_transferOwnership":{"entryPoint":7300,"id":78,"parameterSlots":1,"returnSlots":0},"fun_tryRecover":{"entryPoint":8377,"id":1492,"parameterSlots":4,"returnSlots":2},"fun_tryRecover_1324":{"entryPoint":8321,"id":1324,"parameterSlots":2,"returnSlots":2},"require_helper_stringliteral":{"entryPoint":7905,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_0ab1":{"entryPoint":7966,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_1ed1":{"entryPoint":8561,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_41a3":{"entryPoint":7785,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d2f8":{"entryPoint":7721,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d688":{"entryPoint":7469,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_feaf":{"entryPoint":7844,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c908162b727da14611ba6575080633f4ba83a14611b1257806340ebc6771461196957806347094e2e146118fd57806347b0f1cd146116b257806347e7ef24146115bd5780635c975abb1461159a578063715018a61461153357806375151b631461150657806379ba50971461147f578063809804f714610ff45780638129fc1c14610e9b5780638456cb5914610e415780638da5cb5b14610e185780639a06601f14610ae85780639bb39e13146109565780639c0fea2c14610896578063b682b66714610320578063b810c636146102f2578063cd99240014610208578063d4fac45d146101b6578063e30c39781461018d5763f2fde38b1461011b57600080fd5b3461018857602036600319011261018857610134611bea565b61013c611cd5565b606580546001600160a01b0319166001600160a01b039283169081179091556033549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b600080fd5b34610188576000366003190112610188576065546040516001600160a01b039091168152602090f35b34610188576040366003190112610188576101cf611bea565b6101d7611bd4565b9060018060a01b03809116600052610102602052604060002091166000526020526020604060002054604051908152f35b3461018857606036600319011261018857600435610224611bd4565b9060443591610231611cd5565b6001600160a01b031691610246831515612171565b6001811480156102e8575b156102a357643a37b5b2b760d91b821461026757005b60207fcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c9184600052609a825280604060002055604051908152a3005b60405162461bcd60e51b815260206004820152601760248201527f476174657761793a20696e76616c6964207374617475730000000000000000006044820152606490fd5b5060028114610251565b346101885760003660031901126101885760406001600160401b036098541660975482519182526020820152f35b346101885760c0366003190112610188576024356001600160401b03811161018857366023820112156101885780600401356001600160401b0381116108805760405191610378601f8301601f191660200184611c63565b8183523660248383010111610188578160009260246020930183860137830101526103a1611c16565b6103a9611c00565b916084356001600160a01b0381169003610188576103d260018060a01b03609954163314611ea4565b6103df60a4351515611e69565b60043560005261010360205260ff6040600020541661083b576001600160a01b038216156107f6576001600160a01b038316156107b85761049e6104a691604051602081019060043582526001600160601b0319808760601b166040830152808860601b16605483015260843560601b16606882015260a435607c820152607c815261046a81611c48565b5190207f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52603c600020612081565b919091611f67565b6001600160a01b0382811691160361077f576104db6104d26001600160401b036098541660a435611df6565b60975490611e09565b6001600160a01b0360843581166000908152610102602081815260408084209487168452939052919020546105128360a435611dd1565b11610743576004356000526101036020526040600020600160ff1982541617905561053f8260a435611dd1565b9060018060a01b0360843516600052602052604060002060018060a01b0384166000526020526105756040600020918254611f5a565b905560405161058381611c48565b60a4358082526001600160a01b03848116602080850191825287831660408087018281526084358616606089018181526004803560808c01818152600091825261010089528682209c518d55985160018d018054918c166001600160a01b0319928316179055945160028d018054918c16918716919091179055915160038c01805491909a169416939093179097559451978101979097555163a9059cbb60e01b80825296810191909152602481019490945291839160449183915af1801561071857610724575b508161069d575b5050604080516001600160a01b0360843581168252600435602083015260a4359481169316917f6e169b3fe3601f2c225fbdb8de390eccb476ad5a83176809af89dab4a7bea32e91a4005b609854604080519283521c6001600160a01b0316600482015260248101919091526020818060448101038160006084356001600160a01b03165af18015610718576106e9575b80610652565b61070a9060203d602011610711575b6107028183611c63565b810190611dde565b50826106e3565b503d6106f8565b6040513d6000823e3d90fd5b61073c9060203d602011610711576107028183611c63565b508461064b565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656e646572206164647265737360501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f496e76616c69642070726f7669646572206164647265737300000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4f7264657220616c72656164792070726f6365737365640000000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b3461018857602036600319011261018857600060806040516108b781611c48565b828152826020820152826040820152826060820152015260043560005261010060205260a060406000206040516108ed81611c48565b815491828252600180851b03908180600183015416602085019081528180600285015416916040870192835260806004836003880154169660608a0197885201549701968752604051978852511660208701525116604085015251166060830152516080820152f35b3461018857602036600319011261018857600061012060405161097881611c2c565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152015260043560005260ff60205261014060406000206101206040516109d081611c2c565b600760018060a01b038454169384835260018060a01b03600182015416602084015260018060a01b0360028201541660408401526003810154606084015260048101546080840152600581015460ff8116151560a085015260ff8160081c16151560c085015260018060a01b039060101c1660e08401526001600160601b0360068201541661010084015201548282015260405192835260018060a01b03602082015116602084015260018060a01b036040820151166040840152606081015160608401526080810151608084015260a0810151151560a084015260c0810151151560c084015260018060a01b0360e08201511660e08401526001600160601b03610100820151166101008401520151610120820152f35b3461018857608036600319011261018857602435610b04611c16565b90606435906001600160401b0392838316809303610188576099546001600160a01b039190610b369083163314611ea4565b8260005260ff91602095838752610b57846005604060002001541615611ee1565b84600052838752610b758460056040600020015460081c1615611f1e565b846000528387526040600020936006836001870154169501948554956001600160601b03968988821603888111610e02578816906001600160601b0319161790558660005281895260406000209560068701541615610d2b575b610c599550610be96104d289600760406000200154611df6565b918760005289526007604060002001610c03838254611f5a565b905588610c22610c1b6104d260985496871686611df6565b8094611f5a565b92604051809881928863a9059cbb60e01b9889855260401c166004840160209093929193604081019460018060a01b031681520152565b03816000855af192831561071857610ca3968a94610d0e575b506040519081526001600160a01b038616600482015260248101929092529094859190829060009082906044820190565b03925af1918215610718577fd466be5516d4d2372b27b6e13104cd3f5d1656e5c9e5ae9a6939da8cf62dbbde93604093610cf1575b508251956004358752878701521693a360405160018152f35b610d0790883d8a11610711576107028183611c63565b5087610cd8565b610d2490853d8711610711576107028183611c63565b508a610c72565b60058601600160ff1982541617905588600387015480610d4d575b5050610bcf565b600188015460029098015460405163a9059cbb60e01b81529087166001600160a01b0316600482015260248101919091529687908616816000816044810103925af195861561071857610c5996610de5575b50866000528189526040600020600385600283015416910154907f44f6938ca4a10313aabb76f874cced61e35710a734a126e4afb34461bf8c2501600080a3888a610d46565b610dfb908a3d8c11610711576107028183611c63565b5089610d9f565b634e487b7160e01b600052601160045260246000fd5b34610188576000366003190112610188576033546040516001600160a01b039091168152602090f35b3461018857600036600319011261018857610e5a611cd5565b610e62611d8d565b600160ff1960cd54161760cd557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346101885760003660031901126101885760005460ff8160081c1615808091610fe7575b8015610fd0575b15610f745760ff198281166001176000559181610f62575b50620186a0609755610f0060ff60005460081c16610efb81611d2d565b611d2d565b610f0933611c84565b60005491610f2060ff8460081c16610efb81611d2d565b60cd541660cd55610f2d57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff19166101011760005582610ede565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610ec65750600160ff831614610ec6565b50600160ff831610610ebf565b346101885760e03660031901126101885761100d611bea565b6044356001600160601b038116810361018857611028611c00565b60a4356001600160a01b0381168103610188576001600160401b0360c435116101885736602360c435011215610188576001600160401b0360c43560040135116101885736602460c4356004013560c43501011161018857611088611d8d565b6001600160a01b0384166000908152609a60205260409020546110ad90600114611e29565b6110ba6024351515611e69565b6001600160a01b03811615611447576084356113f4575b60c43560040135156113ba5761111d60206110f0608435602435611dd1565b6040516323b872dd60e01b8152336004820152306024820152604481019190915291829081906064820190565b038160006001600160a01b038a165af180156107185761139b575b503360005261010160205260406000209182546000198114610e025760209560079460017f40ccd1ceb111a3c186ef9911e1b876dc1f789ed331b86097b3b8851055b6a137930190553360005261010187526001600160601b036111c26111d0604060002054604051928391338d840160209093929193604081019460018060a01b031681520152565b03601f198101835282611c63565b888151910120966001600160401b036111ef8160985416602435611df6565b6111fc6097548092611e09565b976040519761120a89611c2c565b33895260018060a01b0387168d8a015260018060a01b031660408901526084356060890152886080890152600060a0890152600060c089015260018060a01b031660e0880152166101008601526024356101208601528760005260ff8952604060002061012060018060a01b03875116968460a01b88818554161784556001840160018060a01b038e8401511682825416179055600284019060018060a01b036040840151169082541617905560608101516003840155608081015160048401556005830160a08201511515815461ff0060c0850151151560081b169060ff62010000600160b01b0360e087015160101b1693169069ffffffffffffffffffff60b01b16171717905560068301856101008301511686198254161790550151978891015560405195865287898701521660408501526080606085015260c43560040135608085015260c43560040135602460c4350160a0860137600060a060c435600401358601015260018060a01b03169260a081601f19601f60c4356004013501168101030190a4604051908152f35b6113b39060203d602011610711576107028183611c63565b5084611138565b60405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c89acae6e6c2ceca90c2e6d60731b6044820152606490fd5b6001600160a01b0382166110d15760405162461bcd60e51b815260206004820152601960248201527f496e76616c696453656e646572466565526563697069656e74000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f5468726f775a65726f4164647265737360801b6044820152606490fd5b3461018857600036600319011261018857606554336001600160a01b03909116036114af576114ad33611c84565b005b60405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b34610188576020366003190112610188576020611529611524611bea565b612148565b6040519015158152f35b346101885760003660031901126101885761154c611cd5565b606580546001600160a01b03199081169091556033805491821690556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461018857600036600319011261018857602060ff60cd54166040519015158152f35b34610188576040366003190112610188576115d6611bea565b6024359060018060a01b031680600052602091609a83526115fe600160406000205414611e29565b611609811515611e69565b6040516323b872dd60e01b81523360048201523060248201526044810182905283816064816000875af1801561071857611695575b5081600052610102835260406000203360005283526040600020611663828254611dd1565b905560405191337f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62600080a460018152f35b6116ab90843d8611610711576107028183611c63565b508361163e565b346101885760403660031901126101885760043560243560018060a01b036116df81609954163314611ea4565b8160005260ff92602093808552611700816005604060002001541615611ee1565b8360005280855261171e8160056040600020015460081c1615611f1e565b8360005280855281600460406000200154106118c05784908261183f575b6117dd938560005281835261177c84600760406000206005810161010061ff0019825416179055600681016001600160601b031981541690550154611f5a565b918660005283526117a860406000209260038360018601541693600586015460101c1694015490611dd1565b60405163a9059cbb60e01b81526001600160a01b03909316600484015260248301529093849190829060009082906044820190565b03925af1908115610718577f0736fe428e1747ca8d387c2e6fa1a31a0cde62d3a167c40a46ade59a3cdc828e928592611822575b50604051908152a260405160018152f35b61183890833d8511610711576107028183611c63565b5085611811565b6000858152818752604080822060010154609854825163a9059cbb60e01b8152921c87166001600160a01b03166004830152602482018690529095935087918691604491839187165af1918215610718576117dd9487936118a3575b50935061173c565b6118b990843d8611610711576107028183611c63565b508761189b565b60405162461bcd60e51b81526004810186905260156024820152744665654578636565647350726f746f636f6c46656560581b6044820152606490fd5b34610188576020366003190112610188576004356001600160401b0381168091036101885760207f1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b9161194e611cd5565b806001600160401b03196098541617609855604051908152a1005b3461018857604036600319011261018857600435611985611bd4565b9061198e611cd5565b6001600160a01b03828116926119a5841515612171565b600067747265617375727960c01b8403611a7b575083609854928360401c1614611a285768010000000000000000600160e01b031990911660409190911b68010000000000000000600160e01b03161760985560015b611a0157005b7fbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a4600080a3005b60405162461bcd60e51b815260206004820152602560248201527f476174657761793a207472656173757279206164647265737320616c726561646044820152641e481cd95d60da1b6064820152608490fd5b9190506930b3b3b932b3b0ba37b960b11b8314611a99575b506119fb565b609954915081168314611abd576001600160a01b0319168217609955600183611a93565b60405162461bcd60e51b815260206004820152602760248201527f476174657761793a2061676772656761746f72206164647265737320616c726560448201526618591e481cd95d60ca1b6064820152608490fd5b3461018857600036600319011261018857611b2b611cd5565b60cd5460ff811615611b6a5760ff191660cd557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461018857602036600319011261018857602090600435600052610103825260ff6040600020541615158152f35b602435906001600160a01b038216820361018857565b600435906001600160a01b038216820361018857565b606435906001600160a01b038216820361018857565b604435906001600160a01b038216820361018857565b61014081019081106001600160401b0382111761088057604052565b60a081019081106001600160401b0382111761088057604052565b90601f801991011681019081106001600160401b0382111761088057604052565b6001600160601b0360a01b90816065541660655560335460018060a01b038092168093821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6033546001600160a01b03163303611ce957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611d3457565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60ff60cd5416611d9957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b91908201809211610e0257565b90816020910312610188575180151581036101885790565b81810292918115918404141715610e0257565b8115611e13570490565b634e487b7160e01b600052601260045260246000fd5b15611e3057565b60405162461bcd60e51b8152602060048201526011602482015270151bdad95b939bdd14dd5c1c1bdc9d1959607a1b6044820152606490fd5b15611e7057565b60405162461bcd60e51b815260206004820152600c60248201526b416d6f756e7449735a65726f60a01b6044820152606490fd5b15611eab57565b60405162461bcd60e51b815260206004820152600e60248201526d27b7363ca0b3b3b932b3b0ba37b960911b6044820152606490fd5b15611ee857565b60405162461bcd60e51b815260206004820152600e60248201526d13dc99195c919d5b199a5b1b195960921b6044820152606490fd5b15611f2557565b60405162461bcd60e51b815260206004820152600d60248201526c13dc99195c9499599d5b991959609a1b6044820152606490fd5b91908203918211610e0257565b600581101561206b5780611f785750565b60018103611fc55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036120125760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b60031461201b57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b634e487b7160e01b600052602160045260246000fd5b9060418151146000146120af576120ab916020820151906060604084015193015160001a906120b9565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161213c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa1561212f5781516001600160a01b03811615612129579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b6001600160a01b03166000908152609a602052604090205460011461216c57600090565b600190565b1561217857565b60405162461bcd60e51b8152602060048201526015602482015274476174657761793a207a65726f206164647265737360581b6044820152606490fdfea264697066735822122087370b94dc4c971c5488522951415df7e9629379c607a35635e3a2615bdca26464736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xB727DA EQ PUSH2 0x1BA6 JUMPI POP DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1B12 JUMPI DUP1 PUSH4 0x40EBC677 EQ PUSH2 0x1969 JUMPI DUP1 PUSH4 0x47094E2E EQ PUSH2 0x18FD JUMPI DUP1 PUSH4 0x47B0F1CD EQ PUSH2 0x16B2 JUMPI DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x15BD JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x159A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1533 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x1506 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x147F JUMPI DUP1 PUSH4 0x809804F7 EQ PUSH2 0xFF4 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0xE9B JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xE41 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE18 JUMPI DUP1 PUSH4 0x9A06601F EQ PUSH2 0xAE8 JUMPI DUP1 PUSH4 0x9BB39E13 EQ PUSH2 0x956 JUMPI DUP1 PUSH4 0x9C0FEA2C EQ PUSH2 0x896 JUMPI DUP1 PUSH4 0xB682B667 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xCD992400 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xD4FAC45D EQ PUSH2 0x1B6 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x18D JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x134 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0x13C PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x33 SLOAD SWAP1 SWAP2 AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x0 DUP1 LOG3 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x1CF PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0x1D7 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH1 0x0 MSTORE PUSH2 0x102 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x224 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x231 PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0x246 DUP4 ISZERO ISZERO PUSH2 0x2171 JUMP JUMPDEST PUSH1 0x1 DUP2 EQ DUP1 ISZERO PUSH2 0x2E8 JUMPI JUMPDEST ISZERO PUSH2 0x2A3 JUMPI PUSH5 0x3A37B5B2B7 PUSH1 0xD9 SHL DUP3 EQ PUSH2 0x267 JUMPI STOP JUMPDEST PUSH1 0x20 PUSH32 0xCFA976492AF7C14A916CC3A239F4C9C75BBD7F5F0E398BEB41D892C7EECCAE4C SWAP2 DUP5 PUSH1 0x0 MSTORE PUSH1 0x9A DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A20696E76616C696420737461747573000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x2 DUP2 EQ PUSH2 0x251 JUMP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x40 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x98 SLOAD AND PUSH1 0x97 SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x188 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x188 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x378 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x1C63 JUMP JUMPDEST DUP2 DUP4 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0x188 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x24 PUSH1 0x20 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE PUSH2 0x3A1 PUSH2 0x1C16 JUMP JUMPDEST PUSH2 0x3A9 PUSH2 0x1C00 JUMP JUMPDEST SWAP2 PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x188 JUMPI PUSH2 0x3D2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x99 SLOAD AND CALLER EQ PUSH2 0x1EA4 JUMP JUMPDEST PUSH2 0x3DF PUSH1 0xA4 CALLDATALOAD ISZERO ISZERO PUSH2 0x1E69 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x83B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x7F6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x7B8 JUMPI PUSH2 0x49E PUSH2 0x4A6 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP8 PUSH1 0x60 SHL AND PUSH1 0x40 DUP4 ADD MSTORE DUP1 DUP9 PUSH1 0x60 SHL AND PUSH1 0x54 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 SHL AND PUSH1 0x68 DUP3 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0x7C DUP3 ADD MSTORE PUSH1 0x7C DUP2 MSTORE PUSH2 0x46A DUP2 PUSH2 0x1C48 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 PUSH2 0x2081 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x1F67 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND SUB PUSH2 0x77F JUMPI PUSH2 0x4DB PUSH2 0x4D2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x98 SLOAD AND PUSH1 0xA4 CALLDATALOAD PUSH2 0x1DF6 JUMP JUMPDEST PUSH1 0x97 SLOAD SWAP1 PUSH2 0x1E09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH2 0x102 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP5 DUP8 AND DUP5 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 KECCAK256 SLOAD PUSH2 0x512 DUP4 PUSH1 0xA4 CALLDATALOAD PUSH2 0x1DD1 JUMP JUMPDEST GT PUSH2 0x743 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x103 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x53F DUP3 PUSH1 0xA4 CALLDATALOAD PUSH2 0x1DD1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x575 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x1F5A JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH2 0x583 DUP2 PUSH2 0x1C48 JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP8 DUP4 AND PUSH1 0x40 DUP1 DUP8 ADD DUP3 DUP2 MSTORE PUSH1 0x84 CALLDATALOAD DUP7 AND PUSH1 0x60 DUP10 ADD DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATALOAD PUSH1 0x80 DUP13 ADD DUP2 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH2 0x100 DUP10 MSTORE DUP7 DUP3 KECCAK256 SWAP13 MLOAD DUP14 SSTORE SWAP9 MLOAD PUSH1 0x1 DUP14 ADD DUP1 SLOAD SWAP2 DUP13 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE SWAP5 MLOAD PUSH1 0x2 DUP14 ADD DUP1 SLOAD SWAP2 DUP13 AND SWAP2 DUP8 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 MLOAD PUSH1 0x3 DUP13 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP11 AND SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP8 SSTORE SWAP5 MLOAD SWAP8 DUP2 ADD SWAP8 SWAP1 SWAP8 SSTORE MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP7 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x724 JUMPI JUMPDEST POP DUP2 PUSH2 0x69D JUMPI JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x84 CALLDATALOAD DUP2 AND DUP3 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA4 CALLDATALOAD SWAP5 DUP2 AND SWAP4 AND SWAP2 PUSH32 0x6E169B3FE3601F2C225FBDB8DE390ECCB476AD5A83176809AF89DAB4A7BEA32E SWAP2 LOG4 STOP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 DUP1 PUSH1 0x44 DUP2 ADD SUB DUP2 PUSH1 0x0 PUSH1 0x84 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x6E9 JUMPI JUMPDEST DUP1 PUSH2 0x652 JUMP JUMPDEST PUSH2 0x70A SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x711 JUMPI JUMPDEST PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1DDE JUMP JUMPDEST POP DUP3 PUSH2 0x6E3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x73C SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP5 PUSH2 0x64B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742062616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964207369676E6174757265 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x496E76616C69642073656E6465722061646472657373 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642070726F766964657220616464726573730000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F7264657220616C72656164792070726F636573736564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x0 PUSH1 0x80 PUSH1 0x40 MLOAD PUSH2 0x8B7 DUP2 PUSH2 0x1C48 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x100 PUSH1 0x20 MSTORE PUSH1 0xA0 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x8ED DUP2 PUSH2 0x1C48 JUMP JUMPDEST DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 DUP1 DUP6 SHL SUB SWAP1 DUP2 DUP1 PUSH1 0x1 DUP4 ADD SLOAD AND PUSH1 0x20 DUP6 ADD SWAP1 DUP2 MSTORE DUP2 DUP1 PUSH1 0x2 DUP6 ADD SLOAD AND SWAP2 PUSH1 0x40 DUP8 ADD SWAP3 DUP4 MSTORE PUSH1 0x80 PUSH1 0x4 DUP4 PUSH1 0x3 DUP9 ADD SLOAD AND SWAP7 PUSH1 0x60 DUP11 ADD SWAP8 DUP9 MSTORE ADD SLOAD SWAP8 ADD SWAP7 DUP8 MSTORE PUSH1 0x40 MLOAD SWAP8 DUP9 MSTORE MLOAD AND PUSH1 0x20 DUP8 ADD MSTORE MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE MLOAD AND PUSH1 0x60 DUP4 ADD MSTORE MLOAD PUSH1 0x80 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x0 PUSH2 0x120 PUSH1 0x40 MLOAD PUSH2 0x978 DUP2 PUSH2 0x1C2C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xFF PUSH1 0x20 MSTORE PUSH2 0x140 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x120 PUSH1 0x40 MLOAD PUSH2 0x9D0 DUP2 PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 SLOAD AND SWAP4 DUP5 DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 DUP3 ADD SLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x2 DUP3 ADD SLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x10 SHR AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0x6 DUP3 ADD SLOAD AND PUSH2 0x100 DUP5 ADD MSTORE ADD SLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH2 0x100 DUP3 ADD MLOAD AND PUSH2 0x100 DUP5 ADD MSTORE ADD MLOAD PUSH2 0x120 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x24 CALLDATALOAD PUSH2 0xB04 PUSH2 0x1C16 JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP4 AND DUP1 SWAP4 SUB PUSH2 0x188 JUMPI PUSH1 0x99 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH2 0xB36 SWAP1 DUP4 AND CALLER EQ PUSH2 0x1EA4 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0xFF SWAP2 PUSH1 0x20 SWAP6 DUP4 DUP8 MSTORE PUSH2 0xB57 DUP5 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x1EE1 JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP4 DUP8 MSTORE PUSH2 0xB75 DUP5 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x1F1E JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP4 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x6 DUP4 PUSH1 0x1 DUP8 ADD SLOAD AND SWAP6 ADD SWAP5 DUP6 SLOAD SWAP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP7 DUP10 DUP9 DUP3 AND SUB DUP9 DUP2 GT PUSH2 0xE02 JUMPI DUP9 AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND OR SWAP1 SSTORE DUP7 PUSH1 0x0 MSTORE DUP2 DUP10 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x6 DUP8 ADD SLOAD AND ISZERO PUSH2 0xD2B JUMPI JUMPDEST PUSH2 0xC59 SWAP6 POP PUSH2 0xBE9 PUSH2 0x4D2 DUP10 PUSH1 0x7 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1DF6 JUMP JUMPDEST SWAP2 DUP8 PUSH1 0x0 MSTORE DUP10 MSTORE PUSH1 0x7 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH2 0xC03 DUP4 DUP3 SLOAD PUSH2 0x1F5A JUMP JUMPDEST SWAP1 SSTORE DUP9 PUSH2 0xC22 PUSH2 0xC1B PUSH2 0x4D2 PUSH1 0x98 SLOAD SWAP7 DUP8 AND DUP7 PUSH2 0x1DF6 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x1F5A JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD DUP1 SWAP9 DUP2 SWAP3 DUP9 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP9 DUP10 DUP6 MSTORE PUSH1 0x40 SHR AND PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB DUP2 PUSH1 0x0 DUP6 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x718 JUMPI PUSH2 0xCA3 SWAP7 DUP11 SWAP5 PUSH2 0xD0E JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP5 DUP6 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x718 JUMPI PUSH32 0xD466BE5516D4D2372B27B6E13104CD3F5D1656E5C9E5AE9A6939DA8CF62DBBDE SWAP4 PUSH1 0x40 SWAP4 PUSH2 0xCF1 JUMPI JUMPDEST POP DUP3 MLOAD SWAP6 PUSH1 0x4 CALLDATALOAD DUP8 MSTORE DUP8 DUP8 ADD MSTORE AND SWAP4 LOG3 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0xD07 SWAP1 DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP8 PUSH2 0xCD8 JUMP JUMPDEST PUSH2 0xD24 SWAP1 DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP11 PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x5 DUP7 ADD PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP9 PUSH1 0x3 DUP8 ADD SLOAD DUP1 PUSH2 0xD4D JUMPI JUMPDEST POP POP PUSH2 0xBCF JUMP JUMPDEST PUSH1 0x1 DUP9 ADD SLOAD PUSH1 0x2 SWAP1 SWAP9 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP7 DUP8 SWAP1 DUP7 AND DUP2 PUSH1 0x0 DUP2 PUSH1 0x44 DUP2 ADD SUB SWAP3 GAS CALL SWAP6 DUP7 ISZERO PUSH2 0x718 JUMPI PUSH2 0xC59 SWAP7 PUSH2 0xDE5 JUMPI JUMPDEST POP DUP7 PUSH1 0x0 MSTORE DUP2 DUP10 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x3 DUP6 PUSH1 0x2 DUP4 ADD SLOAD AND SWAP2 ADD SLOAD SWAP1 PUSH32 0x44F6938CA4A10313AABB76F874CCED61E35710A734A126E4AFB34461BF8C2501 PUSH1 0x0 DUP1 LOG3 DUP9 DUP11 PUSH2 0xD46 JUMP JUMPDEST PUSH2 0xDFB SWAP1 DUP11 RETURNDATASIZE DUP13 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP10 PUSH2 0xD9F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0xE5A PUSH2 0x1CD5 JUMP JUMPDEST PUSH2 0xE62 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xCD SLOAD AND OR PUSH1 0xCD SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x0 SLOAD PUSH1 0xFF DUP2 PUSH1 0x8 SHR AND ISZERO DUP1 DUP1 SWAP2 PUSH2 0xFE7 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0xFD0 JUMPI JUMPDEST ISZERO PUSH2 0xF74 JUMPI PUSH1 0xFF NOT DUP3 DUP2 AND PUSH1 0x1 OR PUSH1 0x0 SSTORE SWAP2 DUP2 PUSH2 0xF62 JUMPI JUMPDEST POP PUSH3 0x186A0 PUSH1 0x97 SSTORE PUSH2 0xF00 PUSH1 0xFF PUSH1 0x0 SLOAD PUSH1 0x8 SHR AND PUSH2 0xEFB DUP2 PUSH2 0x1D2D JUMP JUMPDEST PUSH2 0x1D2D JUMP JUMPDEST PUSH2 0xF09 CALLER PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP2 PUSH2 0xF20 PUSH1 0xFF DUP5 PUSH1 0x8 SHR AND PUSH2 0xEFB DUP2 PUSH2 0x1D2D JUMP JUMPDEST PUSH1 0xCD SLOAD AND PUSH1 0xCD SSTORE PUSH2 0xF2D JUMPI STOP JUMPDEST PUSH2 0xFF00 NOT AND PUSH1 0x0 SSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR PUSH1 0x0 SSTORE DUP3 PUSH2 0xEDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEC6 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP4 AND EQ PUSH2 0xEC6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP4 AND LT PUSH2 0xEBF JUMP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x100D PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x188 JUMPI PUSH2 0x1028 PUSH2 0x1C00 JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x188 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC4 CALLDATALOAD GT PUSH2 0x188 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0xC4 CALLDATALOAD ADD SLT ISZERO PUSH2 0x188 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0x188 JUMPI CALLDATASIZE PUSH1 0x24 PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0xC4 CALLDATALOAD ADD ADD GT PUSH2 0x188 JUMPI PUSH2 0x1088 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x10AD SWAP1 PUSH1 0x1 EQ PUSH2 0x1E29 JUMP JUMPDEST PUSH2 0x10BA PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x1E69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1447 JUMPI PUSH1 0x84 CALLDATALOAD PUSH2 0x13F4 JUMPI JUMPDEST PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD ISZERO PUSH2 0x13BA JUMPI PUSH2 0x111D PUSH1 0x20 PUSH2 0x10F0 PUSH1 0x84 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 DUP3 SWAP1 DUP2 SWAP1 PUSH1 0x64 DUP3 ADD SWAP1 JUMP JUMPDEST SUB DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x139B JUMPI JUMPDEST POP CALLER PUSH1 0x0 MSTORE PUSH2 0x101 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0xE02 JUMPI PUSH1 0x20 SWAP6 PUSH1 0x7 SWAP5 PUSH1 0x1 PUSH32 0x40CCD1CEB111A3C186EF9911E1B876DC1F789ED331B86097B3B8851055B6A137 SWAP4 ADD SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH2 0x101 DUP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH2 0x11C2 PUSH2 0x11D0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP2 CALLER DUP14 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1C63 JUMP JUMPDEST DUP9 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x11EF DUP2 PUSH1 0x98 SLOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x1DF6 JUMP JUMPDEST PUSH2 0x11FC PUSH1 0x97 SLOAD DUP1 SWAP3 PUSH2 0x1E09 JUMP JUMPDEST SWAP8 PUSH1 0x40 MLOAD SWAP8 PUSH2 0x120A DUP10 PUSH2 0x1C2C JUMP JUMPDEST CALLER DUP10 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND DUP14 DUP11 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP10 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x60 DUP10 ADD MSTORE DUP9 PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP10 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP10 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0xE0 DUP9 ADD MSTORE AND PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x24 CALLDATALOAD PUSH2 0x120 DUP7 ADD MSTORE DUP8 PUSH1 0x0 MSTORE PUSH1 0xFF DUP10 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x120 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 MLOAD AND SWAP7 DUP5 PUSH1 0xA0 SHL DUP9 DUP2 DUP6 SLOAD AND OR DUP5 SSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP15 DUP5 ADD MLOAD AND DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x2 DUP5 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP5 ADD MLOAD AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x5 DUP4 ADD PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO DUP2 SLOAD PUSH2 0xFF00 PUSH1 0xC0 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP1 PUSH1 0xFF PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB PUSH1 0xE0 DUP8 ADD MLOAD PUSH1 0x10 SHL AND SWAP4 AND SWAP1 PUSH10 0xFFFFFFFFFFFFFFFFFFFF PUSH1 0xB0 SHL AND OR OR OR SWAP1 SSTORE PUSH1 0x6 DUP4 ADD DUP6 PUSH2 0x100 DUP4 ADD MLOAD AND DUP7 NOT DUP3 SLOAD AND OR SWAP1 SSTORE ADD MLOAD SWAP8 DUP9 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE DUP8 DUP10 DUP8 ADD MSTORE AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x24 PUSH1 0xC4 CALLDATALOAD ADD PUSH1 0xA0 DUP7 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xA0 PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP7 ADD ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 PUSH1 0xA0 DUP2 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0xC4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD ADD AND DUP2 ADD SUB ADD SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x13B3 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP5 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x92DCECC2D8D2C89ACAE6E6C2CECA90C2E6D PUSH1 0x73 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x10D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696453656E646572466565526563697069656E7400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x5468726F775A65726F41646472657373 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x65 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x14AF JUMPI PUSH2 0x14AD CALLER PUSH2 0x1C84 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x20 PUSH2 0x1529 PUSH2 0x1524 PUSH2 0x1BEA JUMP JUMPDEST PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x154C PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x33 DUP1 SLOAD SWAP2 DUP3 AND SWAP1 SSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xCD SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x15D6 PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x9A DUP4 MSTORE PUSH2 0x15FE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD EQ PUSH2 0x1E29 JUMP JUMPDEST PUSH2 0x1609 DUP2 ISZERO ISZERO PUSH2 0x1E69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE DUP4 DUP2 PUSH1 0x64 DUP2 PUSH1 0x0 DUP8 GAS CALL DUP1 ISZERO PUSH2 0x718 JUMPI PUSH2 0x1695 JUMPI JUMPDEST POP DUP2 PUSH1 0x0 MSTORE PUSH2 0x102 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1663 DUP3 DUP3 SLOAD PUSH2 0x1DD1 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 CALLER PUSH32 0x5548C837AB068CF56A2C2479DF0882A4922FD203EDB7517321831D95078C5F62 PUSH1 0x0 DUP1 LOG4 PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x16AB SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP4 PUSH2 0x163E JUMP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x16DF DUP2 PUSH1 0x99 SLOAD AND CALLER EQ PUSH2 0x1EA4 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0xFF SWAP3 PUSH1 0x20 SWAP4 DUP1 DUP6 MSTORE PUSH2 0x1700 DUP2 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND ISZERO PUSH2 0x1EE1 JUMP JUMPDEST DUP4 PUSH1 0x0 MSTORE DUP1 DUP6 MSTORE PUSH2 0x171E DUP2 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x1F1E JUMP JUMPDEST DUP4 PUSH1 0x0 MSTORE DUP1 DUP6 MSTORE DUP2 PUSH1 0x4 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD LT PUSH2 0x18C0 JUMPI DUP5 SWAP1 DUP3 PUSH2 0x183F JUMPI JUMPDEST PUSH2 0x17DD SWAP4 DUP6 PUSH1 0x0 MSTORE DUP2 DUP4 MSTORE PUSH2 0x177C DUP5 PUSH1 0x7 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x5 DUP2 ADD PUSH2 0x100 PUSH2 0xFF00 NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x6 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP2 SLOAD AND SWAP1 SSTORE ADD SLOAD PUSH2 0x1F5A JUMP JUMPDEST SWAP2 DUP7 PUSH1 0x0 MSTORE DUP4 MSTORE PUSH2 0x17A8 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x3 DUP4 PUSH1 0x1 DUP7 ADD SLOAD AND SWAP4 PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x10 SHR AND SWAP5 ADD SLOAD SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP4 DUP5 SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x718 JUMPI PUSH32 0x736FE428E1747CA8D387C2E6FA1A31A0CDE62D3A167C40A46ADE59A3CDC828E SWAP3 DUP6 SWAP3 PUSH2 0x1822 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x1838 SWAP1 DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP6 PUSH2 0x1811 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE DUP2 DUP8 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x98 SLOAD DUP3 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SHR DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP6 SWAP4 POP DUP8 SWAP2 DUP7 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 DUP8 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x718 JUMPI PUSH2 0x17DD SWAP5 DUP8 SWAP4 PUSH2 0x18A3 JUMPI JUMPDEST POP SWAP4 POP PUSH2 0x173C JUMP JUMPDEST PUSH2 0x18B9 SWAP1 DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x711 JUMPI PUSH2 0x702 DUP2 DUP4 PUSH2 0x1C63 JUMP JUMPDEST POP DUP8 PUSH2 0x189B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4665654578636565647350726F746F636F6C466565 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x188 JUMPI PUSH1 0x20 PUSH32 0x1CE29A697A4765BD17D91DF93BA75B250B629ECF030553FF1F6AB59F15AE6C7B SWAP2 PUSH2 0x194E PUSH2 0x1CD5 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT PUSH1 0x98 SLOAD AND OR PUSH1 0x98 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1985 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 PUSH2 0x198E PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP3 PUSH2 0x19A5 DUP5 ISZERO ISZERO PUSH2 0x2171 JUMP JUMPDEST PUSH1 0x0 PUSH8 0x7472656173757279 PUSH1 0xC0 SHL DUP5 SUB PUSH2 0x1A7B JUMPI POP DUP4 PUSH1 0x98 SLOAD SWAP3 DUP4 PUSH1 0x40 SHR AND EQ PUSH2 0x1A28 JUMPI PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHL PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND OR PUSH1 0x98 SSTORE PUSH1 0x1 JUMPDEST PUSH2 0x1A01 JUMPI STOP JUMPDEST PUSH32 0xBBC5B96E57CFECB3DBEEADF92E87F15E58E64FCD75CBE256DCC5D9EF2E51E8A4 PUSH1 0x0 DUP1 LOG3 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A207472656173757279206164647265737320616C72656164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1E481CD95D PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP PUSH10 0x30B3B3B932B3B0BA37B9 PUSH1 0xB1 SHL DUP4 EQ PUSH2 0x1A99 JUMPI JUMPDEST POP PUSH2 0x19FB JUMP JUMPDEST PUSH1 0x99 SLOAD SWAP2 POP DUP2 AND DUP4 EQ PUSH2 0x1ABD JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR PUSH1 0x99 SSTORE PUSH1 0x1 DUP4 PUSH2 0x1A93 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A2061676772656761746F72206164647265737320616C7265 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x18591E481CD95D PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH2 0x1B2B PUSH2 0x1CD5 JUMP JUMPDEST PUSH1 0xCD SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1B6A JUMPI PUSH1 0xFF NOT AND PUSH1 0xCD SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x188 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x188 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH2 0x103 DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x188 JUMPI JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x880 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x880 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x880 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 DUP2 PUSH1 0x65 SLOAD AND PUSH1 0x65 SSTORE PUSH1 0x33 SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP1 SWAP4 DUP3 AND OR PUSH1 0x33 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1CE9 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x1D34 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0xFF PUSH1 0xCD SLOAD AND PUSH2 0x1D99 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xE02 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x188 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x188 JUMPI SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0xE02 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1E13 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x1E30 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x151BDAD95B939BDD14DD5C1C1BDC9D1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1E70 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x416D6F756E7449735A65726F PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1EAB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x27B7363CA0B3B3B932B3B0BA37B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1EE8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x13DC99195C919D5B199A5B1B1959 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1F25 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x13DC99195C9499599D5B991959 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xE02 JUMPI JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x206B JUMPI DUP1 PUSH2 0x1F78 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1FC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x2012 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 EQ PUSH2 0x201B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x41 DUP2 MLOAD EQ PUSH1 0x0 EQ PUSH2 0x20AF JUMPI PUSH2 0x20AB SWAP2 PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH1 0x0 BYTE SWAP1 PUSH2 0x20B9 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 PUSH1 0x2 SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x213C JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x212F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x2129 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0x216C JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2178 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x476174657761793A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 CALLDATACOPY SIGNEXTEND SWAP5 0xDC 0x4C SWAP8 SHR SLOAD DUP9 MSTORE 0x29 MLOAD COINBASE 0x5D 0xF7 0xE9 PUSH3 0x9379C6 SMOD LOG3 JUMP CALLDATALOAD 0xE3 LOG2 PUSH2 0x5BDC LOG2 PUSH5 0x64736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"466:11692:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;:::i;:::-;1324:62:1;;:::i;:::-;1525:24:0;466:11692:11;;-1:-1:-1;;;;;;466:11692:11;-1:-1:-1;;;;;466:11692:11;;;;;;;;;1534:6:1;466:11692:11;;;;1564:43:0;-1:-1:-1;;1564:43:0;466:11692:11;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;1223:13:0;466:11692:11;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;11963:7;466:11692;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;:::i;:::-;;;;1324:62:1;;;:::i;:::-;-1:-1:-1;;;;;466:11692:11;;1522:53:12;1530:19;;;1522:53;:::i;:::-;466:11692:11;1587:11:12;;:26;;;;466:11692:11;;;;-1:-1:-1;;;1649:15:12;;1645:113;;466:11692:11;1645:113:12;466:11692:11;1714:39:12;466:11692:11;;;;1671:17:12;466:11692:11;;;;;;;;;;;;1714:39:12;466:11692:11;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;;;;1587:26:12;1602:11;1612:1;1602:11;;1587:26;;466:11692:11;;;;;;-1:-1:-1;;466:11692:11;;;;;-1:-1:-1;;;;;11785:18:11;466:11692;;11805:7;466:11692;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;3241:42;466:11692;;-1:-1:-1;;466:11692:11;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;466:11692:11;;;;;;1325:59;466:11692;;;;;1347:18;466:11692;;1333:10;:32;1325:59;:::i;:::-;1817:36;466:11692;;1825:11;;1817:36;:::i;:::-;466:11692;;;;9210:15;466:11692;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;9276:23;466:11692;;-1:-1:-1;;;;;466:11692:11;;9341:21;466:11692;;3800:27:8;3849:5;466:11692:11;;;;9566:63;;466:11692;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9566:63;;;;;:::i;:::-;466:11692;9556:74;;7353:157:8;466:11692:11;7353:157:8;;;;466:11692:11;7353:157:8;3800:27;:::i;:::-;3849:5;;;;:::i;:::-;-1:-1:-1;;;;;466:11692:11;;;;;10026:29;466:11692;;10105:40;10106:28;-1:-1:-1;;;;;10116:18:11;466:11692;;;;10106:28;:::i;:::-;10138:7;466:11692;10105:40;;:::i;:::-;-1:-1:-1;;;;;466:11692:11;;;;;;;;10279:7;466:11692;;;;;;;;;;;;;;;;;;;;10309:22;466:11692;;;10309:22;:::i;:::-;-1:-1:-1;466:11692:11;;;;;;9210:15;466:11692;;;;;;;;;;;;;;10509:22;466:11692;;;10509:22;:::i;:::-;466:11692;;;;;;;;;;;;;;;;;;;;;;;;;;;10478:54;466:11692;;;;;;10478:54;:::i;:::-;466:11692;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;466:11692:11;;;;10559:123;;;466:11692;;;;;;;10559:123;;;466:11692;;;;;;;;10559:123;;466:11692;;;;;;;10559:123;;466:11692;;;-1:-1:-1;466:11692:11;;;10539:7;466:11692;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;10716:41:11;;;;;;466:11692;;;;;;;;;;;;;;;;;;10716:41;;;;;;;;466:11692;10766:16;;10762:88;;466:11692;-1:-1:-1;;466:11692:11;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;;;;;;;10867:61;;;466:11692;10762:88;10116:18;466:11692;;;;10790:54;;;466:11692;-1:-1:-1;;;;;466:11692:11;;10790:54;;466:11692;;;;;;;;;;;;;;10790:54;466:11692;;;;-1:-1:-1;;;;;466:11692:11;10790:54;;;;;;;;10762:88;;;;10790:54;;;466:11692;10790:54;466:11692;10790:54;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;466:11692;;;;;;;;;10716:41;;;466:11692;10716:41;466:11692;10716:41;;;;;;;:::i;:::-;;;;;466:11692;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;11439:7;466:11692;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11273:8;466:11692;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11273:8;466:11692;;;;;;;;11273:8;466:11692;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;1347:18;466:11692;-1:-1:-1;;;;;466:11692:11;;1325:59;;466:11692;;1333:10;:32;1325:59;:::i;:::-;466:11692;;;5159:8;466:11692;;;;;;5150:58;466:11692;5159:30;466:11692;;;5159:30;466:11692;;5158:31;5150:58;:::i;:::-;466:11692;;;;;;5213:56;466:11692;5159:30;466:11692;;;5222:29;466:11692;;;;5221:30;5213:56;:::i;:::-;466:11692;;;;;;;;;5325:24;5419:29;5325:24;466:11692;5325:24;;466:11692;;5419:29;;466:11692;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;5477:29;5419;5477;;466:11692;;5477:34;5473:494;;466:11692;6318:52;466:11692;;6044:54;6045:42;466:11692;6045:25;466:11692;;;6045:25;466:11692;6045:42;:::i;6044:54::-;466:11692;;;;;;6045:25;466:11692;;;6103:25;:52;466:11692;;;6103:52;:::i;:::-;466:11692;;;6245:38;6184:56;6185:44;6211:18;466:11692;;;;6185:44;;:::i;6184:56::-;6245:38;;;:::i;:::-;466:11692;;;;;;;;;;;6318:52;;;;466:11692;;;;6318:52;;466:11692;;;;;;;;;;;;;;;;;;;;;6318:52;;;466:11692;6318:52;;;;;;;;6377:58;6318:52;;;;;466:11692;-1:-1:-1;466:11692:11;;6377:58;;;-1:-1:-1;;;;;466:11692:11;;;6377:58;;466:11692;;;;;;;;;;;;-1:-1:-1;466:11692:11;;;;;;;;;;;6377:58;;;;;;;;;;6472:67;6377:58;466:11692;6377:58;;;466:11692;;;;;;;;;;;;;;6472:67;;466:11692;;;;;;6377:58;;;;;;;;;;;;;:::i;:::-;;;;;6318:52;;;;;;;;;;;;;:::i;:::-;;;;;5473:494;5159:30;5565;;466:11692;;;;;;;;;5614:28;466:11692;5614:28;;466:11692;5614:32;5610:350;;5473:494;;;;;5610:350;466:11692;5690:24;;466:11692;5732:37;;;;466:11692;;;-1:-1:-1;;;5683:129:11;;466:11692;;;-1:-1:-1;;;;;466:11692:11;;5683:129;;466:11692;;;;;;;;;;;;;;-1:-1:-1;466:11692:11;;;;5683:129;;;;;;;;;6318:52;5683:129;;;5610:350;466:11692;;;;;;;;;;;5873:37;5732;5873;;466:11692;;5918:28;;466:11692;5845:108;;466:11692;5845:108;;5610:350;;;;5683:129;;;;;;;;;;;;;:::i;:::-;;;;;466:11692;;;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;1534:6:1;466:11692:11;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;1324:62:1;;:::i;:::-;1468:72:3;;:::i;:::-;2519:4;466:11692:11;;2509:14:3;466:11692:11;;;2509:14:3;466:11692:11;2538:20:3;466:11692:11;;;965:10:5;466:11692:11;;2538:20:3;466:11692:11;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;;;;3301:14:2;3347:34;;;;;466:11692:11;3346:108:2;;;;466:11692:11;;;;-1:-1:-1;;466:11692:11;;;3551:1:2;466:11692:11;;;;;3562:65:2;;466:11692:11;;1146:7;1136:17;466:11692;5366:69:2;466:11692:11;;;;;;5366:69:2;;;:::i;:::-;;:::i;:::-;1216:12:1;965:10:5;1216:12:1;:::i;:::-;466:11692:11;;;5366:69:2;466:11692:11;;;;;5366:69:2;;;:::i;:::-;1260:15:3;466:11692:11;;1260:15:3;466:11692:11;3647:99:2;;466:11692:11;3647:99:2;466:11692:11;;;;;3721:14:2;466:11692:11;;;3551:1:2;466:11692:11;;3721:14:2;466:11692:11;3562:65:2;-1:-1:-1;;466:11692:11;;;;;3562:65:2;;;466:11692:11;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;3346:108:2;3426:4;;1713:19:4;:23;3387:66:2;;3346:108;3387:66;466:11692:11;3452:1:2;466:11692:11;;;3436:17:2;3346:108;;3347:34;466:11692:11;3380:1:2;466:11692:11;;;3365:16:2;3347:34;;466:11692:11;;;;;;-1:-1:-1;;466:11692:11;;;;;;:::i;:::-;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;466:11692:11;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;1468:72:3;;:::i;:::-;-1:-1:-1;;;;;466:11692:11;;;;;;1583:17;466:11692;;;;;;1575:60;;466:11692;1583:30;1575:60;:::i;:::-;1817:36;466:11692;;1825:11;;1817:36;:::i;:::-;-1:-1:-1;;;;;466:11692:11;;4517:28;466:11692;;;;4573:103;;466:11692;;;;;;2902:29;466:11692;;3010:76;466:11692;3065:20;466:11692;;;;3065:20;:::i;:::-;466:11692;;-1:-1:-1;;;3010:76:11;;3038:10;466:11692;3010:76;;466:11692;3058:4;466:11692;;;;;;;;;;;;;;;;;;;;;3010:76;;466:11692;;-1:-1:-1;;;;;466:11692:11;;3010:76;;;;;;;;466:11692;3038:10;;466:11692;;3144:6;466:11692;;;;;;;;;;;;;;;;;;;3744:148;466:11692;;;;3038:10;466:11692;;3144:6;466:11692;;-1:-1:-1;;;;;3241:42:11;;466:11692;;;;;;3038:10;;;;3241:42;;;466:11692;;;;;;;;;;;;;;;;;;;;;3241:42;;;;;;;;;;:::i;:::-;466:11692;;;3241:42;;3231:53;466:11692;-1:-1:-1;;;;;3340:28:11;466:11692;3350:18;466:11692;;;;3340:28;:::i;:::-;3339:40;3372:7;466:11692;3339:40;;;:::i;:::-;466:11692;;;;;;;:::i;:::-;3038:10;466:11692;;;;;;;;;3404:297;;;466:11692;;;;;;;;3404:297;;466:11692;;;;3404:297;;466:11692;3404:297;466:11692;3404:297;;466:11692;;;3404:297;;466:11692;;;3404:297;;466:11692;;;;;;;;3404:297;;466:11692;;3404:297;;;466:11692;;;3404:297;;;466:11692;;;;3384:8;466:11692;;;;;3404:297;466:11692;;;;;;;;;;;;;;;;;;;;;;;;;;;;3404:297;;;466:11692;;;;;;;;;;;;;;;;;;;3404:297;;466:11692;;;;;;;;;;3404:297;;466:11692;;;;;;3404:297;;466:11692;;;;;;;;;3404:297;;466:11692;;;;;;;3404:297;;466:11692;;;;;;;3384:8;466:11692;;;;;;3404:297;;466:11692;;;;;;;;;;;;;;;;;;;3404:297;;;;466:11692;;;;;;;;;;3404:297;466:11692;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3241:42;466:11692;3241:42;;;;466:11692;;;;;;;;;3744:148;;;;466:11692;;;;;;3010:76;;;466:11692;3010:76;466:11692;3010:76;;;;;;;:::i;:::-;;;;;466:11692;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;4573:103;-1:-1:-1;;;;;466:11692:11;;4573:103;466:11692;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;1223:13:0;466:11692:11;965:10:5;-1:-1:-1;;;;;466:11692:11;;;2130:24:0;466:11692:11;;2229:6:0;965:10:5;2229:6:0;:::i;:::-;466:11692:11;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;1324:62:1;;:::i;:::-;1880:20:0;466:11692:11;;-1:-1:-1;;;;;;466:11692:11;;;;;;2779:6:1;466:11692:11;;;;;;;;;-1:-1:-1;;;;;466:11692:11;2827:40:1;466:11692:11;;2827:40:1;466:11692:11;;;;;;;-1:-1:-1;;466:11692:11;;;;;;1949:7:3;466:11692:11;;;;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;:::i;:::-;;;;;;;;;;;;;;;1583:17;466:11692;;1575:60;466:11692;;;;;1583:30;1575:60;:::i;:::-;1817:36;1825:11;;;1817:36;:::i;:::-;466:11692;;-1:-1:-1;;;8330:59:11;;965:10:5;466:11692:11;8330:59;;466:11692;8374:4;466:11692;;;;;;;;;;8374:4;466:11692;;;-1:-1:-1;8330:59:11;;;;;;;;;466:11692;;;;;8394:7;466:11692;;;;;965:10:5;466:11692:11;;;;;;;8394:34;466:11692;;;8394:34;:::i;:::-;466:11692;;;;965:10:5;;8438:32:11;466:11692;8438:32;;466:11692;;;;8330:59;;;;;;;;;;;;;:::i;:::-;;;;;466:11692;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;;;;;;1325:59;466:11692;1347:18;466:11692;;1333:10;:32;1325:59;:::i;:::-;466:11692;;;6767:8;466:11692;;;;;;6758:58;466:11692;6767:30;466:11692;;;6767:30;466:11692;;6766:31;6758:58;:::i;:::-;466:11692;;;;;;6821:56;466:11692;6767:30;466:11692;;;6830:29;466:11692;;;;6829:30;6821:56;:::i;:::-;466:11692;;;;;;;;;;;6890:30;466:11692;6890:38;466:11692;;6965:8;;;6961:133;;466:11692;7369:133;466:11692;;;;;;;7264:32;466:11692;7264:25;466:11692;;;6767:30;7125:29;;466:11692;;;;;;;;;7166:29;;;-1:-1:-1;;;;;466:11692:11;;;;;;7264:25;466:11692;7264:32;:::i;:::-;466:11692;;;;;;7454:43;466:11692;;;7376:24;466:11692;7376:24;466:11692;7376:24;;466:11692;;7416:32;6767:30;7416:32;;466:11692;;;;7469:28;;466:11692;7454:43;;:::i;:::-;466:11692;;-1:-1:-1;;;7369:133:11;;-1:-1:-1;;;;;466:11692:11;;;;7369:133;;466:11692;;;;;;;;;-1:-1:-1;466:11692:11;;;;;;;;;;;7369:133;;;;;;;;;;7540:29;7369:133;;;;;466:11692;;;;;;;7540:29;466:11692;;;;;;7369:133;;;;;;;;;;;;;:::i;:::-;;;;;6961;466:11692;;;;;;;;;;;;7031:24;466:11692;7066:15;466:11692;;;-1:-1:-1;;;7024:64:11;;466:11692;;;;-1:-1:-1;;;;;466:11692:11;;7024:64;;466:11692;;;;;;;;;;-1:-1:-1;466:11692:11;;;;;;;;;;7024:64;;;;;;;7369:133;7024:64;;;;;6961:133;;;;;;7024:64;;;;;;;;;;;;;:::i;:::-;;;;;466:11692;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;;2021:39:12;1324:62:1;;;:::i;:::-;466:11692:11;-1:-1:-1;;;;;466:11692:11;1972:40:12;466:11692:11;;;1972:40:12;466:11692:11;;;;;;2021:39:12;466:11692:11;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;:::i;:::-;1324:62:1;;;:::i;:::-;-1:-1:-1;;;;;466:11692:11;;;;2376:53:12;2384:19;;;2376:53;:::i;:::-;466:11692:11;-1:-1:-1;;;2453:18:12;;466:11692:11;;;;2486:15:12;466:11692:11;;;;;;2486:24:12;466:11692:11;;-1:-1:-1;;;;;;466:11692:11;;;;;;;;-1:-1:-1;;;;;466:11692:11;;2486:15:12;466:11692:11;;2449:326:12;2778:63;;466:11692:11;2778:63:12;2801:35;466:11692:11;2801:35:12;;466:11692:11;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;2449:326:12;466:11692:11;;-1:-1:-1;;;;2614:20:12;;2610:165;;2449:326;;;;2610:165;2649:18;466:11692:11;;-1:-1:-1;466:11692:11;;2649:27:12;;466:11692:11;;-1:-1:-1;;;;;;466:11692:11;;;2649:18:12;466:11692:11;;2610:165:12;;;466:11692:11;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;1324:62:1;;:::i;:::-;1949:7:3;466:11692:11;;;;;;;;;;1949:7:3;466:11692:11;2785:22:3;466:11692:11;;;965:10:5;466:11692:11;;2785:22:3;466:11692:11;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;-1:-1:-1;;466:11692:11;;;;;;;;;;12125:15;466:11692;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;466:11692:11;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;466:11692:11;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;466:11692:11;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;:::o;:::-;;3241:42;;;466:11692;;;;;;;;-1:-1:-1;;;;;466:11692:11;;;;;;;:::o;1798:153:0:-;-1:-1:-1;;;;;466:11692:11;;;;1880:20:0;466:11692:11;;1880:20:0;466:11692:11;2779:6:1;466:11692:11;;;;;;;;;;;;;;2779:6:1;466:11692:11;;2827:40:1;1880:20:0;2827:40:1;;1798:153:0:o;1620:130:1:-;1534:6;466:11692:11;-1:-1:-1;;;;;466:11692:11;965:10:5;1683:23:1;466:11692:11;;1620:130:1:o;466:11692:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;2031:106:3;466:11692:11;1949:7:3;466:11692:11;;;;2031:106:3:o;466:11692:11:-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;;;;;;:::o;570:511:8:-;466:11692:11;;;;;;638:29:8;;;683:7;:::o;634:441::-;466:11692:11;734:38:8;;466:11692:11;;;;-1:-1:-1;;;788:34:8;;466:11692:11;788:34:8;;;466:11692:11;;;;;;;;;;;;;788:34:8;730:345;852:35;843:44;;852:35;;466:11692:11;;-1:-1:-1;;;903:41:8;;466:11692:11;903:41:8;;;466:11692:11;;;;;;;;;;;;;903:41:8;839:236;974:30;965:39;961:114;;570:511::o;961:114::-;466:11692:11;;-1:-1:-1;;;1020:44:8;;466:11692:11;1020:44:8;;;466:11692:11;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;1020:44:8;466:11692:11;;;;647:20:8;466:11692:11;;;;;647:20:8;466:11692:11;2145:730:8;;2283:2;466:11692:11;;2263:22:8;2259:610;2283:2;;;2746:25;2546:180;;;;;;;;;;;;;;-1:-1:-1;2546:180:8;2746:25;;:::i;:::-;2739:32;;:::o;2259:610::-;2802:56;;2818:1;2802:56;2822:35;2802:56;:::o;5009:1456::-;;;;6021:66;6008:79;;6004:161;;466:11692:11;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6276:24:8;;;;;;;;;;;;;;-1:-1:-1;;;;;466:11692:11;;6314:20:8;6310:101;;6421:37;5009:1456;:::o;6310:101::-;6350:50;6276:24;6350:50;:::o;6276:24::-;466:11692:11;;;;;;;;;;;6004:161:8;6103:51;;;;6119:1;6103:51;6123:30;6103:51;:::o;11513:145:11:-;-1:-1:-1;;;;;466:11692:11;-1:-1:-1;466:11692:11;;;11593:17;466:11692;;;;;;;11593:30;11589:47;;-1:-1:-1;11513:145:11;:::o;11589:47::-;466:11692;11625:11;:::o;466:11692::-;;;;:::o;:::-;;;-1:-1:-1;;;466:11692:11;;;;;;;;;;;;-1:-1:-1;;;466:11692:11;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1736600","executionCost":"27170","totalCost":"1763770"},"external":{"acceptOwnership()":"52493","createOrder(address,uint256,uint96,address,uint256,address,string)":"infinite","deposit(address,uint256)":"infinite","getBalance(address,address)":"2997","getFeeDetails()":"4790","getOrderInfoIn(bytes32)":"infinite","getOrderInfoOut(bytes32)":"infinite","initialize()":"infinite","isOrderProcessed(bytes32)":"2328","isTokenSupported(address)":"2647","owner()":"2568","pause()":"29957","paused()":"2402","pendingOwner()":"2744","refundOrder(uint256,bytes32)":"infinite","renounceOwnership()":"52438","settingManagerBool(bytes32,address,uint256)":"26925","settleOrderIn(bytes32,bytes,address,address,address,uint256)":"infinite","settleOrderOut(bytes32,bytes32,address,uint64)":"infinite","transferOwnership(address)":"30735","unpause()":"27588","updateProtocolAddress(bytes32,address)":"28383","updateProtocolFee(uint64)":"27678"},"internal":{"_handler(address,uint256,address,address,uint256)":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","createOrder(address,uint256,uint96,address,uint256,address,string)":"809804f7","deposit(address,uint256)":"47e7ef24","getBalance(address,address)":"d4fac45d","getFeeDetails()":"b810c636","getOrderInfoIn(bytes32)":"9c0fea2c","getOrderInfoOut(bytes32)":"9bb39e13","initialize()":"8129fc1c","isOrderProcessed(bytes32)":"00b727da","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","pendingOwner()":"e30c3978","refundOrder(uint256,bytes32)":"47b0f1cd","renounceOwnership()":"715018a6","settingManagerBool(bytes32,address,uint256)":"cd992400","settleOrderIn(bytes32,bytes,address,address,address,uint256)":"b682b667","settleOrderOut(bytes32,bytes32,address,uint64)":"9a06601f","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","updateProtocolAddress(bytes32,address)":"40ebc677","updateProtocolFee(uint64)":"47094e2e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderSettledIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"OrderSettledOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfoIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IGateway.OrderIn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfoOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.OrderOut\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"isOrderProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refundOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"settleOrderIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"}],\"name\":\"settleOrderOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the deposit.\",\"sender\":\"The address of the sender.\",\"token\":\"The address of the deposited token.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)\":{\"params\":{\"amount\":\"The amount of the deposit.\",\"messageHash\":\"The hash of the message.\",\"orderId\":\"The ID of the order.\",\"rate\":\"The rate at which the deposit is made.\",\"sender\":\"The address of the sender.\",\"token\":\"The address of the deposited token.\"}},\"OrderRefunded(uint256,bytes32)\":{\"params\":{\"fee\":\"The fee deducted from the refund amount.\",\"orderId\":\"The ID of the order.\"}},\"OrderSettledIn(address,address,uint256,address,bytes32)\":{\"details\":\"Emitted when an order is settled in.\",\"params\":{\"amount\":\"The address of the deposited token.\",\"orderId\":\"The ID of the order.\",\"provider\":\"The address of the provider.\",\"senderAddress\":\"The address of the sender.\",\"token\":\"The amount of the deposit.\"}},\"OrderSettledOut(bytes32,bytes32,address,uint96)\":{\"params\":{\"liquidityProvider\":\"The address of the liquidity provider.\",\"orderId\":\"The ID of the order.\",\"settlePercent\":\"The percentage at which the transaction is settled.\",\"splitOrderId\":\"The ID of the split order.\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"SenderFeeTransferred(address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee transferred.\",\"sender\":\"The address of the sender.\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IGateway}. \"},\"deposit(address,uint256)\":{\"details\":\"See {deposit-IGateway}.  enables providers to deposit tokens into the contract\",\"params\":{\"_amount\":\"The amount of tokens to be deposited. Requirements: - The token must be supported. - The amount must be greater than 0. - The contract must have sufficient allowance to transfer the tokens. - The contract must have sufficient balance to store the tokens. Emits a {Deposit} event. Returns a boolean value indicating whether the deposit was successful. \",\"_token\":\"The address of the token to be deposited.\"}},\"getBalance(address,address)\":{\"details\":\"See {getBalance-IGateway}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IGateway}. \"},\"getOrderInfoIn(bytes32)\":{\"details\":\"See {getOrderInfoIn-IGateway}. \"},\"getOrderInfoOut(bytes32)\":{\"details\":\"See {getOrderInfoOut-IGateway}. \"},\"initialize()\":{\"details\":\"Initialize function.\"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IGateway}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the contract.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"refundOrder(uint256,bytes32)\":{\"details\":\"See {refundOrder-IGateway}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settingManagerBool(bytes32,address,uint256)\":{\"details\":\"Sets the boolean value for a specific setting.\",\"params\":{\"status\":\"The boolean value to be set. Requirements: - The value must not be a zero address.\",\"value\":\"The address or value associated with the setting.\",\"what\":\"The setting to be updated.\"}},\"settleOrderIn(bytes32,bytes,address,address,address,uint256)\":{\"details\":\"See {settledOrderIn-IGateway}.  enables providers to settle orders in\",\"params\":{\"_amount\":\"The amount of tokens to be settled.\",\"_orderId\":\"The ID of the order to be settled.\",\"_provider\":\"The address of the provider.\",\"_sender\":\"The address of the sender i.e. the user that created the order.\",\"_signature\":\"The signature of the order.\",\"_token\":\"The address of the token to be settled.\"}},\"settleOrderOut(bytes32,bytes32,address,uint64)\":{\"details\":\"See {settleOrderOut-IGateway}. \"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the contract.\"},\"updateProtocolAddress(bytes32,address)\":{\"details\":\"Updates a protocol address.\",\"params\":{\"value\":\"The new address to be set. Requirements: - The value must not be a zero address.\",\"what\":\"The address type to be updated (treasury or aggregator).\"}},\"updateProtocolFee(uint64)\":{\"details\":\"Updates the protocol fee percentage.\",\"params\":{\"_protocolFeePercent\":\"The new protocol fee percentage to be set.\"}}},\"title\":\"Gateway\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,address,uint256)\":{\"notice\":\"Emitted when a deposit is made by a provider.\"},\"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)\":{\"notice\":\"Emitted when an order is created.\"},\"OrderRefunded(uint256,bytes32)\":{\"notice\":\"Emitted when an aggregator refunds a transaction.\"},\"OrderSettledOut(bytes32,bytes32,address,uint96)\":{\"notice\":\"Emitted when an order is settled out.\"},\"SenderFeeTransferred(address,uint256)\":{\"notice\":\"Emitted when the sender's fee is transferred.\"}},\"kind\":\"user\",\"methods\":{\"isOrderProcessed(bytes32)\":{\"notice\":\"See {isOrderProcessed-IGateway} \"}},\"notice\":\"This contract serves as a gateway for creating orders and managing settlements.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\r\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nimport {GatewaySettingManager} from './GatewaySettingManager.sol';\\r\\nimport {IGateway, IERC20} from './interfaces/IGateway.sol';\\r\\n\\r\\n/**\\r\\n * @title Gateway\\r\\n * @notice This contract serves as a gateway for creating orders and managing settlements.\\r\\n */\\r\\ncontract Gateway is IGateway, GatewaySettingManager, PausableUpgradeable {\\r\\n\\tusing ECDSA for bytes32;\\r\\n\\tstruct fee {\\r\\n\\t\\tuint256 protocolFee;\\r\\n\\t\\tuint256 liquidityProviderAmount;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(bytes32 => OrderOut) private orderOut;\\r\\n\\tmapping(bytes32 => OrderIn) private orderIn;\\r\\n\\tmapping(address => uint256) private _nonce;\\r\\n\\tmapping(address => mapping(address => uint256)) private balance;\\r\\n\\tmapping(bytes32 => bool) private processedOrders;\\r\\n\\tuint256[50] private __gap;\\r\\n\\r\\n\\t/// @custom:oz-upgrades-unsafe-allow constructor\\r\\n\\tconstructor() {\\r\\n\\t\\t_disableInitializers();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initialize function.\\r\\n\\t */\\r\\n\\tfunction initialize() external initializer {\\r\\n\\t\\tMAX_BPS = 100_000;\\r\\n\\t\\t__Ownable2Step_init();\\r\\n\\t\\t__Pausable_init();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Modifier that allows only the aggregator to call a function.\\r\\n\\t */\\r\\n\\tmodifier onlyAggregator() {\\r\\n\\t\\trequire(msg.sender == _aggregatorAddress, 'OnlyAggregator');\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Modifier that checks if the token is supported.\\r\\n\\t * @param _token The address of the token to be checked.\\r\\n\\t */\\r\\n\\tmodifier isTokenApproved(address _token) {\\r\\n\\t\\trequire(_isTokenSupported[_token] == 1, 'TokenNotSupported');\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Modifier that checks if the deposit amount is valid.\\r\\n\\t * @param _amount The amount to be checked.\\r\\n\\t */\\r\\n\\tmodifier isValidAmount(uint256 _amount) {\\r\\n\\t\\trequire(_amount > 0, 'AmountIsZero');\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/* ##################################################################\\r\\n                                OWNER FUNCTIONS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @dev Pause the contract.\\r\\n\\t */\\r\\n\\tfunction pause() external onlyOwner {\\r\\n\\t\\t_pause();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Unpause the contract.\\r\\n\\t */\\r\\n\\tfunction unpause() external onlyOwner {\\r\\n\\t\\t_unpause();\\r\\n\\t}\\r\\n\\r\\n\\t/* ##################################################################\\r\\n                                USER CALLS\\r\\n    ################################################################## */\\r\\n\\t/** @dev See {createOrder-IGateway}. */\\r\\n\\tfunction createOrder(\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint96 _rate,\\r\\n\\t\\taddress _senderFeeRecipient,\\r\\n\\t\\tuint256 _senderFee,\\r\\n\\t\\taddress _refundAddress,\\r\\n\\t\\tstring calldata messageHash\\r\\n\\t) external whenNotPaused returns (bytes32 orderId) {\\r\\n\\t\\t// checks that are required\\r\\n\\t\\t_handler(_token, _amount, _refundAddress, _senderFeeRecipient, _senderFee);\\r\\n\\r\\n\\t\\t// validate messageHash\\r\\n\\t\\trequire(bytes(messageHash).length > 0, 'InvalidMessageHash');\\r\\n\\r\\n\\t\\t// transfer token from msg.sender to contract\\r\\n\\t\\tIERC20(_token).transferFrom(msg.sender, address(this), _amount + _senderFee);\\r\\n\\r\\n\\t\\t// increase users nonce to avoid replay attacks\\r\\n\\t\\t_nonce[msg.sender]++;\\r\\n\\r\\n\\t\\t// generate transaction id for the transaction\\r\\n\\t\\torderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\r\\n\\r\\n\\t\\t// update transaction\\r\\n\\t\\tuint256 _protocolFee = (_amount * protocolFeePercent) / MAX_BPS;\\r\\n\\t\\torderOut[orderId] = OrderOut({\\r\\n\\t\\t\\tsender: msg.sender,\\r\\n\\t\\t\\ttoken: _token,\\r\\n\\t\\t\\tsenderFeeRecipient: _senderFeeRecipient,\\r\\n\\t\\t\\tsenderFee: _senderFee,\\r\\n\\t\\t\\tprotocolFee: _protocolFee,\\r\\n\\t\\t\\tisFulfilled: false,\\r\\n\\t\\t\\tisRefunded: false,\\r\\n\\t\\t\\trefundAddress: _refundAddress,\\r\\n\\t\\t\\tcurrentBPS: uint64(MAX_BPS),\\r\\n\\t\\t\\tamount: _amount\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\t// emit order created event\\r\\n\\t\\temit OrderCreated(\\r\\n\\t\\t\\torderOut[orderId].sender,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\torderOut[orderId].amount,\\r\\n\\t\\t\\t_protocolFee,\\r\\n\\t\\t\\torderId,\\r\\n\\t\\t\\t_rate,\\r\\n\\t\\t\\tmessageHash\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Internal function to handle order creation.\\r\\n\\t * @param _token The address of the token being traded.\\r\\n\\t * @param _amount The amount of tokens being traded.\\r\\n\\t * @param _refundAddress The address to refund the tokens in case of cancellation.\\r\\n\\t * @param _senderFeeRecipient The address of the recipient for the sender fee.\\r\\n\\t * @param _senderFee The amount of the sender fee.\\r\\n\\t */\\r\\n\\tfunction _handler(\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\taddress _refundAddress,\\r\\n\\t\\taddress _senderFeeRecipient,\\r\\n\\t\\tuint256 _senderFee\\r\\n\\t) internal isTokenApproved(_token) isValidAmount(_amount) view {\\r\\n\\t\\trequire(_refundAddress != address(0), 'ThrowZeroAddress');\\r\\n\\r\\n\\t\\tif (_senderFee > 0) {\\r\\n\\t\\t\\trequire(_senderFeeRecipient != address(0), 'InvalidSenderFeeRecipient');\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/* ##################################################################\\r\\n                                AGGREGATOR FUNCTIONS\\r\\n    ################################################################## */\\r\\n\\t/** @dev See {settleOrderOut-IGateway}. */\\r\\n\\tfunction settleOrderOut(\\r\\n\\t\\tbytes32 _splitOrderId,\\r\\n\\t\\tbytes32 _orderId,\\r\\n\\t\\taddress _provider,\\r\\n\\t\\tuint64 _settlePercent\\r\\n\\t) external onlyAggregator returns (bool) {\\r\\n\\t\\t// ensure the transaction has not been fulfilled\\r\\n\\t\\trequire(!orderOut[_orderId].isFulfilled, 'OrderFulfilled');\\r\\n\\t\\trequire(!orderOut[_orderId].isRefunded, 'OrderRefunded');\\r\\n\\r\\n\\t\\t// load the token into memory\\r\\n\\t\\taddress token = orderOut[_orderId].token;\\r\\n\\r\\n\\t\\t// subtract sum of amount based on the input _settlePercent\\r\\n\\t\\torderOut[_orderId].currentBPS -= _settlePercent;\\r\\n\\r\\n\\t\\tif (orderOut[_orderId].currentBPS == 0) {\\r\\n\\t\\t\\t// update the transaction to be fulfilled\\r\\n\\t\\t\\torderOut[_orderId].isFulfilled = true;\\r\\n\\r\\n\\t\\t\\tif (orderOut[_orderId].senderFee > 0) {\\r\\n\\t\\t\\t\\t// transfer sender fee\\r\\n\\t\\t\\t\\tIERC20(orderOut[_orderId].token).transfer(\\r\\n\\t\\t\\t\\t\\torderOut[_orderId].senderFeeRecipient,\\r\\n\\t\\t\\t\\t\\torderOut[_orderId].senderFee\\r\\n\\t\\t\\t\\t);\\r\\n\\r\\n\\t\\t\\t\\t// emit event\\r\\n\\t\\t\\t\\temit SenderFeeTransferred(\\r\\n\\t\\t\\t\\t\\torderOut[_orderId].senderFeeRecipient,\\r\\n\\t\\t\\t\\t\\torderOut[_orderId].senderFee\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// transfer to liquidity provider\\r\\n\\t\\tuint256 liquidityProviderAmount = (orderOut[_orderId].amount * _settlePercent) / MAX_BPS;\\r\\n\\t\\torderOut[_orderId].amount -= liquidityProviderAmount;\\r\\n\\r\\n\\t\\tuint256 protocolFee = (liquidityProviderAmount * protocolFeePercent) / MAX_BPS;\\r\\n\\t\\tliquidityProviderAmount -= protocolFee;\\r\\n\\r\\n\\t\\t// transfer protocol fee\\r\\n\\t\\tIERC20(token).transfer(treasuryAddress, protocolFee);\\r\\n\\r\\n\\t\\tIERC20(token).transfer(_provider, liquidityProviderAmount);\\r\\n\\r\\n\\t\\t// emit settled event\\r\\n\\t\\temit OrderSettledOut(_splitOrderId, _orderId, _provider, _settlePercent);\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {refundOrder-IGateway}. */\\r\\n\\tfunction refundOrder(uint256 _fee, bytes32 _orderId) external onlyAggregator returns (bool) {\\r\\n\\t\\t// ensure the transaction has not been fulfilled\\r\\n\\t\\trequire(!orderOut[_orderId].isFulfilled, 'OrderFulfilled');\\r\\n\\t\\trequire(!orderOut[_orderId].isRefunded, 'OrderRefunded');\\r\\n\\t\\trequire(orderOut[_orderId].protocolFee >= _fee, 'FeeExceedsProtocolFee');\\r\\n\\r\\n\\t\\tif (_fee > 0) {\\r\\n\\t\\t\\t// transfer refund fee to the treasury\\r\\n\\t\\t\\tIERC20(orderOut[_orderId].token).transfer(treasuryAddress, _fee);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// reset state values\\r\\n\\t\\torderOut[_orderId].isRefunded = true;\\r\\n\\t\\torderOut[_orderId].currentBPS = 0;\\r\\n\\r\\n\\t\\t// deduct fee from order amount\\r\\n\\t\\tuint256 refundAmount = orderOut[_orderId].amount - _fee;\\r\\n\\r\\n\\t\\t// transfer refund amount and sender fee to the refund address\\r\\n\\t\\tIERC20(orderOut[_orderId].token).transfer(\\r\\n\\t\\t\\torderOut[_orderId].refundAddress,\\r\\n\\t\\t\\trefundAmount + orderOut[_orderId].senderFee\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// emit refunded event\\r\\n\\t\\temit OrderRefunded(_fee, _orderId);\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {deposit-IGateway}. \\r\\n\\t * enables providers to deposit tokens into the contract\\r\\n\\t * @param _token The address of the token to be deposited.\\r\\n\\t * @param _amount The amount of tokens to be deposited.\\r\\n\\t * Requirements:\\r\\n\\t * - The token must be supported.\\r\\n\\t * - The amount must be greater than 0.\\r\\n\\t * - The contract must have sufficient allowance to transfer the tokens.\\r\\n\\t * - The contract must have sufficient balance to store the tokens.\\r\\n\\t * Emits a {Deposit} event.\\r\\n\\t * Returns a boolean value indicating whether the deposit was successful.\\r\\n\\t * \\r\\n\\t*/\\r\\n\\tfunction deposit(address _token, uint256 _amount) external isTokenApproved(_token) isValidAmount(_amount) returns (bool) {\\r\\n\\t\\taddress sender = _msgSender();\\r\\n\\t\\tIERC20(_token).transferFrom(sender, address(this), _amount);\\r\\n\\t\\tbalance[_token][sender] += _amount;\\r\\n\\t\\temit Deposit(sender, _token, _amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {settledOrderIn-IGateway}. \\r\\n\\t * enables providers to settle orders in\\r\\n\\t * @param _orderId The ID of the order to be settled.\\r\\n\\t * @param _signature The signature of the order.\\r\\n\\t * @param _provider The address of the provider.\\r\\n\\t * @param _sender The address of the sender i.e. the user that created the order.\\r\\n\\t * @param _token The address of the token to be settled.\\r\\n\\t * @param _amount The amount of tokens to be settled.\\r\\n\\t*/\\r\\n    function settleOrderIn(\\r\\n        bytes32 _orderId,\\r\\n        bytes memory _signature,\\r\\n        address _provider,\\r\\n        address _sender,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyAggregator isValidAmount(_amount) {\\r\\n        require(!processedOrders[_orderId], \\\"Order already processed\\\");\\r\\n\\t\\trequire(_provider != address(0), \\\"Invalid provider address\\\");\\r\\n\\t\\trequire(_sender != address(0), \\\"Invalid sender address\\\");\\r\\n\\r\\n        // Verify signature to ensure the order is valid and the provider has signed it i.e provider is the one settling the order\\r\\n        bytes32 messageHash = keccak256(abi.encodePacked(_orderId, _provider, _sender, _token, _amount));\\r\\n\\t\\t// convert the message hash to eth signed message hash this is required for signature verification\\r\\n        bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();\\r\\n\\t\\t// recover the address from the signature and compare it with the provider address to ensure the signature is valid\\r\\n        address recoveredAddress = ethSignedMessageHash.recover(_signature);\\r\\n        require(recoveredAddress == _provider, \\\"Invalid signature\\\");\\r\\n\\t\\tuint256 _protocolFee = (_amount * protocolFeePercent) / MAX_BPS;\\r\\n\\t\\t// Note: There is no need for checks for token supported as the balance will be 0 if the token is not supported\\r\\n        require(balance[_token][_provider] >= _amount + _protocolFee, \\\"Insufficient balance\\\");\\r\\n\\r\\n        // Mark order as processed\\r\\n        processedOrders[_orderId] = true;\\r\\n\\r\\n        // Update balances\\r\\n        balance[_token][_provider] -= (_amount + _protocolFee);\\r\\n\\r\\n\\t\\torderIn[_orderId] = OrderIn({\\r\\n\\t\\t\\tamount: _amount,\\r\\n\\t\\t\\tprovider: _provider,\\r\\n\\t\\t\\tsender: _sender,\\r\\n\\t\\t\\ttoken: _token,\\r\\n\\t\\t\\torderId: _orderId\\r\\n\\t\\t});\\r\\n\\r\\n\\r\\n\\t\\t// transfer to sender\\r\\n\\t\\tIERC20(_token).transfer(_sender, _amount);\\r\\n\\t\\tif (_protocolFee > 0) {\\r\\n\\t\\t\\tIERC20(_token).transfer(treasuryAddress, _protocolFee);\\r\\n\\t\\t}\\r\\n\\r\\n        emit OrderSettledIn(_provider, _sender, _amount, _token, _orderId);\\r\\n    }\\r\\n\\r\\n\\t/* ##################################################################\\r\\n                                VIEW CALLS\\r\\n    ################################################################## */\\r\\n\\t/** @dev See {getOrderInfoOut-IGateway}. */\\r\\n\\tfunction getOrderInfoOut(bytes32 _orderId) external view returns (OrderOut memory) {\\r\\n\\t\\treturn orderOut[_orderId];\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {getOrderInfoIn-IGateway}. */\\r\\n\\tfunction getOrderInfoIn(bytes32 _orderId) external view returns (OrderIn memory) {\\r\\n\\t\\treturn orderIn[_orderId];\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {isTokenSupported-IGateway}. */\\r\\n\\tfunction isTokenSupported(address _token) external view returns (bool) {\\r\\n\\t\\tif (_isTokenSupported[_token] == 1) return true;\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {getFeeDetails-IGateway}. */\\r\\n\\tfunction getFeeDetails() external view returns (uint64, uint256) {\\r\\n\\t\\treturn (protocolFeePercent, MAX_BPS);\\r\\n\\t}\\r\\n\\r\\n\\t/** @dev See {getBalance-IGateway}. */\\r\\n\\tfunction getBalance(address _token, address _provider) external view returns (uint256) {\\r\\n\\t\\treturn balance[_token][_provider];\\r\\n\\t}\\r\\n\\r\\n\\t/** See {isOrderProcessed-IGateway} */\\r\\n\\tfunction isOrderProcessed(bytes32 _orderId) external view returns (bool) {\\r\\n\\t\\treturn processedOrders[_orderId];\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xeac152125403fc61ccb24e39afbedc97cf4bfcee52933d672c0309f7b937fd47\",\"license\":\"UNLICENSED\"},\"contracts/GatewaySettingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * @title GatewaySettingManager\\n * @dev This contract manages the settings and configurations for the Gateway protocol.\\n */\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol';\\n\\ncontract GatewaySettingManager is Ownable2StepUpgradeable {\\n\\tuint256 internal MAX_BPS;\\n\\tuint64 internal protocolFeePercent;\\n\\taddress internal treasuryAddress;\\n\\taddress internal _aggregatorAddress;\\n\\tmapping(address => uint256) internal _isTokenSupported;\\n\\n\\t// this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n\\tuint256[50] private __gap;\\n\\n\\n\\tevent SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status);\\n\\tevent ProtocolFeeUpdated(uint64 protocolFee);\\n\\tevent ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress);\\n\\tevent SetFeeRecipient(address indexed treasuryAddress);\\n\\n\\t/* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n\\n\\t/**\\n\\t * @dev Sets the boolean value for a specific setting.\\n\\t * @param what The setting to be updated.\\n\\t * @param value The address or value associated with the setting.\\n\\t * @param status The boolean value to be set.\\n\\t * Requirements:\\n\\t * - The value must not be a zero address.\\n\\t */\\n\\tfunction settingManagerBool(bytes32 what, address value, uint256 status) external onlyOwner {\\n\\t\\trequire(value != address(0), 'Gateway: zero address');\\n\\t\\trequire(status == 1 || status == 2, 'Gateway: invalid status');\\n\\t\\tif (what == 'token') {\\n\\t\\t\\t_isTokenSupported[value] = status;\\n\\t\\t\\temit SettingManagerBool(what, value, status);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the protocol fee percentage.\\n\\t * @param _protocolFeePercent The new protocol fee percentage to be set.\\n\\t */\\n\\tfunction updateProtocolFee(uint64 _protocolFeePercent) external onlyOwner {\\n\\t\\tprotocolFeePercent = _protocolFeePercent;\\n\\t\\temit ProtocolFeeUpdated(_protocolFeePercent);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates a protocol address.\\n\\t * @param what The address type to be updated (treasury or aggregator).\\n\\t * @param value The new address to be set.\\n\\t * Requirements:\\n\\t * - The value must not be a zero address.\\n\\t */\\n\\tfunction updateProtocolAddress(bytes32 what, address value) external onlyOwner {\\n\\t\\trequire(value != address(0), 'Gateway: zero address');\\n\\t\\tbool updated;\\n\\t\\tif (what == 'treasury') {\\n\\t\\t\\trequire(treasuryAddress != value, 'Gateway: treasury address already set');\\n\\t\\t\\ttreasuryAddress = value;\\n\\t\\t\\tupdated = true;\\n\\t\\t} else if (what == 'aggregator') {\\n\\t\\t\\trequire(_aggregatorAddress != value, 'Gateway: aggregator address already set');\\n\\t\\t\\t_aggregatorAddress = value;\\n\\t\\t\\tupdated = true;\\n\\t\\t}\\n\\t\\tif (updated) {\\n\\t\\t\\temit ProtocolAddressUpdated(what, value);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xa6bc7df8377942cbbcd340f9fddad581486e8842ab71e5109b4d71ea1e148059\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\n/**\\r\\n * @title IGateway\\r\\n * @notice Interface for the Gateway contract.\\r\\n */\\r\\ninterface IGateway {\\r\\n\\t/* ##################################################################\\r\\n                                EVENTS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @notice Emitted when an order is created.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param token The address of the deposited token.\\r\\n\\t * @param amount The amount of the deposit.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t * @param rate The rate at which the deposit is made.\\r\\n\\t * @param messageHash The hash of the message.\\r\\n\\t */\\r\\n\\tevent OrderCreated(\\r\\n\\t\\taddress indexed sender,\\r\\n\\t\\taddress indexed token,\\r\\n\\t\\tuint256 indexed amount,\\r\\n\\t\\tuint256 protocolFee,\\r\\n\\t\\tbytes32 orderId,\\r\\n\\t\\tuint256 rate,\\r\\n\\t\\tstring messageHash\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when an order is settled out.\\r\\n\\t * @param splitOrderId The ID of the split order.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t * @param liquidityProvider The address of the liquidity provider.\\r\\n\\t * @param settlePercent The percentage at which the transaction is settled.\\r\\n\\t */\\r\\n\\tevent OrderSettledOut(\\r\\n\\t\\tbytes32 splitOrderId,\\r\\n\\t\\tbytes32 indexed orderId,\\r\\n\\t\\taddress indexed liquidityProvider,\\r\\n\\t\\tuint96 settlePercent\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when an aggregator refunds a transaction.\\r\\n\\t * @param fee The fee deducted from the refund amount.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t */\\r\\n\\tevent OrderRefunded(uint256 fee, bytes32 indexed orderId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when the sender's fee is transferred.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param amount The amount of the fee transferred.\\r\\n\\t */\\r\\n\\tevent SenderFeeTransferred(address indexed sender, uint256 indexed amount);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when a deposit is made by a provider.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param token The address of the deposited token.\\r\\n\\t * @param amount The amount of the deposit.\\r\\n\\t */\\r\\n\\tevent Deposit(address indexed sender, address indexed token, uint256 indexed amount);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when an order is settled in.\\r\\n\\t * @param provider The address of the provider.\\r\\n\\t * @param senderAddress The address of the sender.\\r\\n\\t * @param amount The address of the deposited token.\\r\\n\\t * @param token The amount of the deposit.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t */\\r\\n\\tevent OrderSettledIn(address indexed provider, address indexed senderAddress, uint256 indexed amount, address token, bytes32 orderId);\\r\\n\\t/* ##################################################################\\r\\n                                STRUCTS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @notice Struct representing an order out.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param token The address of the token.\\r\\n\\t * @param senderFeeRecipient The address of the sender fee recipient.\\r\\n\\t * @param senderFee The fee to be paid to the sender fee recipient.\\r\\n\\t * @param protocolFee The protocol fee to be paid.\\r\\n\\t * @param isFulfilled Whether the order is fulfilled.\\r\\n\\t * @param isRefunded Whether the order is refunded.\\r\\n\\t * @param refundAddress The address to which the refund is made.\\r\\n\\t * @param currentBPS The current basis points.\\r\\n\\t * @param amount The amount of the order.\\r\\n\\t */\\r\\n\\tstruct OrderOut {\\r\\n\\t\\taddress sender;\\r\\n\\t\\taddress token;\\r\\n\\t\\taddress senderFeeRecipient;\\r\\n\\t\\tuint256 senderFee;\\r\\n\\t\\tuint256 protocolFee;\\r\\n\\t\\tbool isFulfilled;\\r\\n\\t\\tbool isRefunded;\\r\\n\\t\\taddress refundAddress;\\r\\n\\t\\tuint96 currentBPS;\\r\\n\\t\\tuint256 amount;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Struct representing an order settled in.\\r\\n\\t * @param amount  The amount of the order.\\r\\n\\t * @param provider  The address of the provider.\\r\\n\\t * @param sender  The address of the sender. \\r\\n\\t * @param token The address of the token. \\r\\n\\t * @param orderid The ID of the order.\\r\\n\\t */\\r\\n\\tstruct OrderIn {\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\taddress provider;\\r\\n\\t\\taddress sender;\\r\\n\\t\\taddress token;\\r\\n\\t\\tbytes32 orderId;\\r\\n\\t}\\r\\n\\r\\n\\t/* ##################################################################\\r\\n                                EXTERNAL CALLS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @notice Locks the sender's amount of token into Gateway.\\r\\n\\t * @dev Requirements:\\r\\n\\t * - `msg.sender` must approve Gateway contract on `_token` of at least `amount` before function call.\\r\\n\\t * - `_token` must be an acceptable token. See {isTokenSupported}.\\r\\n\\t * - `amount` must be greater than minimum.\\r\\n\\t * - `_refundAddress` refund address must not be zero address.\\r\\n\\t * @param _token The address of the token.\\r\\n\\t * @param _amount The amount in the decimal of `_token` to be locked.\\r\\n\\t * @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\\r\\n\\t * @param _senderFeeRecipient The address that will receive `_senderFee` in `_token`.\\r\\n\\t * @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient`.\\r\\n\\t * @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\\r\\n\\t * @param messageHash The hash of the message.\\r\\n\\t * @return _orderId The ID of the order.\\r\\n\\t */\\r\\n\\tfunction createOrder(\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint96 _rate,\\r\\n\\t\\taddress _senderFeeRecipient,\\r\\n\\t\\tuint256 _senderFee,\\r\\n\\t\\taddress _refundAddress,\\r\\n\\t\\tstring calldata messageHash\\r\\n\\t) external returns (bytes32 _orderId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Settles an order out transaction and distributes fees accordingly.\\r\\n\\t * @param _splitOrderId The ID of the split order.\\r\\n\\t * @param _orderId The ID of the transaction.\\r\\n\\t * @param _provider The address of the liquidity provider.\\r\\n\\t * @param _settlePercent The rate at which the transaction is settled.\\r\\n\\t * @return bool The settlement is successful.\\r\\n\\t */\\r\\n\\tfunction settleOrderOut(\\r\\n\\t\\tbytes32 _splitOrderId,\\r\\n\\t\\tbytes32 _orderId,\\r\\n\\t\\taddress _provider,\\r\\n\\t\\tuint64 _settlePercent\\r\\n\\t) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Refunds to the specified refund address.\\r\\n\\t * @dev Requirements:\\r\\n\\t * - Only aggregators can call this function.\\r\\n\\t * @param _fee The amount to be deducted from the amount to be refunded.\\r\\n\\t * @param _orderId The ID of the transaction.\\r\\n\\t * @return bool the refund is successful.\\r\\n\\t */\\r\\n\\tfunction refundOrder(uint256 _fee, bytes32 _orderId) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow a provider to deposit an asset into Gateway.\\r\\n\\t * @dev Requirements:\\r\\n\\t * - The amount must be greater than minimum.\\r\\n\\t * - The asset must be supported.\\r\\n\\t * - The provider must approve Gateway contract on `_token` of at least `_amount` before function call\\r\\n\\t * @param _token The address of the asset.\\r\\n\\t * @param _amount The amount to be deposited.\\r\\n\\t * @return bool The deposit is successful.\\r\\n\\t */\\r\\n\\tfunction deposit(address _token, uint256 _amount) external returns (bool);\\r\\n\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @notice Allow aggregator to settle an order coming in.\\r\\n\\t * @param _orderId The ID of the transaction.\\r\\n\\t * @param _signature The signature of the provider.\\r\\n\\t * @param _provider The address of the provider.\\r\\n\\t * @param _senderAddress The address of the sender.\\r\\n\\t * @param _token The address of the asset.\\r\\n\\t * @param _amount The amount to be transferred.\\r\\n\\t */\\r\\n\\tfunction settleOrderIn(\\r\\n        bytes32 _orderId,\\r\\n        bytes memory _signature,\\r\\n        address _provider,\\r\\n        address _senderAddress,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if a token is supported by Gateway.\\r\\n\\t * @param _token The address of the token to check.\\r\\n\\t * @return bool the token is supported.\\r\\n\\t */\\r\\n\\tfunction isTokenSupported(address _token) external view returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the details of an off ramp order.\\r\\n\\t * @param _orderId The ID of the order.\\r\\n\\t * @return Order The order details.\\r\\n\\t */\\r\\n\\tfunction getOrderInfoOut(bytes32 _orderId) external view returns (OrderOut memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the details of an on ramp order.\\r\\n\\t * @param _orderId The ID of the order.\\r\\n\\t * @return Order The order details.\\r\\n\\t */\\r\\n\\tfunction getOrderInfoIn(bytes32 _orderId) external view returns (OrderIn memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the fee details of Gateway.\\r\\n\\t * @return protocolReward The protocol reward amount.\\r\\n\\t * @return max_bps The maximum basis points.\\r\\n\\t */\\r\\n\\tfunction getFeeDetails() external view returns (uint64 protocolReward, uint256 max_bps);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the balance of a provider.\\r\\n\\t * @param _provider The address of the provider.\\r\\n\\t * @param _asset The address of the asset.\\r\\n\\t * @return uint256 The provider's balance.\\r\\n\\t */\\r\\n\\tfunction getBalance(address _asset, address _provider) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets order processed status.\\r\\n\\t * @param _orderId The ID of the order.\\r\\n\\t * @return bool The order processed status.\\r\\n\\t */\\r\\n\\tfunction isOrderProcessed(bytes32 _orderId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x469b0295e42591f14c7a722c28cd38e09181178d347f3f160a5c2f44797aa2d6\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"contracts/Gateway.sol:Gateway","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"contracts/Gateway.sol:Gateway","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":916,"contract":"contracts/Gateway.sol:Gateway","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":118,"contract":"contracts/Gateway.sol:Gateway","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":238,"contract":"contracts/Gateway.sol:Gateway","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":11,"contract":"contracts/Gateway.sol:Gateway","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":105,"contract":"contracts/Gateway.sol:Gateway","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":3444,"contract":"contracts/Gateway.sol:Gateway","label":"MAX_BPS","offset":0,"slot":"151","type":"t_uint256"},{"astId":3446,"contract":"contracts/Gateway.sol:Gateway","label":"protocolFeePercent","offset":0,"slot":"152","type":"t_uint64"},{"astId":3448,"contract":"contracts/Gateway.sol:Gateway","label":"treasuryAddress","offset":8,"slot":"152","type":"t_address"},{"astId":3450,"contract":"contracts/Gateway.sol:Gateway","label":"_aggregatorAddress","offset":0,"slot":"153","type":"t_address"},{"astId":3454,"contract":"contracts/Gateway.sol:Gateway","label":"_isTokenSupported","offset":0,"slot":"154","type":"t_mapping(t_address,t_uint256)"},{"astId":3458,"contract":"contracts/Gateway.sol:Gateway","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)50_storage"},{"astId":430,"contract":"contracts/Gateway.sol:Gateway","label":"_paused","offset":0,"slot":"205","type":"t_bool"},{"astId":535,"contract":"contracts/Gateway.sol:Gateway","label":"__gap","offset":0,"slot":"206","type":"t_array(t_uint256)49_storage"},{"astId":2590,"contract":"contracts/Gateway.sol:Gateway","label":"orderOut","offset":0,"slot":"255","type":"t_mapping(t_bytes32,t_struct(OrderOut)3711_storage)"},{"astId":2595,"contract":"contracts/Gateway.sol:Gateway","label":"orderIn","offset":0,"slot":"256","type":"t_mapping(t_bytes32,t_struct(OrderIn)3722_storage)"},{"astId":2599,"contract":"contracts/Gateway.sol:Gateway","label":"_nonce","offset":0,"slot":"257","type":"t_mapping(t_address,t_uint256)"},{"astId":2605,"contract":"contracts/Gateway.sol:Gateway","label":"balance","offset":0,"slot":"258","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":2609,"contract":"contracts/Gateway.sol:Gateway","label":"processedOrders","offset":0,"slot":"259","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2613,"contract":"contracts/Gateway.sol:Gateway","label":"__gap","offset":0,"slot":"260","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(OrderIn)3722_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IGateway.OrderIn)","numberOfBytes":"32","value":"t_struct(OrderIn)3722_storage"},"t_mapping(t_bytes32,t_struct(OrderOut)3711_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IGateway.OrderOut)","numberOfBytes":"32","value":"t_struct(OrderOut)3711_storage"},"t_struct(OrderIn)3722_storage":{"encoding":"inplace","label":"struct IGateway.OrderIn","members":[{"astId":3713,"contract":"contracts/Gateway.sol:Gateway","label":"amount","offset":0,"slot":"0","type":"t_uint256"},{"astId":3715,"contract":"contracts/Gateway.sol:Gateway","label":"provider","offset":0,"slot":"1","type":"t_address"},{"astId":3717,"contract":"contracts/Gateway.sol:Gateway","label":"sender","offset":0,"slot":"2","type":"t_address"},{"astId":3719,"contract":"contracts/Gateway.sol:Gateway","label":"token","offset":0,"slot":"3","type":"t_address"},{"astId":3721,"contract":"contracts/Gateway.sol:Gateway","label":"orderId","offset":0,"slot":"4","type":"t_bytes32"}],"numberOfBytes":"160"},"t_struct(OrderOut)3711_storage":{"encoding":"inplace","label":"struct IGateway.OrderOut","members":[{"astId":3692,"contract":"contracts/Gateway.sol:Gateway","label":"sender","offset":0,"slot":"0","type":"t_address"},{"astId":3694,"contract":"contracts/Gateway.sol:Gateway","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":3696,"contract":"contracts/Gateway.sol:Gateway","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":3698,"contract":"contracts/Gateway.sol:Gateway","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":3700,"contract":"contracts/Gateway.sol:Gateway","label":"protocolFee","offset":0,"slot":"4","type":"t_uint256"},{"astId":3702,"contract":"contracts/Gateway.sol:Gateway","label":"isFulfilled","offset":0,"slot":"5","type":"t_bool"},{"astId":3704,"contract":"contracts/Gateway.sol:Gateway","label":"isRefunded","offset":1,"slot":"5","type":"t_bool"},{"astId":3706,"contract":"contracts/Gateway.sol:Gateway","label":"refundAddress","offset":2,"slot":"5","type":"t_address"},{"astId":3708,"contract":"contracts/Gateway.sol:Gateway","label":"currentBPS","offset":0,"slot":"6","type":"t_uint96"},{"astId":3710,"contract":"contracts/Gateway.sol:Gateway","label":"amount","offset":0,"slot":"7","type":"t_uint256"}],"numberOfBytes":"256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"events":{"Deposit(address,address,uint256)":{"notice":"Emitted when a deposit is made by a provider."},"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)":{"notice":"Emitted when an order is created."},"OrderRefunded(uint256,bytes32)":{"notice":"Emitted when an aggregator refunds a transaction."},"OrderSettledOut(bytes32,bytes32,address,uint96)":{"notice":"Emitted when an order is settled out."},"SenderFeeTransferred(address,uint256)":{"notice":"Emitted when the sender's fee is transferred."}},"kind":"user","methods":{"isOrderProcessed(bytes32)":{"notice":"See {isOrderProcessed-IGateway} "}},"notice":"This contract serves as a gateway for creating orders and managing settlements.","version":1}}},"contracts/GatewaySettingManager.sol":{"GatewaySettingManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":true,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"ProtocolAddressUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"ProtocolFeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"treasuryAddress","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":true,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"uint256","name":"status","type":"uint256"}],"name":"SettingManagerBool","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"uint256","name":"status","type":"uint256"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFee","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settingManagerBool(bytes32,address,uint256)":{"details":"Sets the boolean value for a specific setting.","params":{"status":"The boolean value to be set. Requirements: - The value must not be a zero address.","value":"The address or value associated with the setting.","what":"The setting to be updated."}},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."},"updateProtocolAddress(bytes32,address)":{"details":"Updates a protocol address.","params":{"value":"The new address to be set. Requirements: - The value must not be a zero address.","what":"The address type to be updated (treasury or aggregator)."}},"updateProtocolFee(uint64)":{"details":"Updates the protocol fee percentage.","params":{"_protocolFeePercent":"The new protocol fee percentage to be set."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610672908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c90816340ebc677146103d157816347094e2e14610361578163715018a6146102f757816379ba50971461022c5781638da5cb5b14610203578163cd99240014610115578163e30c3978146100ec575063f2fde38b1461007a57600080fd5b346100e85760203660031901126100e857356001600160a01b03818116918290036100e4576100a76105a0565b606580546001600160a01b03191683179055603354167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b8280fd5b5080fd5b8390346100e857816003193601126100e85760655490516001600160a01b039091168152602090f35b9050346100e45760603660031901126100e457813590610133610585565b90604435916101406105a0565b6001600160a01b0316936101558515156105f8565b6001831480156101f9575b156101b75750643a37b5b2b760d91b8314610179578480f35b7fcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c91602091858752609a8352818188205551908152a3388080808480f35b6020606492519162461bcd60e51b8352820152601760248201527f476174657761793a20696e76616c6964207374617475730000000000000000006044820152fd5b5060028314610160565b8390346100e857816003193601126100e85760335490516001600160a01b039091168152602090f35b9050346100e457826003193601126100e457606554916001600160a01b039133838516036102a25750506bffffffffffffffffffffffff60a01b8092166065556033549133908316176033553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152fd5b833461035e578060031936011261035e576103106105a0565b606580546001600160a01b031990811690915560338054918216905581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b919050346100e45760203660031901126100e457359067ffffffffffffffff82168092036100e4577f1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b916020916103b66105a0565b8167ffffffffffffffff19609854161760985551908152a180f35b9050346100e457806003193601126100e4578135906103ee610585565b906103f76105a0565b6001600160a01b03828116949092906104118615156105f8565b8667747265617375727960c01b86036104e65750856098549485851c1614610495575068010000000000000000600160e01b031990921691901b68010000000000000000600160e01b03161760985560015b61046b578280f35b7fbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a48380a338808280f35b608490602084519162461bcd60e51b8352820152602560248201527f476174657761793a207472656173757279206164647265737320616c726561646044820152641e481cd95d60da1b6064820152fd5b93929091506930b3b3b932b3b0ba37b960b11b8514610508575b505050610463565b60995493509091831685146105325750506001600160a01b03191682176099556001388080610500565b906020608492519162461bcd60e51b8352820152602760248201527f476174657761793a2061676772656761746f72206164647265737320616c726560448201526618591e481cd95d60ca1b6064820152fd5b602435906001600160a01b038216820361059b57565b600080fd5b6033546001600160a01b031633036105b457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156105ff57565b60405162461bcd60e51b8152602060048201526015602482015274476174657761793a207a65726f206164647265737360581b6044820152606490fdfea2646970667358221220d7d303c1ed8ef3b4ea0c2bd21f980d0c6c846cbfa3b29b0986087506184b4f7564736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x672 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x40EBC677 EQ PUSH2 0x3D1 JUMPI DUP2 PUSH4 0x47094E2E EQ PUSH2 0x361 JUMPI DUP2 PUSH4 0x715018A6 EQ PUSH2 0x2F7 JUMPI DUP2 PUSH4 0x79BA5097 EQ PUSH2 0x22C JUMPI DUP2 PUSH4 0x8DA5CB5B EQ PUSH2 0x203 JUMPI DUP2 PUSH4 0xCD992400 EQ PUSH2 0x115 JUMPI DUP2 PUSH4 0xE30C3978 EQ PUSH2 0xEC JUMPI POP PUSH4 0xF2FDE38B EQ PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE8 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0xE4 JUMPI PUSH2 0xA7 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0x33 SLOAD AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0xE8 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE8 JUMPI PUSH1 0x65 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE4 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x133 PUSH2 0x585 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x140 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 PUSH2 0x155 DUP6 ISZERO ISZERO PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x1 DUP4 EQ DUP1 ISZERO PUSH2 0x1F9 JUMPI JUMPDEST ISZERO PUSH2 0x1B7 JUMPI POP PUSH5 0x3A37B5B2B7 PUSH1 0xD9 SHL DUP4 EQ PUSH2 0x179 JUMPI DUP5 DUP1 RETURN JUMPDEST PUSH32 0xCFA976492AF7C14A916CC3A239F4C9C75BBD7F5F0E398BEB41D892C7EECCAE4C SWAP2 PUSH1 0x20 SWAP2 DUP6 DUP8 MSTORE PUSH1 0x9A DUP4 MSTORE DUP2 DUP2 DUP9 KECCAK256 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 CODESIZE DUP1 DUP1 DUP1 DUP5 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A20696E76616C696420737461747573000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x2 DUP4 EQ PUSH2 0x160 JUMP JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0xE8 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE8 JUMPI PUSH1 0x33 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE4 JUMPI PUSH1 0x65 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 CALLER DUP4 DUP6 AND SUB PUSH2 0x2A2 JUMPI POP POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP1 SWAP3 AND PUSH1 0x65 SSTORE PUSH1 0x33 SLOAD SWAP2 CALLER SWAP1 DUP4 AND OR PUSH1 0x33 SSTORE CALLER SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0x35E JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35E JUMPI PUSH2 0x310 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x33 DUP1 SLOAD SWAP2 DUP3 AND SWAP1 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE4 JUMPI CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0xE4 JUMPI PUSH32 0x1CE29A697A4765BD17D91DF93BA75B250B629ECF030553FF1F6AB59F15AE6C7B SWAP2 PUSH1 0x20 SWAP2 PUSH2 0x3B6 PUSH2 0x5A0 JUMP JUMPDEST DUP2 PUSH8 0xFFFFFFFFFFFFFFFF NOT PUSH1 0x98 SLOAD AND OR PUSH1 0x98 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE4 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x3EE PUSH2 0x585 JUMP JUMPDEST SWAP1 PUSH2 0x3F7 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP5 SWAP1 SWAP3 SWAP1 PUSH2 0x411 DUP7 ISZERO ISZERO PUSH2 0x5F8 JUMP JUMPDEST DUP7 PUSH8 0x7472656173757279 PUSH1 0xC0 SHL DUP7 SUB PUSH2 0x4E6 JUMPI POP DUP6 PUSH1 0x98 SLOAD SWAP5 DUP6 DUP6 SHR AND EQ PUSH2 0x495 JUMPI POP PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SHL PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND OR PUSH1 0x98 SSTORE PUSH1 0x1 JUMPDEST PUSH2 0x46B JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH32 0xBBC5B96E57CFECB3DBEEADF92E87F15E58E64FCD75CBE256DCC5D9EF2E51E8A4 DUP4 DUP1 LOG3 CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A207472656173757279206164647265737320616C72656164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1E481CD95D PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 POP PUSH10 0x30B3B3B932B3B0BA37B9 PUSH1 0xB1 SHL DUP6 EQ PUSH2 0x508 JUMPI JUMPDEST POP POP POP PUSH2 0x463 JUMP JUMPDEST PUSH1 0x99 SLOAD SWAP4 POP SWAP1 SWAP2 DUP4 AND DUP6 EQ PUSH2 0x532 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR PUSH1 0x99 SSTORE PUSH1 0x1 CODESIZE DUP1 DUP1 PUSH2 0x500 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A2061676772656761746F72206164647265737320616C7265 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x18591E481CD95D PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x59B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x5B4 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x5FF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x476174657761793A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 0xD3 SUB 0xC1 0xED DUP15 RETURN 0xB4 0xEA 0xC 0x2B 0xD2 0x1F SWAP9 0xD 0xC PUSH13 0x846CBFA3B29B0986087506184B 0x4F PUSH22 0x64736F6C634300081200330000000000000000000000 ","sourceMap":"276:2570:12:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":1413,"id":null,"parameterSlots":0,"returnSlots":1},"fun_checkOwner":{"entryPoint":1440,"id":176,"parameterSlots":0,"returnSlots":0},"require_helper_stringliteral_1ed1":{"entryPoint":1528,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60406080815260048036101561001457600080fd5b600091823560e01c90816340ebc677146103d157816347094e2e14610361578163715018a6146102f757816379ba50971461022c5781638da5cb5b14610203578163cd99240014610115578163e30c3978146100ec575063f2fde38b1461007a57600080fd5b346100e85760203660031901126100e857356001600160a01b03818116918290036100e4576100a76105a0565b606580546001600160a01b03191683179055603354167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b8280fd5b5080fd5b8390346100e857816003193601126100e85760655490516001600160a01b039091168152602090f35b9050346100e45760603660031901126100e457813590610133610585565b90604435916101406105a0565b6001600160a01b0316936101558515156105f8565b6001831480156101f9575b156101b75750643a37b5b2b760d91b8314610179578480f35b7fcfa976492af7c14a916cc3a239f4c9c75bbd7f5f0e398beb41d892c7eeccae4c91602091858752609a8352818188205551908152a3388080808480f35b6020606492519162461bcd60e51b8352820152601760248201527f476174657761793a20696e76616c6964207374617475730000000000000000006044820152fd5b5060028314610160565b8390346100e857816003193601126100e85760335490516001600160a01b039091168152602090f35b9050346100e457826003193601126100e457606554916001600160a01b039133838516036102a25750506bffffffffffffffffffffffff60a01b8092166065556033549133908316176033553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152fd5b833461035e578060031936011261035e576103106105a0565b606580546001600160a01b031990811690915560338054918216905581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b919050346100e45760203660031901126100e457359067ffffffffffffffff82168092036100e4577f1ce29a697a4765bd17d91df93ba75b250b629ecf030553ff1f6ab59f15ae6c7b916020916103b66105a0565b8167ffffffffffffffff19609854161760985551908152a180f35b9050346100e457806003193601126100e4578135906103ee610585565b906103f76105a0565b6001600160a01b03828116949092906104118615156105f8565b8667747265617375727960c01b86036104e65750856098549485851c1614610495575068010000000000000000600160e01b031990921691901b68010000000000000000600160e01b03161760985560015b61046b578280f35b7fbbc5b96e57cfecb3dbeeadf92e87f15e58e64fcd75cbe256dcc5d9ef2e51e8a48380a338808280f35b608490602084519162461bcd60e51b8352820152602560248201527f476174657761793a207472656173757279206164647265737320616c726561646044820152641e481cd95d60da1b6064820152fd5b93929091506930b3b3b932b3b0ba37b960b11b8514610508575b505050610463565b60995493509091831685146105325750506001600160a01b03191682176099556001388080610500565b906020608492519162461bcd60e51b8352820152602760248201527f476174657761793a2061676772656761746f72206164647265737320616c726560448201526618591e481cd95d60ca1b6064820152fd5b602435906001600160a01b038216820361059b57565b600080fd5b6033546001600160a01b031633036105b457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156105ff57565b60405162461bcd60e51b8152602060048201526015602482015274476174657761793a207a65726f206164647265737360581b6044820152606490fdfea2646970667358221220d7d303c1ed8ef3b4ea0c2bd21f980d0c6c846cbfa3b29b0986087506184b4f7564736f6c63430008120033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x40EBC677 EQ PUSH2 0x3D1 JUMPI DUP2 PUSH4 0x47094E2E EQ PUSH2 0x361 JUMPI DUP2 PUSH4 0x715018A6 EQ PUSH2 0x2F7 JUMPI DUP2 PUSH4 0x79BA5097 EQ PUSH2 0x22C JUMPI DUP2 PUSH4 0x8DA5CB5B EQ PUSH2 0x203 JUMPI DUP2 PUSH4 0xCD992400 EQ PUSH2 0x115 JUMPI DUP2 PUSH4 0xE30C3978 EQ PUSH2 0xEC JUMPI POP PUSH4 0xF2FDE38B EQ PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE8 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP3 SWAP1 SUB PUSH2 0xE4 JUMPI PUSH2 0xA7 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP4 OR SWAP1 SSTORE PUSH1 0x33 SLOAD AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0xE8 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE8 JUMPI PUSH1 0x65 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE4 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x133 PUSH2 0x585 JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x140 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP4 PUSH2 0x155 DUP6 ISZERO ISZERO PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x1 DUP4 EQ DUP1 ISZERO PUSH2 0x1F9 JUMPI JUMPDEST ISZERO PUSH2 0x1B7 JUMPI POP PUSH5 0x3A37B5B2B7 PUSH1 0xD9 SHL DUP4 EQ PUSH2 0x179 JUMPI DUP5 DUP1 RETURN JUMPDEST PUSH32 0xCFA976492AF7C14A916CC3A239F4C9C75BBD7F5F0E398BEB41D892C7EECCAE4C SWAP2 PUSH1 0x20 SWAP2 DUP6 DUP8 MSTORE PUSH1 0x9A DUP4 MSTORE DUP2 DUP2 DUP9 KECCAK256 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 CODESIZE DUP1 DUP1 DUP1 DUP5 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A20696E76616C696420737461747573000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x2 DUP4 EQ PUSH2 0x160 JUMP JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0xE8 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE8 JUMPI PUSH1 0x33 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE4 JUMPI PUSH1 0x65 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 CALLER DUP4 DUP6 AND SUB PUSH2 0x2A2 JUMPI POP POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP1 SWAP3 AND PUSH1 0x65 SSTORE PUSH1 0x33 SLOAD SWAP2 CALLER SWAP1 DUP4 AND OR PUSH1 0x33 SSTORE CALLER SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0x35E JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x35E JUMPI PUSH2 0x310 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x33 DUP1 SLOAD SWAP2 DUP3 AND SWAP1 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE4 JUMPI CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND DUP1 SWAP3 SUB PUSH2 0xE4 JUMPI PUSH32 0x1CE29A697A4765BD17D91DF93BA75B250B629ECF030553FF1F6AB59F15AE6C7B SWAP2 PUSH1 0x20 SWAP2 PUSH2 0x3B6 PUSH2 0x5A0 JUMP JUMPDEST DUP2 PUSH8 0xFFFFFFFFFFFFFFFF NOT PUSH1 0x98 SLOAD AND OR PUSH1 0x98 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0xE4 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE4 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x3EE PUSH2 0x585 JUMP JUMPDEST SWAP1 PUSH2 0x3F7 PUSH2 0x5A0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP5 SWAP1 SWAP3 SWAP1 PUSH2 0x411 DUP7 ISZERO ISZERO PUSH2 0x5F8 JUMP JUMPDEST DUP7 PUSH8 0x7472656173757279 PUSH1 0xC0 SHL DUP7 SUB PUSH2 0x4E6 JUMPI POP DUP6 PUSH1 0x98 SLOAD SWAP5 DUP6 DUP6 SHR AND EQ PUSH2 0x495 JUMPI POP PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SHL PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND OR PUSH1 0x98 SSTORE PUSH1 0x1 JUMPDEST PUSH2 0x46B JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH32 0xBBC5B96E57CFECB3DBEEADF92E87F15E58E64FCD75CBE256DCC5D9EF2E51E8A4 DUP4 DUP1 LOG3 CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A207472656173757279206164647265737320616C72656164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1E481CD95D PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP4 SWAP3 SWAP1 SWAP2 POP PUSH10 0x30B3B3B932B3B0BA37B9 PUSH1 0xB1 SHL DUP6 EQ PUSH2 0x508 JUMPI JUMPDEST POP POP POP PUSH2 0x463 JUMP JUMPDEST PUSH1 0x99 SLOAD SWAP4 POP SWAP1 SWAP2 DUP4 AND DUP6 EQ PUSH2 0x532 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP3 OR PUSH1 0x99 SSTORE PUSH1 0x1 CODESIZE DUP1 DUP1 PUSH2 0x500 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476174657761793A2061676772656761746F72206164647265737320616C7265 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x18591E481CD95D PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x59B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x5B4 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x5FF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x476174657761793A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 0xD3 SUB 0xC1 0xED DUP15 RETURN 0xB4 0xEA 0xC 0x2B 0xD2 0x1F SWAP9 0xD 0xC PUSH13 0x846CBFA3B29B0986087506184B 0x4F PUSH22 0x64736F6C634300081200330000000000000000000000 ","sourceMap":"276:2570:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;276:2570:12;;;;;-1:-1:-1;;;;;276:2570:12;;;;;;;;;1324:62:1;;:::i;:::-;1525:24:0;276:2570:12;;-1:-1:-1;;;;;;276:2570:12;;;;;1534:6:1;276:2570:12;;1564:43:0;;;;276:2570:12;;;;;;;;;;;;;;;;;;;;;;;;1223:13:0;276:2570:12;;;-1:-1:-1;;;;;276:2570:12;;;;;;;;;;;;;;;;-1:-1:-1;;276:2570:12;;;;;;;;;:::i;:::-;;;;1324:62:1;;;:::i;:::-;-1:-1:-1;;;;;276:2570:12;;1522:53;1530:19;;;1522:53;:::i;:::-;276:2570;1587:11;;:26;;;;276:2570;;;;-1:-1:-1;;;;1649:15:12;;1645:113;;276:2570;;;1645:113;1714:39;276:2570;;;;;;1671:17;276:2570;;;;;;;;;;;1714:39;1645:113;;;;276:2570;;;;;;;;;;;;;;;;;;;;;;;;;;;;1587:26;1602:11;1612:1;1602:11;;1587:26;;276:2570;;;;;;;;;;;;;;1534:6:1;276:2570:12;;;-1:-1:-1;;;;;276:2570:12;;;;;;;;;;;;;;;;;;;;;;1223:13:0;276:2570:12;;-1:-1:-1;;;;;276:2570:12;965:10:5;276:2570:12;;;2130:24:0;276:2570:12;;;;;;;;;;1223:13:0;276:2570:12;2779:6:1;276:2570:12;965:10:5;;276:2570:12;;;;2779:6:1;276:2570:12;965:10:5;276:2570:12;;2827:40:1;;;;276:2570:12;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;276:2570:12;;;;;;;;;;;;;;;;;;1324:62:1;;:::i;:::-;1880:20:0;276:2570:12;;-1:-1:-1;;;;;;276:2570:12;;;;;;2779:6:1;276:2570:12;;;;;;;;;-1:-1:-1;;;;;276:2570:12;2827:40:1;276:2570:12;;2827:40:1;276:2570:12;;;;;;;;;;;;;;-1:-1:-1;;276:2570:12;;;;;;;;;;;;;;2021:39;1324:62:1;276:2570:12;1324:62:1;;;:::i;:::-;276:2570:12;;;1972:40;276:2570;;;1972:40;276:2570;;;;;2021:39;276:2570;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1324:62:1;;;:::i;:::-;-1:-1:-1;;;;;276:2570:12;;;;;;;2376:53;2384:19;;;2376:53;:::i;:::-;2433:12;-1:-1:-1;;;2453:18:12;;276:2570;;;;2486:15;276:2570;;;;;;2486:24;276:2570;;-1:-1:-1;;;;;;;276:2570:12;;;;;;-1:-1:-1;;;;;276:2570:12;;2486:15;276:2570;;2449:326;2778:63;;276:2570;;;2778:63;2801:35;;;;2778:63;;276:2570;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;276:2570:12;;;;;2449:326;276:2570;;;;-1:-1:-1;;;;2614:20:12;;2610:165;;2449:326;;;;;;2610:165;2649:18;276:2570;;-1:-1:-1;276:2570:12;;;;2649:27;;276:2570;;-1:-1:-1;;;;;;;;276:2570:12;;;2649:18;276:2570;;2610:165;;;;;276:2570;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;276:2570:12;;;;;;;;;-1:-1:-1;;;;;276:2570:12;;;;;;:::o;:::-;;;;1620:130:1;1534:6;276:2570:12;-1:-1:-1;;;;;276:2570:12;965:10:5;1683:23:1;276:2570:12;;1620:130:1:o;276:2570:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;276:2570:12;;;;;;;;;;;;-1:-1:-1;;;276:2570:12;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"330000","executionCost":"375","totalCost":"330375"},"external":{"acceptOwnership()":"50228","owner()":"2383","pendingOwner()":"2427","renounceOwnership()":"52341","settingManagerBool(bytes32,address,uint256)":"26651","transferOwnership(address)":"30360","updateProtocolAddress(bytes32,address)":"28399","updateProtocolFee(uint64)":"27628"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","settingManagerBool(bytes32,address,uint256)":"cd992400","transferOwnership(address)":"f2fde38b","updateProtocolAddress(bytes32,address)":"40ebc677","updateProtocolFee(uint64)":"47094e2e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"ProtocolAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settingManagerBool(bytes32,address,uint256)\":{\"details\":\"Sets the boolean value for a specific setting.\",\"params\":{\"status\":\"The boolean value to be set. Requirements: - The value must not be a zero address.\",\"value\":\"The address or value associated with the setting.\",\"what\":\"The setting to be updated.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateProtocolAddress(bytes32,address)\":{\"details\":\"Updates a protocol address.\",\"params\":{\"value\":\"The new address to be set. Requirements: - The value must not be a zero address.\",\"what\":\"The address type to be updated (treasury or aggregator).\"}},\"updateProtocolFee(uint64)\":{\"details\":\"Updates the protocol fee percentage.\",\"params\":{\"_protocolFeePercent\":\"The new protocol fee percentage to be set.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GatewaySettingManager.sol\":\"GatewaySettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/GatewaySettingManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n/**\\n * @title GatewaySettingManager\\n * @dev This contract manages the settings and configurations for the Gateway protocol.\\n */\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol';\\n\\ncontract GatewaySettingManager is Ownable2StepUpgradeable {\\n\\tuint256 internal MAX_BPS;\\n\\tuint64 internal protocolFeePercent;\\n\\taddress internal treasuryAddress;\\n\\taddress internal _aggregatorAddress;\\n\\tmapping(address => uint256) internal _isTokenSupported;\\n\\n\\t// this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n\\tuint256[50] private __gap;\\n\\n\\n\\tevent SettingManagerBool(bytes32 indexed what, address indexed value, uint256 status);\\n\\tevent ProtocolFeeUpdated(uint64 protocolFee);\\n\\tevent ProtocolAddressUpdated(bytes32 indexed what, address indexed treasuryAddress);\\n\\tevent SetFeeRecipient(address indexed treasuryAddress);\\n\\n\\t/* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n\\n\\t/**\\n\\t * @dev Sets the boolean value for a specific setting.\\n\\t * @param what The setting to be updated.\\n\\t * @param value The address or value associated with the setting.\\n\\t * @param status The boolean value to be set.\\n\\t * Requirements:\\n\\t * - The value must not be a zero address.\\n\\t */\\n\\tfunction settingManagerBool(bytes32 what, address value, uint256 status) external onlyOwner {\\n\\t\\trequire(value != address(0), 'Gateway: zero address');\\n\\t\\trequire(status == 1 || status == 2, 'Gateway: invalid status');\\n\\t\\tif (what == 'token') {\\n\\t\\t\\t_isTokenSupported[value] = status;\\n\\t\\t\\temit SettingManagerBool(what, value, status);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the protocol fee percentage.\\n\\t * @param _protocolFeePercent The new protocol fee percentage to be set.\\n\\t */\\n\\tfunction updateProtocolFee(uint64 _protocolFeePercent) external onlyOwner {\\n\\t\\tprotocolFeePercent = _protocolFeePercent;\\n\\t\\temit ProtocolFeeUpdated(_protocolFeePercent);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates a protocol address.\\n\\t * @param what The address type to be updated (treasury or aggregator).\\n\\t * @param value The new address to be set.\\n\\t * Requirements:\\n\\t * - The value must not be a zero address.\\n\\t */\\n\\tfunction updateProtocolAddress(bytes32 what, address value) external onlyOwner {\\n\\t\\trequire(value != address(0), 'Gateway: zero address');\\n\\t\\tbool updated;\\n\\t\\tif (what == 'treasury') {\\n\\t\\t\\trequire(treasuryAddress != value, 'Gateway: treasury address already set');\\n\\t\\t\\ttreasuryAddress = value;\\n\\t\\t\\tupdated = true;\\n\\t\\t} else if (what == 'aggregator') {\\n\\t\\t\\trequire(_aggregatorAddress != value, 'Gateway: aggregator address already set');\\n\\t\\t\\t_aggregatorAddress = value;\\n\\t\\t\\tupdated = true;\\n\\t\\t}\\n\\t\\tif (updated) {\\n\\t\\t\\temit ProtocolAddressUpdated(what, value);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xa6bc7df8377942cbbcd340f9fddad581486e8842ab71e5109b4d71ea1e148059\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":246,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":249,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":916,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":118,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":238,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":11,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":105,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":3444,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"MAX_BPS","offset":0,"slot":"151","type":"t_uint256"},{"astId":3446,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"protocolFeePercent","offset":0,"slot":"152","type":"t_uint64"},{"astId":3448,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"treasuryAddress","offset":8,"slot":"152","type":"t_address"},{"astId":3450,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"_aggregatorAddress","offset":0,"slot":"153","type":"t_address"},{"astId":3454,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"_isTokenSupported","offset":0,"slot":"154","type":"t_mapping(t_address,t_uint256)"},{"astId":3458,"contract":"contracts/GatewaySettingManager.sol:GatewaySettingManager","label":"__gap","offset":0,"slot":"155","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IGateway.sol":{"IGateway":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolFee","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"OrderCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"OrderRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"provider","type":"address"},{"indexed":true,"internalType":"address","name":"senderAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"OrderSettledIn","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"OrderSettledOut","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"SenderFeeTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"address","name":"_provider","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"protocolReward","type":"uint64"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfoIn","outputs":[{"components":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"internalType":"struct IGateway.OrderIn","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfoOut","outputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"bool","name":"isRefunded","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IGateway.OrderOut","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"isOrderProcessed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fee","type":"uint256"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"refundOrder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"},{"internalType":"address","name":"_provider","type":"address"},{"internalType":"address","name":"_senderAddress","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"settleOrderIn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"address","name":"_provider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"}],"name":"settleOrderOut","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(address,address,uint256)":{"params":{"amount":"The amount of the deposit.","sender":"The address of the sender.","token":"The address of the deposited token."}},"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)":{"params":{"amount":"The amount of the deposit.","messageHash":"The hash of the message.","orderId":"The ID of the order.","rate":"The rate at which the deposit is made.","sender":"The address of the sender.","token":"The address of the deposited token."}},"OrderRefunded(uint256,bytes32)":{"params":{"fee":"The fee deducted from the refund amount.","orderId":"The ID of the order."}},"OrderSettledIn(address,address,uint256,address,bytes32)":{"details":"Emitted when an order is settled in.","params":{"amount":"The address of the deposited token.","orderId":"The ID of the order.","provider":"The address of the provider.","senderAddress":"The address of the sender.","token":"The amount of the deposit."}},"OrderSettledOut(bytes32,bytes32,address,uint96)":{"params":{"liquidityProvider":"The address of the liquidity provider.","orderId":"The ID of the order.","settlePercent":"The percentage at which the transaction is settled.","splitOrderId":"The ID of the split order."}},"SenderFeeTransferred(address,uint256)":{"params":{"amount":"The amount of the fee transferred.","sender":"The address of the sender."}}},"kind":"dev","methods":{"createOrder(address,uint256,uint96,address,uint256,address,string)":{"details":"Requirements: - `msg.sender` must approve Gateway contract on `_token` of at least `amount` before function call. - `_token` must be an acceptable token. See {isTokenSupported}. - `amount` must be greater than minimum. - `_refundAddress` refund address must not be zero address.","params":{"_amount":"The amount in the decimal of `_token` to be locked.","_rate":"The rate at which the sender intends to sell `_amount` of `_token`.","_refundAddress":"The address that will receive `_amount` in `_token` when there is a need to refund.","_senderFee":"The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient`.","_senderFeeRecipient":"The address that will receive `_senderFee` in `_token`.","_token":"The address of the token.","messageHash":"The hash of the message."},"returns":{"_orderId":"The ID of the order."}},"deposit(address,uint256)":{"details":"Requirements: - The amount must be greater than minimum. - The asset must be supported. - The provider must approve Gateway contract on `_token` of at least `_amount` before function call","params":{"_amount":"The amount to be deposited.","_token":"The address of the asset."},"returns":{"_0":"bool The deposit is successful."}},"getBalance(address,address)":{"params":{"_asset":"The address of the asset.","_provider":"The address of the provider."},"returns":{"_0":"uint256 The provider's balance."}},"getFeeDetails()":{"returns":{"max_bps":"The maximum basis points.","protocolReward":"The protocol reward amount."}},"getOrderInfoIn(bytes32)":{"params":{"_orderId":"The ID of the order."},"returns":{"_0":"Order The order details."}},"getOrderInfoOut(bytes32)":{"params":{"_orderId":"The ID of the order."},"returns":{"_0":"Order The order details."}},"isOrderProcessed(bytes32)":{"params":{"_orderId":"The ID of the order."},"returns":{"_0":"bool The order processed status."}},"isTokenSupported(address)":{"params":{"_token":"The address of the token to check."},"returns":{"_0":"bool the token is supported."}},"refundOrder(uint256,bytes32)":{"details":"Requirements: - Only aggregators can call this function.","params":{"_fee":"The amount to be deducted from the amount to be refunded.","_orderId":"The ID of the transaction."},"returns":{"_0":"bool the refund is successful."}},"settleOrderIn(bytes32,bytes,address,address,address,uint256)":{"params":{"_amount":"The amount to be transferred.","_orderId":"The ID of the transaction.","_provider":"The address of the provider.","_senderAddress":"The address of the sender.","_signature":"The signature of the provider.","_token":"The address of the asset."}},"settleOrderOut(bytes32,bytes32,address,uint64)":{"params":{"_orderId":"The ID of the transaction.","_provider":"The address of the liquidity provider.","_settlePercent":"The rate at which the transaction is settled.","_splitOrderId":"The ID of the split order."},"returns":{"_0":"bool The settlement is successful."}}},"title":"IGateway","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,uint96,address,uint256,address,string)":"809804f7","deposit(address,uint256)":"47e7ef24","getBalance(address,address)":"d4fac45d","getFeeDetails()":"b810c636","getOrderInfoIn(bytes32)":"9c0fea2c","getOrderInfoOut(bytes32)":"9bb39e13","isOrderProcessed(bytes32)":"00b727da","isTokenSupported(address)":"75151b63","refundOrder(uint256,bytes32)":"47b0f1cd","settleOrderIn(bytes32,bytes,address,address,address,uint256)":"b682b667","settleOrderOut(bytes32,bytes32,address,uint64)":"9a06601f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderSettledIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"OrderSettledOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SenderFeeTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolReward\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfoIn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IGateway.OrderIn\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfoOut\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IGateway.OrderOut\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"isOrderProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refundOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"settleOrderIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"}],\"name\":\"settleOrderOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of the deposit.\",\"sender\":\"The address of the sender.\",\"token\":\"The address of the deposited token.\"}},\"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)\":{\"params\":{\"amount\":\"The amount of the deposit.\",\"messageHash\":\"The hash of the message.\",\"orderId\":\"The ID of the order.\",\"rate\":\"The rate at which the deposit is made.\",\"sender\":\"The address of the sender.\",\"token\":\"The address of the deposited token.\"}},\"OrderRefunded(uint256,bytes32)\":{\"params\":{\"fee\":\"The fee deducted from the refund amount.\",\"orderId\":\"The ID of the order.\"}},\"OrderSettledIn(address,address,uint256,address,bytes32)\":{\"details\":\"Emitted when an order is settled in.\",\"params\":{\"amount\":\"The address of the deposited token.\",\"orderId\":\"The ID of the order.\",\"provider\":\"The address of the provider.\",\"senderAddress\":\"The address of the sender.\",\"token\":\"The amount of the deposit.\"}},\"OrderSettledOut(bytes32,bytes32,address,uint96)\":{\"params\":{\"liquidityProvider\":\"The address of the liquidity provider.\",\"orderId\":\"The ID of the order.\",\"settlePercent\":\"The percentage at which the transaction is settled.\",\"splitOrderId\":\"The ID of the split order.\"}},\"SenderFeeTransferred(address,uint256)\":{\"params\":{\"amount\":\"The amount of the fee transferred.\",\"sender\":\"The address of the sender.\"}}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,uint96,address,uint256,address,string)\":{\"details\":\"Requirements: - `msg.sender` must approve Gateway contract on `_token` of at least `amount` before function call. - `_token` must be an acceptable token. See {isTokenSupported}. - `amount` must be greater than minimum. - `_refundAddress` refund address must not be zero address.\",\"params\":{\"_amount\":\"The amount in the decimal of `_token` to be locked.\",\"_rate\":\"The rate at which the sender intends to sell `_amount` of `_token`.\",\"_refundAddress\":\"The address that will receive `_amount` in `_token` when there is a need to refund.\",\"_senderFee\":\"The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient`.\",\"_senderFeeRecipient\":\"The address that will receive `_senderFee` in `_token`.\",\"_token\":\"The address of the token.\",\"messageHash\":\"The hash of the message.\"},\"returns\":{\"_orderId\":\"The ID of the order.\"}},\"deposit(address,uint256)\":{\"details\":\"Requirements: - The amount must be greater than minimum. - The asset must be supported. - The provider must approve Gateway contract on `_token` of at least `_amount` before function call\",\"params\":{\"_amount\":\"The amount to be deposited.\",\"_token\":\"The address of the asset.\"},\"returns\":{\"_0\":\"bool The deposit is successful.\"}},\"getBalance(address,address)\":{\"params\":{\"_asset\":\"The address of the asset.\",\"_provider\":\"The address of the provider.\"},\"returns\":{\"_0\":\"uint256 The provider's balance.\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"The maximum basis points.\",\"protocolReward\":\"The protocol reward amount.\"}},\"getOrderInfoIn(bytes32)\":{\"params\":{\"_orderId\":\"The ID of the order.\"},\"returns\":{\"_0\":\"Order The order details.\"}},\"getOrderInfoOut(bytes32)\":{\"params\":{\"_orderId\":\"The ID of the order.\"},\"returns\":{\"_0\":\"Order The order details.\"}},\"isOrderProcessed(bytes32)\":{\"params\":{\"_orderId\":\"The ID of the order.\"},\"returns\":{\"_0\":\"bool The order processed status.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"The address of the token to check.\"},\"returns\":{\"_0\":\"bool the token is supported.\"}},\"refundOrder(uint256,bytes32)\":{\"details\":\"Requirements: - Only aggregators can call this function.\",\"params\":{\"_fee\":\"The amount to be deducted from the amount to be refunded.\",\"_orderId\":\"The ID of the transaction.\"},\"returns\":{\"_0\":\"bool the refund is successful.\"}},\"settleOrderIn(bytes32,bytes,address,address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to be transferred.\",\"_orderId\":\"The ID of the transaction.\",\"_provider\":\"The address of the provider.\",\"_senderAddress\":\"The address of the sender.\",\"_signature\":\"The signature of the provider.\",\"_token\":\"The address of the asset.\"}},\"settleOrderOut(bytes32,bytes32,address,uint64)\":{\"params\":{\"_orderId\":\"The ID of the transaction.\",\"_provider\":\"The address of the liquidity provider.\",\"_settlePercent\":\"The rate at which the transaction is settled.\",\"_splitOrderId\":\"The ID of the split order.\"},\"returns\":{\"_0\":\"bool The settlement is successful.\"}}},\"title\":\"IGateway\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,address,uint256)\":{\"notice\":\"Emitted when a deposit is made by a provider.\"},\"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)\":{\"notice\":\"Emitted when an order is created.\"},\"OrderRefunded(uint256,bytes32)\":{\"notice\":\"Emitted when an aggregator refunds a transaction.\"},\"OrderSettledOut(bytes32,bytes32,address,uint96)\":{\"notice\":\"Emitted when an order is settled out.\"},\"SenderFeeTransferred(address,uint256)\":{\"notice\":\"Emitted when the sender's fee is transferred.\"}},\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,uint96,address,uint256,address,string)\":{\"notice\":\"Locks the sender's amount of token into Gateway.\"},\"deposit(address,uint256)\":{\"notice\":\"Allow a provider to deposit an asset into Gateway.\"},\"getBalance(address,address)\":{\"notice\":\"Gets the balance of a provider.\"},\"getFeeDetails()\":{\"notice\":\"Gets the fee details of Gateway.\"},\"getOrderInfoIn(bytes32)\":{\"notice\":\"Gets the details of an on ramp order.\"},\"getOrderInfoOut(bytes32)\":{\"notice\":\"Gets the details of an off ramp order.\"},\"isOrderProcessed(bytes32)\":{\"notice\":\"Gets order processed status.\"},\"isTokenSupported(address)\":{\"notice\":\"Checks if a token is supported by Gateway.\"},\"refundOrder(uint256,bytes32)\":{\"notice\":\"Refunds to the specified refund address.\"},\"settleOrderIn(bytes32,bytes,address,address,address,uint256)\":{\"notice\":\"Allow aggregator to settle an order coming in.\"},\"settleOrderOut(bytes32,bytes32,address,uint64)\":{\"notice\":\"Settles an order out transaction and distributes fees accordingly.\"}},\"notice\":\"Interface for the Gateway contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGateway.sol\":\"IGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\n/**\\r\\n * @title IGateway\\r\\n * @notice Interface for the Gateway contract.\\r\\n */\\r\\ninterface IGateway {\\r\\n\\t/* ##################################################################\\r\\n                                EVENTS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @notice Emitted when an order is created.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param token The address of the deposited token.\\r\\n\\t * @param amount The amount of the deposit.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t * @param rate The rate at which the deposit is made.\\r\\n\\t * @param messageHash The hash of the message.\\r\\n\\t */\\r\\n\\tevent OrderCreated(\\r\\n\\t\\taddress indexed sender,\\r\\n\\t\\taddress indexed token,\\r\\n\\t\\tuint256 indexed amount,\\r\\n\\t\\tuint256 protocolFee,\\r\\n\\t\\tbytes32 orderId,\\r\\n\\t\\tuint256 rate,\\r\\n\\t\\tstring messageHash\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when an order is settled out.\\r\\n\\t * @param splitOrderId The ID of the split order.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t * @param liquidityProvider The address of the liquidity provider.\\r\\n\\t * @param settlePercent The percentage at which the transaction is settled.\\r\\n\\t */\\r\\n\\tevent OrderSettledOut(\\r\\n\\t\\tbytes32 splitOrderId,\\r\\n\\t\\tbytes32 indexed orderId,\\r\\n\\t\\taddress indexed liquidityProvider,\\r\\n\\t\\tuint96 settlePercent\\r\\n\\t);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when an aggregator refunds a transaction.\\r\\n\\t * @param fee The fee deducted from the refund amount.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t */\\r\\n\\tevent OrderRefunded(uint256 fee, bytes32 indexed orderId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when the sender's fee is transferred.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param amount The amount of the fee transferred.\\r\\n\\t */\\r\\n\\tevent SenderFeeTransferred(address indexed sender, uint256 indexed amount);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Emitted when a deposit is made by a provider.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param token The address of the deposited token.\\r\\n\\t * @param amount The amount of the deposit.\\r\\n\\t */\\r\\n\\tevent Deposit(address indexed sender, address indexed token, uint256 indexed amount);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when an order is settled in.\\r\\n\\t * @param provider The address of the provider.\\r\\n\\t * @param senderAddress The address of the sender.\\r\\n\\t * @param amount The address of the deposited token.\\r\\n\\t * @param token The amount of the deposit.\\r\\n\\t * @param orderId The ID of the order.\\r\\n\\t */\\r\\n\\tevent OrderSettledIn(address indexed provider, address indexed senderAddress, uint256 indexed amount, address token, bytes32 orderId);\\r\\n\\t/* ##################################################################\\r\\n                                STRUCTS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @notice Struct representing an order out.\\r\\n\\t * @param sender The address of the sender.\\r\\n\\t * @param token The address of the token.\\r\\n\\t * @param senderFeeRecipient The address of the sender fee recipient.\\r\\n\\t * @param senderFee The fee to be paid to the sender fee recipient.\\r\\n\\t * @param protocolFee The protocol fee to be paid.\\r\\n\\t * @param isFulfilled Whether the order is fulfilled.\\r\\n\\t * @param isRefunded Whether the order is refunded.\\r\\n\\t * @param refundAddress The address to which the refund is made.\\r\\n\\t * @param currentBPS The current basis points.\\r\\n\\t * @param amount The amount of the order.\\r\\n\\t */\\r\\n\\tstruct OrderOut {\\r\\n\\t\\taddress sender;\\r\\n\\t\\taddress token;\\r\\n\\t\\taddress senderFeeRecipient;\\r\\n\\t\\tuint256 senderFee;\\r\\n\\t\\tuint256 protocolFee;\\r\\n\\t\\tbool isFulfilled;\\r\\n\\t\\tbool isRefunded;\\r\\n\\t\\taddress refundAddress;\\r\\n\\t\\tuint96 currentBPS;\\r\\n\\t\\tuint256 amount;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Struct representing an order settled in.\\r\\n\\t * @param amount  The amount of the order.\\r\\n\\t * @param provider  The address of the provider.\\r\\n\\t * @param sender  The address of the sender. \\r\\n\\t * @param token The address of the token. \\r\\n\\t * @param orderid The ID of the order.\\r\\n\\t */\\r\\n\\tstruct OrderIn {\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\taddress provider;\\r\\n\\t\\taddress sender;\\r\\n\\t\\taddress token;\\r\\n\\t\\tbytes32 orderId;\\r\\n\\t}\\r\\n\\r\\n\\t/* ##################################################################\\r\\n                                EXTERNAL CALLS\\r\\n    ################################################################## */\\r\\n\\t/**\\r\\n\\t * @notice Locks the sender's amount of token into Gateway.\\r\\n\\t * @dev Requirements:\\r\\n\\t * - `msg.sender` must approve Gateway contract on `_token` of at least `amount` before function call.\\r\\n\\t * - `_token` must be an acceptable token. See {isTokenSupported}.\\r\\n\\t * - `amount` must be greater than minimum.\\r\\n\\t * - `_refundAddress` refund address must not be zero address.\\r\\n\\t * @param _token The address of the token.\\r\\n\\t * @param _amount The amount in the decimal of `_token` to be locked.\\r\\n\\t * @param _rate The rate at which the sender intends to sell `_amount` of `_token`.\\r\\n\\t * @param _senderFeeRecipient The address that will receive `_senderFee` in `_token`.\\r\\n\\t * @param _senderFee The amount in the decimal of `_token` that will be paid to `_senderFeeRecipient`.\\r\\n\\t * @param _refundAddress The address that will receive `_amount` in `_token` when there is a need to refund.\\r\\n\\t * @param messageHash The hash of the message.\\r\\n\\t * @return _orderId The ID of the order.\\r\\n\\t */\\r\\n\\tfunction createOrder(\\r\\n\\t\\taddress _token,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint96 _rate,\\r\\n\\t\\taddress _senderFeeRecipient,\\r\\n\\t\\tuint256 _senderFee,\\r\\n\\t\\taddress _refundAddress,\\r\\n\\t\\tstring calldata messageHash\\r\\n\\t) external returns (bytes32 _orderId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Settles an order out transaction and distributes fees accordingly.\\r\\n\\t * @param _splitOrderId The ID of the split order.\\r\\n\\t * @param _orderId The ID of the transaction.\\r\\n\\t * @param _provider The address of the liquidity provider.\\r\\n\\t * @param _settlePercent The rate at which the transaction is settled.\\r\\n\\t * @return bool The settlement is successful.\\r\\n\\t */\\r\\n\\tfunction settleOrderOut(\\r\\n\\t\\tbytes32 _splitOrderId,\\r\\n\\t\\tbytes32 _orderId,\\r\\n\\t\\taddress _provider,\\r\\n\\t\\tuint64 _settlePercent\\r\\n\\t) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Refunds to the specified refund address.\\r\\n\\t * @dev Requirements:\\r\\n\\t * - Only aggregators can call this function.\\r\\n\\t * @param _fee The amount to be deducted from the amount to be refunded.\\r\\n\\t * @param _orderId The ID of the transaction.\\r\\n\\t * @return bool the refund is successful.\\r\\n\\t */\\r\\n\\tfunction refundOrder(uint256 _fee, bytes32 _orderId) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow a provider to deposit an asset into Gateway.\\r\\n\\t * @dev Requirements:\\r\\n\\t * - The amount must be greater than minimum.\\r\\n\\t * - The asset must be supported.\\r\\n\\t * - The provider must approve Gateway contract on `_token` of at least `_amount` before function call\\r\\n\\t * @param _token The address of the asset.\\r\\n\\t * @param _amount The amount to be deposited.\\r\\n\\t * @return bool The deposit is successful.\\r\\n\\t */\\r\\n\\tfunction deposit(address _token, uint256 _amount) external returns (bool);\\r\\n\\r\\n\\t\\r\\n\\t/**\\r\\n\\t * @notice Allow aggregator to settle an order coming in.\\r\\n\\t * @param _orderId The ID of the transaction.\\r\\n\\t * @param _signature The signature of the provider.\\r\\n\\t * @param _provider The address of the provider.\\r\\n\\t * @param _senderAddress The address of the sender.\\r\\n\\t * @param _token The address of the asset.\\r\\n\\t * @param _amount The amount to be transferred.\\r\\n\\t */\\r\\n\\tfunction settleOrderIn(\\r\\n        bytes32 _orderId,\\r\\n        bytes memory _signature,\\r\\n        address _provider,\\r\\n        address _senderAddress,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if a token is supported by Gateway.\\r\\n\\t * @param _token The address of the token to check.\\r\\n\\t * @return bool the token is supported.\\r\\n\\t */\\r\\n\\tfunction isTokenSupported(address _token) external view returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the details of an off ramp order.\\r\\n\\t * @param _orderId The ID of the order.\\r\\n\\t * @return Order The order details.\\r\\n\\t */\\r\\n\\tfunction getOrderInfoOut(bytes32 _orderId) external view returns (OrderOut memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the details of an on ramp order.\\r\\n\\t * @param _orderId The ID of the order.\\r\\n\\t * @return Order The order details.\\r\\n\\t */\\r\\n\\tfunction getOrderInfoIn(bytes32 _orderId) external view returns (OrderIn memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the fee details of Gateway.\\r\\n\\t * @return protocolReward The protocol reward amount.\\r\\n\\t * @return max_bps The maximum basis points.\\r\\n\\t */\\r\\n\\tfunction getFeeDetails() external view returns (uint64 protocolReward, uint256 max_bps);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the balance of a provider.\\r\\n\\t * @param _provider The address of the provider.\\r\\n\\t * @param _asset The address of the asset.\\r\\n\\t * @return uint256 The provider's balance.\\r\\n\\t */\\r\\n\\tfunction getBalance(address _asset, address _provider) external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets order processed status.\\r\\n\\t * @param _orderId The ID of the order.\\r\\n\\t * @return bool The order processed status.\\r\\n\\t */\\r\\n\\tfunction isOrderProcessed(bytes32 _orderId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x469b0295e42591f14c7a722c28cd38e09181178d347f3f160a5c2f44797aa2d6\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Deposit(address,address,uint256)":{"notice":"Emitted when a deposit is made by a provider."},"OrderCreated(address,address,uint256,uint256,bytes32,uint256,string)":{"notice":"Emitted when an order is created."},"OrderRefunded(uint256,bytes32)":{"notice":"Emitted when an aggregator refunds a transaction."},"OrderSettledOut(bytes32,bytes32,address,uint96)":{"notice":"Emitted when an order is settled out."},"SenderFeeTransferred(address,uint256)":{"notice":"Emitted when the sender's fee is transferred."}},"kind":"user","methods":{"createOrder(address,uint256,uint96,address,uint256,address,string)":{"notice":"Locks the sender's amount of token into Gateway."},"deposit(address,uint256)":{"notice":"Allow a provider to deposit an asset into Gateway."},"getBalance(address,address)":{"notice":"Gets the balance of a provider."},"getFeeDetails()":{"notice":"Gets the fee details of Gateway."},"getOrderInfoIn(bytes32)":{"notice":"Gets the details of an on ramp order."},"getOrderInfoOut(bytes32)":{"notice":"Gets the details of an off ramp order."},"isOrderProcessed(bytes32)":{"notice":"Gets order processed status."},"isTokenSupported(address)":{"notice":"Checks if a token is supported by Gateway."},"refundOrder(uint256,bytes32)":{"notice":"Refunds to the specified refund address."},"settleOrderIn(bytes32,bytes,address,address,address,uint256)":{"notice":"Allow aggregator to settle an order coming in."},"settleOrderOut(bytes32,bytes32,address,uint64)":{"notice":"Settles an order out transaction and distributes fees accordingly."}},"notice":"Interface for the Gateway contract.","version":1}}}}}}